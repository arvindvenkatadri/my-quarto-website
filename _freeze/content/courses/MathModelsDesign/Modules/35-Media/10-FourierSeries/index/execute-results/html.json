{
  "hash": "413f05027f104b165ef21281b5c6155a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Fourier Series\nsubtitle: \"\"\nsubject: \"Shapes, Code, and Sound\"\nabstract: \"\"\ndate: 02/May/2024\ndate-modified: \"2025-07-29\"\norder: 10\ncategories:\n- Euler Formula\n- Fourier Series\n- Harmonics\nbibliography: \n  - grateful-refs.bib\ncitation: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nCan [Circles](../../25-Geometry/10-Circles/index.qmd) do more for us than draw these lovely patterns? Can they give us an *alphabet*, a universal way of generating and representing many forms of interest? Can we treat them like a bunch of kitchen ingredients, that we throw into a recipe to conjure up new dishes that look different?\n\n\n## {{< iconify icons8 idea >}} Inspiration\n\nTake a look at these paintings:\n\n<centre> <iframe \nwidth = 600 height = 600\nsrc=\"https://editor.p5js.org/arvindv/full/OKJD6E7qL\">\n</iframe>\n</centre> \n\nAlso see:\n<https://x.com/jagarikin/status/962449509782495232>\n\n## What is the Fourier Series?\n\n::: callout-important\nA Fourier Series is a way of composing/decomposing a complex waveform into a set of harmonically related sine Oscillations, which are summed up to create the original waveform.\n:::\n\nIn [Circles](../../25-Geometry/10-Circles/index.qmd), we saw how we could make symmetric patterns from rotating circles. We did not have a pattern in mind, except for the symmetry order. So, when we *chose* number of circles $M$ and their complex amplitudes $a_j$, $j={1..M}$ relying on our (hopefully growing) intuition, we could systematically generate symmetric patterns based on the idea of rolling circles. By trial and error, we can design both the value of $M$ and the values for $a_j$, $j={1..M}$. So far, so good.\n\nBut how about the other way around? What if we had a **pattern** in mind,\nand wanted to compute the circles, their number and amplitudes, that\nwould generate that pattern? This is where the Fourier Series comes in.\n\nThe best way to form this intuition is to play some of the **Wave Game** that is available on the [University of Colorado PHET Simulations website](https://phet.colorado.edu): \n\n::: {.column-page-inset-right}\n<iframe src=\"https://phet.colorado.edu/sims/html/fourier-making-waves/latest/fourier-making-waves_en.html\"\n        width=\"800\"\n        height=\"600\"\n        allowfullscreen>\n</iframe>\n:::\n\n## Rolling Circles and the Fourier Series\n\nBy sliding the amplitudes of various sine Oscillators (whose number you could choose), you were hopefully able to visually create a waveform that looked very close the one on the screen. This was a way of doing ***waveform synthesis***. How did you know, visually speaking, how to set the amplitude?\n\nA. **Correlation of Time waveforms**: We adjusted the slider on each sine wave when the selected sine Oscillation that you were manipulating had the ***best possible correlation*** with the target waveform!! But how does this correlation work here, with *waveforms*, instead of data variables? \n\nWe all know what [Pearson Correlations](../../../../Analytics/Descriptive/Modules/30-Correlations/index.qmd#pearson-correlation-coefficient) are: we take the *product* of two (scaled and centered) quantitative variables, value by value, and take the average of these products. With waveforms, we can intuitively do the same thing to determine the **coefficient** of each *component*  of the Fourier Series:\n\n$$\ncoeff~for~sin(\\omega_c*t) = Average~Product \\Big(sin(\\omega_c*t) * target.waveform\\Big)\n$$\n\n$$\n= \\frac{1}{Waveform~Period} * \\displaystyle{\\int}_{0}^{Waveform~Period} sin(\\omega_c*t)*target.waveform * dt\n$${#eq-fourier-coeff-intuitive}\n\n\nOK, but how does one make use of these *time-waveform correlations*?\n\nB. **Orthogonal Waveforms**: We need one more concept here: that of \"orthogonal waveforms\": these are waveforms whose correlations, as defined above, are zero! But which are these? Our good old sine and cosine waves!!\n\nWhen we take sine/cosine waves whose frequencies are **integer multiples** of some base frequency, then **all** such waveforms are orthogonal. \n\n$$\n\\frac{1}{Waveform~Period} * \\int sin(m*\\omega_c*t)*sin(n*\\omega_c*t)* dt = 0\\\\\n$$\n$$\n\\text{where m and n are multiples of some base frequency}\n$${#eq-orthogonal-functions}\n\n::: callout-note\nFor more on Orthogonality, see here: <https://qr.ae/pATe4W>\n:::\n\nC: **\"Base Frequency\"**: So what is this base frequency we have been assuming? It is determined by the target waveform:\n\n$$\nBase~ Frequency = \\frac{1}{Period~of~Target~Waveform}\n$${#eq-base-frequency}\n\n## How does the Fourier Series Compute?\n\nSo now we are ready to define the steps in computing the Fourier Series:\n\n1. Compute the `base-time-period` $T$ of the target waveform, and calculate the `base frequency` $f_c = \\frac{1}{T}$ using @eq-base-frequency.\n1. Take say $M$ integer multiples of this `base frequency` ($n = 1.....M$) and create sine waves with these. These are called ***harmonics***. \n1. Compute the *correlations* of each harmonic with the target waveform, as indicated in @eq-fourier-coeff-intuitive. These are the coefficients (i.e. amplitudes) for each of these harmonics.\n1. Write the Fourier Series for the target waveform as:\n\n$$\ntarget~waveform \\sim \\sum_{i=1}^{M} corr(i)*sin/cos(2\\pi*i*f_c*t)\n$$\n\n\n\n\n\n## Videos\n\nLet us now hear from Dan Schiffman, and also from 3Blue1Brown!\n\n{{< video https://youtu.be/Mm2eYfj0SgA >}}\n<br>\n{{< video https://youtu.be/r6sGWTCMz2k >}}\n\n## Fourier Series in Code\n\nHow if we just enter a series of numbers, ***representing our waveform***, or pick up sounds off the micrphone, and then make up a Fourier Series for that? We will use pretty much the techique used in creating the rolling circles for the drawing that we saw at first. \n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke; \"}\n\n### {{< iconify skill-icons p5js >}} p5.js\n\n### {{< iconify la r-project >}} R\n\n\n:::\n\n\n\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\n- Think of the Fourier Series as a set of sinewaves that are derived by decomposing an original waveform\n- How are these components related? As integer multiples of a fundamental frequency.\n- How are their amplitudes calculated? By taking a **correlation** between the original waveform and the given sinewave component (unit amplitude)\n- How is this accurate? By minimizing a \"least square error\" between the original waveform and the sum of sinusoids. \n\n## {{< iconify mingcute thought-line >}} A Sound Vocabulary\n\nSome terms will show up repeatedly in our work and we should be clear what they mean:\n\n1. `Oscillation`: Any periodic change in amplitude. <https://natureofcode.com/oscillation/>\n1. `Sinusoid`: A Sine Wave Oscillation, created typically with `p5.Oscillator`\n1. `Waveform`: A graph of amplitude vs time\n1. `Frequency`: The rate of the oscillation, in cycles per second. Look for a repeating pattern, and measure its time period. $1/time.period$ will give you `frequency` in Hertz(Hz)\n1. `Amplitude`: The height, or scaling factor of the oscillation. Easiest to decipher for a simple repeating pattern like `sine`, `square`, or `triangle`.\n1. `Phase`: The instantaneous angle-position of a rotating vector which generates the wave: Remember the [Euler's Formula](../../25-Geometry/10-Circles/index.qmd#how-about-the-euler-formula). Also the instantaneous angle-value of a repeating wave at a certain amplitude.\n1. `Harmonic`: A (usually) Sine Oscillation that is at some integer multiple frequency of a reference Sine Oscillation. 2X = `octave`; 10X = `decade`.\n1. `In-harmonic`: TBW\n1. `Partials`: TBW\n1. `Transient`: TBW\n1. `Alias`: TBW\n\n## {{< iconify ooui references-ltr >}} References\n\n1. Jez Swanson. *An Interactive Introduction to Fourier Transforms*\n<https://www.jezzamon.com/fourier/index.html>\n1.  Alex Miller. (2018). *Fourier Series and Spinning Circles*. <https://alex.miller.im/posts/fourier-series-spinning-circles-visualization/>\n1. Better Explained. *An Interactive Guide to the Fourier Transform*. <http://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/>\n1. Aatish Bhatia (November 6, 2013). The Math Trick Behind MP3s, JPEGs, and Homer Simpsonâ€™s Face. <https://nautil.us/the-math-trick-behind-mp3s-jpegs-and-homer-simpsons-face-234629/>\n\n\n## Resources\n\n1.  <https://mathlets.org/mathlets/fourier-coefficients/>\n2.  Working with Audio in `p5.js`.\n    <https://pdm.lsupathways.org/3_audio/>\n3.  Violet Whitney. (Sep 28, 2023) *Sounds: Working with sounds and\n    speech in P5.js*.\n    <https://medium.spatialpixel.com/sounds-bd05429aba38>\n4.  Mister Bomb. *p5.Sound project tutorials*.\n    <https://www.youtube.com/playlist?list=PLIsdHp2z9wFl7A1wWb2VmQUUojEGsKELE>\n5.  <https://musiclab.chromeexperiments.com/oscillators>\n6.  <https://www.electronicbeats.net/the-feed/excel-drum-machine/>\n7.  <https://junshern.github.io/algorithmic-music-tutorial/>\n8.  <https://blackwhiskercult.com/visual-music-in-p5-js-i/>\n9. Jason Sigal.*Visualizing Music with p5.js* <https://therewasaguy.github.io/p5-music-viz/>\n10. Doga Kurkcuoglu. <https://bilimneguzellan.net/en/?s=Fourier>\n\n\n### Other tools to explore\n\n1.  Strudel REPL <https://strudel.cc>\n2.  Introducing Jukebox, a neural net that generates music, including\n    rudimentary singing, as raw audio in a variety of genres and artist\n    styles. We're releasing a tool for everyone to explore the generated\n    samples, as well as the model and code:\n    <https://openai.com/index/jukebox/> (OpenAI, April 30,\n    2020,via Twitter https://twitter.com/OpenAI)\n3.  <https://algorithmicpattern.org/2023/05/15/strudel-live-coding-patterns-on-the-web/>\n4.  <https://betterexplained.com/articles/vector-calculus-understanding-the-dot-product/>\n5.  Freesound: Find Any Sound you Like. <https://freesound.org>\n6.  WebSpeech API.\n    <https://developer.chrome.com/blog/voice-driven-web-apps-introduction-to-the-web-speech-api/>\n7.  <https://dogbotic.com>\n\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nPackage      Version   Citation    \n-----------  --------  ------------\nambient      1.0.2     @ambient    \nmosaicCalc   0.6.4     @mosaicCalc \nplot3D       1.4.2     @plot3D     \n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}