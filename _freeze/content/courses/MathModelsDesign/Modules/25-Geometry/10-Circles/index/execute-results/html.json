{
  "hash": "b558b23d2dbb0e5c72bef2270f678246",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: <iconify-icon icon=\"ph:circles-three-fill\" width=\"1.2em\" height=\"1.2em\"></iconify-icon> <iconify-icon icon=\"gravity-ui:function\" width=\"1.2em\" height=\"1.2em\"></iconify-icon> Circles\nsubtitle: \"\"\nsubject: \"Shapes and Code\"\nabstract: \"\"\ndate: 02/May/2024\ndate-modified: \"2025-07-17\"\norder: 10\ncode-fold: true\ncategories:\n- Euler Formula\n- Parametric Equations\n- Rotation\n- Symmetry\nbibliography: \n  - grateful-refs.bib\ncitation: true\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Introduction\n\nLet us start with an investigation into rolling circles! Circles have been with us since our childhood toys and to our older (and more silly!) aspirations for wheels (ahem!). Let us understand their mathematics and see what we can make with them. \n\n## {{< iconify icons8 idea >}} Inspiration\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nt <- seq(0, 2 * pi, by = 0.001)\nx <- t\ndata <- tibble::tibble(t,\n  x = cos(t) + cos(6 * t) / 2 + sin(14 * t) / 3,\n  y = sin(t) + sin(6 * t) / 2 + cos(14 * t) / 3\n)\n\ndata %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![Mystery Curve](index_files/figure-html/fig-mystery-curve-1.png){#fig-mystery-curve fig-align='center' width=2100}\n:::\n:::\n\n\n<centre> <iframe \nwidth = 680 height = 680\nsrc=\"https://editor.p5js.org/arvindv/full/lEqfT1GBq\"> </iframe>\n</centre>\n\n## What is a Parametric Equation?\n\nHow was this curve created? The equation for the curve is given by a\npair of **parametric equations**, one for $x$ and one for $y$:\n\n$$\n\\begin{eqnarray}\nx &= cos(t) + cos(6t)/2 + sin(14t)/3\\\\\ny &= sin(t) + sin(6t)/2 + cos(14t)/3\n\\end{eqnarray}\n$$ {#eq-parametric}\n\nThis form is especially suited for a *computational depiction* of the\ncurve, since we can have the parameter $t$ go from $0~ ->\\infty$ and let\nthe $x$ and $y$ be computed and plotted. All right, whatever...but what\ndoes this have to do with circles?? For that we need to turn to the\nfamous Euler formula relating complex vectors and circles.\n\n## How about the Euler Formula?\n\nWhat is the equation of a circle? Most likely you will say:\n\n$$\n\\begin{eqnarray}\nx^2 + y^2 &= 1\\\\ \nor ~ perhaps\\\\ \n(ùë• ‚àí ‚Ñé)^2 + (ùë¶ ‚àí ùëò)^2 &= ùëÖ^2\\\\\n\\end{eqnarray}\n$$ {#eq-circle}\n\nfor a circle with center $C(h,k)$ and radius R.\n\nAs Frank Farris says, this is fine, but it represents a static view of a\ncircle, which is not the simplest way to direct the drawing of one. The\nsimplest way to **instruct a machine** to draw a circle uses a\n**parametric form** discussed above, also known as a *vector-valued\nfunction*:\n\n$$\n\\gamma(t) = (cos(t), sin(t))\n$$ for the unit circle and\n\n$$\nùõæ(ùë°) = (h + ùëÖ cos(ùë°), k + ùëÖ sin(ùë°))\n$$ for a more general one.\n\nNow, if we were to use *complex numbers* as our notation, then the\nfunction for our circle becomes:\n\n$$\n\\begin{eqnarray}\n\\gamma(t) &=& (cos(t), sin(t))\\\\\n&=& e^{it}\n\\end{eqnarray}\n$$ {#eq-euler}\n\nwhere of course, $i = \\sqrt{-1}$.\n\nThis is the famous Euler Formula that connects complex numbers with\ntrigonometry.\n\n## The Mystery Curve\n\nUsing this formula, our parametric function $\\mu(t)$ for our mystery\ncurve becomes a family of three circles, of [**different\nsizes**]{.bg-pink .black} and rotating at [**different\nspeeds**]{.bg-blue .black}:\n\n$$\n\\begin{eqnarray}\nx &= cos(t) + cos(6t)/2 + sin(14t)/3\\\\\ny &= sin(t) + sin(6t)/2 + cos(14t)/3\\\\\n\\end{eqnarray}\n$$\n\nand\n\n$$\n\\mu(t) = {\\large{\\color{hotpink}{1}} * {e^{\\color{Blue}{\\Large\\pmb{1it}}}}} + \n{\\large{\\color{hotpink}{\\frac{1}{2}}} * {e^{\\color{Blue}{\\Large{\\pmb{6it}}}}}} + \n{\\large{\\color{hotpink}{\\frac{i}{3}}} * {e^{\\color{Blue}{\\Large{\\pmb{-14it}}}}}}\n$$ {#eq-mystery-curve}\n\nwhich gives us three *rotating vectors* with amplitudes given by {1,\n1/2, 1/3} and with rotation speeds in the ratio {1 : 6: -14}. The first\ntwo rotate counter-clockwise; the third vector rotates in the clockwise\ndirection since we have a negative coefficient for $t$). The tips of\nthese rotating vectors course trace out the individual circles. We can\npicture the pattern as the *vector sum* of the vectors, or as three\ncircles where each subsequent circle rotates and rolls on the\ncircumference of the earlier one, like meshed gears.\n\n![From [The Math Less Travelled Blog](https://mathlesstraveled.wordpress.com/2015/06/04/random-cyclic-curves-5/)](../../../../../materials/images/mystery-curve.gif)\n\n\nHow do we go from the parametric form in @eq-parametric to the complex exponential form in @eq-mystery-curve? The first two terms  are direct combinings of the respective `cos` and `sin` terms into exponentials; \nthe third term may need a bit of understanding. \n\nHere the $sin$ and $cos$ terms are \"interchanged\" between *x* and *y*, so we need **multiply by** $i$ (rotate by $\\pi/2$) to swap them, which means that [the third circle starts from a 90 degree angle compared to the other two]{.black .bg-pink}. Multiplying by $i$ however makes the $sin$ term negative, so we need to **negate t** as well, since $-sin(-t) = sin(t)$. This means that the third exponential [rotates in the *opposite direction*]{.black .bg-pink} compared to the first two. See the expansion / explanation in the margin. We discuss this more in the following. \n\n::: column-margin\n$$\n\\begin{eqnarray}\n\\frac{i}{3}*e^{-i14t} &=& \\frac{i}{3} \\Big\\{cos(-14t) + i(sin(-14t) \\Big\\}\\\\\n&=& \\frac{i}{3} \\Big\\{cos(14t) - i*sin(14t)\\Big\\}\\\\\n&=& \\frac{1}{3} \\Big\\{i*cos(14t) + sin(14t)\\Big\\}\\\\\n&=& \\frac{1}{3} \\Big\\{sin(14t) + i*cos(14t)\\Big\\}\\\\\n\\end{eqnarray}\n$$\n\nwhich are respectively the desired *x* and *y* parametric functions for\nthe third term.\n:::\n\n::: callout-note\n### Reverse Rotating Vectors and Complex Amplitudes!!\n\nSigh.\n\n| Amplitude | Rotation | Example | Operation in Parametric Equation | What does it mean, really? |\n|------------|--------------|------------|--------------------|-----------------|\n| Real | Positive/CCW | $2*e^{3it}$ | $x = 2*cos(3t)$; $y=2*sin(3t)$ | Vector starts from x-axis, goes CCW |\n| Real | Negative/CW | $2*e^{-3it}$ | $x = 2*cos(3t)$; $y=-2*sin(3t)$ | Vector starts from x-axis, goes CW |\n| Complex | Positive/CCW | $2*i*e^{3it}$ | $x = -2*sin(3t)$; $y=2*cos(3t)$ | Vector starts at $\\pi/2$, goes CCW |\n| Complex | Negative/CW | $2*i*e^{-3it}$ | $x = 2*sin(3t)$; $y=2*cos(3t)$ | Vector starts at $\\pi/2$, goes CW |\n\n: Rotating Complex Exponentials and their Complex Amplitudes {#tbl-rotating-complex-exponentials-and-their-complex-amplitudes}\n:::\n\nDo think of what might happen when the amplitude has an **overall negative sign**, like $-2*e^{-3it}$ or $-2i*e^{-3it}$! (Gasp!! Swoon...). Just flip the vector on its head and rotate the same way as stated. \n\n### Plotting with Complex Exponentials in R\n\nWe can use the rules in the above table to directly plot using complex vectors in R:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nf_mystery1 <- function(x) {\n  (exp((0 + 1i) * x) +\n    0.5 * exp((0 + 6i) * x) +\n    1 / 3 * 1i * exp((0 - 14i) * x)) # Note the \"1i\"!\n}\n\ndata_mystery_1 <- tibble(t, pattern = f_mystery1(t))\n\ndata_mystery_1 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plotting-exponentials-in-R-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Rotational Symmetry\n\nWe notice a pattern in @fig-mystery-curve, our inspiration example: the\nshape has a five-fold symmetry: If we rotate the entire figure by\n$\\frac{2\\pi}{5}$, it will overlap exactly with the original. Further, we\nsuspect that the curve has 5 \"pieces\", that repeat every\n$\\frac{2\\pi}{5}$. If we chop up the parametric variable $t$ into 5\nsections, we might obtain each individual *piece*, rotated by that\nangle. What properties does the generating function @eq-mystery-curve\nhave that causes this symmetry?\n\nFollowing the development in Frank Farris' book, let us record our\nideas/suspicions of symmetry as:\n\n$$\n\\begin{eqnarray}\n\\mu(t) &= \\mu(t + \\color{Blue}{\\Large\\pmb{2\\pi/5}})\\\\\n&= e^{\\color{Blue}{\\huge\\pmb{2\\pi *i/5}}} * \\mu(t)\n\\end{eqnarray}\n$$ {#eq-symmetry-suspicion}\n\nDoes this work out? Let's see:\n\n$$\n\\begin{eqnarray}\n\\mu(t + 2\\pi/5) &=& \\Big\\{ e^{i(t + 2\\pi/5)} + \\frac{1}{2}*e^{i6(t + 2\\pi/5)} + \\frac{1}{3}*i*e^{-i14(t + 2\\pi/5)}\\Big\\}\\\\\n&=& \\Big\\{e^{2\\pi i/5} *e^{it} + \\frac{1}{2}*e^{12\\pi i/5} *e^{i6t} + \\frac{1}{3}*e^{-28\\pi i/5} *e^{-i14t}\\Big\\}\\\\\n&=& \\Big\\{e^{2\\pi i/5}*e^{it} + \\frac{1}{2}*e^{(10+2)\\pi i/5}*e^{i6t} +  \\frac{1}{3}*e^{(-30 +2)\\pi i/5} *e^{-i14t}\\Big\\}\\\\\n&=& e^{2\\pi i/5}* \\Big\\{ e^{it} + \\frac{1}{2}*e^{i6t} + \\frac{1}{3}*i*e^{-i14t}\\Big\\}\\\\\n\\end{eqnarray}\n$$ {#eq-five-fold-symmetry}\n\nSo if we shift *time* by $t = 2\\pi/5$, we get the same pattern rotated by\n$2\\pi/5$ *radians*. [Because the frequencies 1, 6, and ‚àí14 are all\ncongruent to 1 modulo 5]{.bg-pink .black}, shifting time by $2\\pi/5$\ncauses the equation to add on a complex rotation term of $e^{2\\pi*i/5}$.\n\n*Time shifts are Angle Shifts*. And our mystery curve hence meets the symmetry condition in @eq-symmetry-suspicion.\n\n### The Symmetry Condition Theorem\n\nSuppose that $m$ and $k$ are integers and that all the frequency numbers\n$n_j$, $j={1..M}$ in the finite sum:\n\n$$\nf(t) = \\sum_{i=1}^M(a_1*e^{in_1t} + a_2*e^{in_2t}...+ a_M*e^{in_Mt})\n$$ have $n_j = k(mod~ùëö)$.\n\nThen, for any choice of the [**complex**]{.bg-pink .black} coefficients\n$a_j$, $f(t)$ satisfies the symmetry condition:\n\n$$\nf(t + \\frac{2\\pi}{m}) = e{\\frac{2k*\\pi*i}{m}} * f(t)\\\\\nfor~ all~ t\n$$\n\nWhat a mouthful! What does that mean?\n\nIf we take a set of $M$ integer frequencies, such that they have the\n**same remainder** $k$ when divided by another integer $m$, then these\nfrequencies when attached to rotating circles will give us $m$-fold\nsymmetry. E.g: M = 5, m = 7, k = 1 implies the frequencies are -14+1,\n-7+1, 1, 7+1, 14+1.\n\n::: callout-note\n### Complex Coefficients?\n\nQuestion: How do we handle $n_j$, $j={1..M}$ being [complex]{.bg-pink\n.black}, at least some of them?\n\nLook back at the table @tbl-rotating-complex-exponentials-and-their-complex-amplitudes. \n\nConsider a $term = i/3 * e^{i6t}$. We can expand this as:\n\n$$\n\\begin{eqnarray}\nterm &=& i/3 * e^{i6t}\\\\\n&=& i/3 * \\big[cos(6t) + i*sin(6t)\\big]\\\\\n&=& -1/3*sin(6t) + i/3*cos(t)\\\\\n\\end{eqnarray}\n$$ \n\n\nWe can view this as a rotation by $\\pi/2$ in the counter-clockwise\ndirection. Other angles will contribute to rotations of the coefficients\nin the same way. Complex Coefficients will alter the nature of the\npattern of course, but not the symmetry!\n:::\n\n::: callout-note\n### Mutually Prime?\n\nQuestion: What happens when $k$ is a *factor* of $m$? E.g: $k=3$ and\n$m=9$: what happens? Find out!\n\n:::\n\n## Design Principles for Rotational Symmetry\n\nHow do we capture all of the above in a set of design principles for\nsymmetric rotation-based patterns? The *design parameters* for us are:\n\n-   Number of frequencies / rolling circles: M\n-   The Frequency values for each rolling circle: $n_j$, $j={1..M}$\n-   The (complex) Amplitudes $a_j$, $j={1..M}$\n\nLarger values of $M$ give a more fine grain structure to the pattern,\nespecially when combined with *diminishing amplitudes* of $a_j$, an idea\nthat we will encounter again in [Making\nNoise](../../Modules/3-Waves/20-MakingNoise/index.qmd#d.-fractal-overlay-and-combining).\n\nLet us [randomly create an equation](<https://mathlesstraveled.wordpress.com/2015/06/04/random-cyclic-curves-5/>), using the following parameters:\n\n-   M = 5 (Number of rotating circles)\n-   m = 7 (Prime Modulus) i.e. **Order** of Symmetry\n-   k = 2 (The remainder of $n*m~mod~k$) i.e. **Type** of Symmetry\n\nHere is the plot of the frequency components:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Set graph theme\ntheme_set(new = theme_custom())\n#\nset.seed(42)\nM <- 5 # Number of circles\nm <- 7 # Prime Modulus\nk <- 2 # Type of Symmetry\ntibble(\n  index = seq(-floor((M - 1) / 2), floor((M - 1) / 2), 1),\n  prime_multiple = m * index,\n  remainder = rep(k, length(index)),\n  frequency = prime_multiple + remainder\n) %>%\n  mutate(amplitude = if_else(frequency == k, 1, k / frequency)) %>%\n  # scaling amplitudes\n  # mutate(y0 = rep(0, length(index)),\n  #        z0 = rep(0, length(index))) %>%\n  dplyr::select(prime_multiple, frequency, amplitude) -> circles\ncircles\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"prime_multiple\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"frequency\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"amplitude\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"-14\",\"2\":\"-12\",\"3\":\"-0.1666667\"},{\"1\":\"-7\",\"2\":\"-5\",\"3\":\"-0.4000000\"},{\"1\":\"0\",\"2\":\"2\",\"3\":\"1.0000000\"},{\"1\":\"7\",\"2\":\"9\",\"3\":\"0.2222222\"},{\"1\":\"14\",\"2\":\"16\",\"3\":\"0.1250000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n##\ncircles %>%\n  gf_hline(yintercept = 0, colour = \"grey\") %>%\n  gf_segment(rep(0, length(prime_multiple)) + rep(0, length(prime_multiple)) ~ prime_multiple + frequency,\n    arrow = arrow(\n      angle = 20,\n      length = unit(0.15, \"inches\"),\n      ends = \"last\", type = \"open\"\n    )\n  ) %>%\n  gf_segment(\n    rep(0, length(prime_multiple)) + amplitude ~\n      frequency + frequency,\n    data = circles, linewidth = 2,\n    arrow = arrow(\n      angle = 30,\n      length = unit(0.1, \"inches\"),\n      ends = \"last\", type = \"open\"\n    )\n  ) %>%\n  gf_point(rep(0, length(prime_multiple)) ~ prime_multiple,\n    colour = \"red\", size = 3\n  ) %>%\n  gf_point(rep(0, length(prime_multiple)) ~ frequency,\n    xlab = \"Frequency Component\",\n    ylab = \"Amplitude\", data = circles\n  ) %>%\n  gf_labs(\n    title = \"Rotating Vectors Frquencies and Amplitudes\",\n    subtitle = \"Negative Frequency components rotate counterclockwise\", caption = \"Red Dots: Prime Modulus Multiples\"\n  ) %>%\n  gf_refine(annotate(\n    x = circles$frequency + 1.75,\n    y = circles$amplitude,\n    geom = \"text\",\n    label = as.character(round(circles$amplitude, 4), nsmall = 3), size = 3.5\n  )) %>%\n  gf_refine(scale_x_continuous(breaks = c(-28, -21, -14, -7, -5, 0, 2, 7, 9, 14, 16))) %>%\n  gf_theme(theme_custom())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=2100}\n:::\n:::\n\n\nThe function for this curve would be:\n\n$$\n\\begin{multline}\n\\mu(t) = {\\large{\\color{hotpink}{1}} * {e^{\\color{Blue}{\\large{\\pmb{2it}}}}}}+\n\\\\\n+{\\large{\\color{hotpink}{0.2222}} * {e^{\\color{Blue}{\\large{\\pmb{9it}}}}}} +\n{\\large{\\color{hotpink}{0.125}} *\n{e^{\\color{Blue}{\\large{\\pmb{16it}}}}}}\n\\\\\\ -\n{\\large{\\color{hotpink}{0.4}} * {e^{\\color{Blue}{\\large{\\pmb{-5it}}}}}} \n-{\\large{\\color{hotpink}{0.1667}} * {e^{\\color{Blue}{\\large{\\pmb{-12it}}}}}}\n\\\\\\\n\\end{multline}\n$$ {#eq-mystery-curve2}\n\n\n\nLet us now plot this:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# remainder = 2 from 7\n# frequencies: 2, 7+2, 14+2, -7+2, -14+2\nf_mystery2 <- function(x) {\n  1.0 * (exp((0 + 2i) * x) +\n    0.2222 * exp((0 + 9i) * x) +\n    0.125 * exp((0 + 16i) * x) -\n    0.4 * exp((0 - 5i) * x) -\n    0.1667 * exp((0 - 12i) * x))\n}\ndata_mystery_2 <- tibble(t, pattern = f_mystery2(t))\ndata_mystery_2 %>%\n  gf_point(Im(pattern) ~ Re(pattern), title = \"Complex Exponential Rendering\n           \") %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mystery-curve-2-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n###\ndata2 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(2 * t) + 0.2222 * cos(9 * t) + 0.125 * cos(16 * t) - 0.4 * cos(5 * t) - 0.1667 * cos(12 * t),\n  y = sin(2 * t) + 0.2222 * sin(9 * t) + 0.125 * sin(16 * t) + 0.4 * sin(5 * t) + 0.1667 * sin(12 * t)\n)\ndata2 %>%\n  gf_point(y ~ x, title = \"Parametric Equation Rendering\") %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/mystery-curve-2-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\nThere, we have designed a pattern with seven-fold rotational symmetry.\nCan you make this in `p5.js`? Can you try for other orders and types of\nsymmetry?\n\n## {{< iconify codicon mirror >}} Mirror Symmetry\n\nThe coordinate system defines a positive increase in angle as the\n**counterclockwise direction**. So an increase in the parameter $t$,\nincreases the angle for each frequency component in that direction, **if\ntheir coefficient is positive**, and the other way of their\n**coefficient is negative**. So far so good.\n\nConsider a small modification to our original @fig-mystery-curve:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n## Original Mystery Curve\n# ## remainder = +1 from 5\n# ## frequencies 1, 5+1, -15+1\ndata1 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(t) + cos(6 * t) / 2 + sin(14 * t) / 3,\n  y = sin(t) + sin(6 * t) / 2 + cos(14 * t) / 3\n)\n\n# Mystery Curve\ndata1 %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n# Derived from Mystery\n# Remainder = 2 from 5\n# Frequencies: 2, 5+2, -15+2\n# Coeffs: 1,1,1\ndata3 <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(t) + cos(6 * t) + cos(14 * t),\n  y = sin(t) + sin(6 * t) + sin(14 * t)\n)\ndata3 %>%\n  gf_point(y ~ x) %>%\n  gf_refine(coord_equal()) %>%\n  gf_hline(yintercept = 0) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){fig-align='center' width=2100}\n:::\n:::\n\n\nIt should be immediately clear that the second pattern above is the same\nabove and below the horizontal line; it exhibits *horizontal mirror\nsymmetry*, $f(-t) = f(t)$.\n\nUnder what conditions would a pattern be symmetric about an\narbitrarily-tilted mirror, a mirror at angle $\\alpha$ say?\n\nFrom Farris:\n\n::: callout-note\n### Mirror at Angle $\\alpha$\n\nWhen every coefficient is a real multiple of $e^{i\\alpha}$, the curve\nsatisfies $f(-t) = e^{2\\alpha*i}f(t)$.\n\nThe right-hand side is the correct expression for reflection across the\nline through the origin inclined at angle $\\alpha$(Check!!). If one\nwants curves with slanted mirrors, simply finds a curve symmetric about\nthe x-axis satisfying $f(-t) = f(t)$, and tilts it by $\\alpha$.\n:::\n\n## Fun Extras to Try\n\nIt would be cool to simply develop the equations for any pattern in\n**complex notation** as in @eq-mystery-curve and throw that into code,\nwithout the tedious conversions into sines and cosines. Can we try that?\n\nHere is an example in R:\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nt <- seq(0, 2 * pi, by = 0.001)\nx <- t\n## NOTE: need the minus sign here inside the exponential!!\n## AND Absolutely need the \"1\" here before the solitary \"i\"!!\n## Need to figure these out\nf1 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.25 * exp(-(0 + 6i) * x) +\n    0.2 * exp(-(0 + 11i) * x))\n}\nplot(f1(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n##\nf2 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    0.2222 * exp(-(0 + 9i) * x) +\n    0.125 * exp(-(0 + 16i) * x) -\n    0.4 * exp(-(0 - 5i) * x) -\n    0.1667 * exp(-(0 - 12i) * x))\n}\nplot(f2(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n## Plotting with Exponential Functions\nf3 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.5 * exp(-(0 + 6i) * x) +\n    1 / 3 * exp(-(0 - 14i) * x)\n  )\n}\nplot(f3(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-3.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n##\nf4 <- function(x) {\n  (exp(-(0 + 1i) * x) +\n    0.5 * exp(-(0 + 6i) * x) +\n    1 / 3 * exp(-(0 + 14i) * x)\n  )\n}\nplot(f4(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-4.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n##\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, 1, 1\nf5 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    1.0 * exp(-(0 + 7i) * x) +\n    1.0 * exp(-(0 + 13i) * x)\n  )\n}\nplot(f5(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-5.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n##\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, -1/2, -i/3 ( Note!!!)\nf6 <- function(x) {\n  (exp(-(0 + 2i) * x) +\n    -0.5 * exp(-(0 + 7i) * x) +\n    -1 / 3 * exp(pi / 2 * 1i) * exp(-(0 + 13i) * x)\n  )\n}\nplot(f6(x), asp = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-base-R-6.png){fig-align='center' width=2100}\n:::\n:::\n\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# t <- seq(0, 2 * pi, by = 0.001) # Already computed\ndata1 <- tibble(t, pattern = f1(t))\ndata2 <- tibble(t, pattern = f2(t))\ndata3 <- tibble(t, pattern = f3(t))\ndata4 <- tibble(t, pattern = f4(t))\ndata5 <- tibble(t, pattern = f5(t))\ndata6 <- tibble(t, pattern = f6(t))\n\ndata1 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndata2 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndata3 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-3.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\ndata4 %>%\n  gf_point(Im(pattern) ~ Re(pattern)) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/fun-stuff-ggformula-4.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## Comparing Exponential and Trigonometric Functions\n\nJust for practice, let us once more be clear between the complex exponential notation, and the parametric trigonometric functions. \n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, 1, 1\nf7 <- function(x) {\n  (exp(-(0 + 2i) * x) + exp(-(0 + 7i) * x) + exp(-(0 + 13i) * x))\n}\n\n### Parametric Coordinates Tibble\ndata7a <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos((2) * t) + cos(7 * t) + cos(13 * t),\n  y = sin(2 * t) + sin(7 * t) + sin(13 * t)\n)\n### Complex Exponential Tibble\ndata7b <- tibble(t, pattern = f7(t))\n### Plots\nplot(f7(x),\n  asp = 1, cex = 0.2,\n  main = \"Base R: Exponential Function Plot\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n###\ndata7a %>%\n  gf_point(y ~ x,\n    title = \"ggFormula: Trigonometric Function Plot\"\n  ) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n###\ndata7b %>%\n  gf_point(Im(pattern) ~ Re(pattern),\n    title = \"ggFormula: Exponential Function Plot\"\n  ) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-3.png){fig-align='center' width=2100}\n:::\n:::\n\n\n############################################## \n\n\n::: {.cell layout-ncol=\"3\" layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# ## remainder = +2 from 5\n# ## frequencies 0+2, 5+2, -15+2\n# ## Coefficients 1, -1/2, -i/3 ( Note!!!)\nf8 <- function(x) {\n  (exp(-(0 + 2i) * x) - 0.5 * exp(-(0 + 7i) * x) +\n    1i / 3 * exp((0 + 13i) * x))\n}\n\ndata8a <- tibble::tibble(\n  t = seq(0, 2 * pi, 0.001),\n  x = cos(2 * t) - 0.5 * cos(7 * t) +\n    0.3 * cos(-13 * t + pi / 2),\n  y = sin(2 * t) - 0.5 * sin(7 * t) +\n    0.3 * sin(-13 * t + pi / 2)\n)\ndata8b <- tibble(t, pattern = f8(t))\n###\nplot(f8(x),\n  asp = 1, cex = 0.2,\n  main = \"Base R: Exponential Function Plot\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n###\ndata8a %>%\n  gf_point(y ~ x, title = \"ggFormula: Trigonometric Function Plot\") %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-2.png){fig-align='center' width=2100}\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\n###\ndata8b %>%\n  gf_point(Im(pattern) ~ Re(pattern),\n    title = \"ggFormula: Exponential Function Plot\"\n  ) %>%\n  gf_refine(coord_equal()) %>%\n  gf_theme(theme_void())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-3.png){fig-align='center' width=2100}\n:::\n:::\n\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\nSums of Complex exponentials are very common in mathematics and show up in many places: here, with symmetry, with [Fourier Series](../../35-Media/10-FourierSeries/index.qmd), with Sound synthesis and Analysis.\n\n## {{< iconify fluent-mdl2 decision-solid >}} Conclusion\n\nWe have seen the close relationship between complex rotating exponentials and their trigonometric decompositions, embodied in the Euler Formula. \n\nWe also saw how multiple such exponentials can be used to combine using complex weighting to create symmetric patterns. \n\nAnd how symmetry depends upon the frequencies of the exponentials having a very specific relationship using modulo arithmetic.\n\n## Your Turn\n\nCan you reverse engineer these curves, in R or in p5.js?\n\n![From [The Math Less Travelled Blog](https://mathlesstraveled.wordpress.com/2015/06/04/random-cyclic-curves-5/)](../../../../../materials/images/circle-patterns.png)\n\n\n## {{< iconify ooui references-ltr >}} References\n\n1. Frank Farris. *Creating Symmetry: The Artful Mathematics of Wallpaper Patterns*. Princeton University Press (2 June 2015).\n1. Doga Kurkcuoglu. <https://bilimneguzellan.net/en/follow-up-to-fourier-series-2/>. Look at some very cool animations here!\n1.  Gorilla Sun Blog.\n    <https://www.gorillasun.de/blog/parametric-functions-and-particles/>\n1.  CrateCode: Complex Generative Art with p5.js.\n    <https://cratecode.com/info/p5js-generative-art-complex-functions>\n1.  Gorilla Sun Blog.\n    <https://www.gorillasun.de/blog/parametric-functions-and-particles/>\n1. Brent Yorgey.(2015). The Math Less Travelled Blog. *Random Cylic Curves*. <https://mathlesstraveled.wordpress.com/2015/06/04/random-cyclic-curves-5/>\n1. University of New South wales. *Exponential Sums Page*. <https://www.unsw.edu.au/science/our-schools/maths/our-school/spotlight-on-our-people/history-school/glimpses-mathematics-and-statistics/exponential-sums>\n1. John Myles White. *Complex Numbers in R*. <https://www.johnmyleswhite.com/notebook/2009/12/18/using-complex-numbers-in-r/>\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\nPackage     Version   Citation   \n----------  --------  -----------\nggformula   0.12.0    @ggformula \n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}