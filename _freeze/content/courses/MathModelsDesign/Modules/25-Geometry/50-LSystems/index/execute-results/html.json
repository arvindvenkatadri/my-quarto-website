{
  "hash": "f35eca85aa859d57b5f82a497a53540d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"L-Systems\"\nsubtitle: \"\"\nsubject: \"Shapes and Code\"\nabstract: \"\"\ndate: 02/May/2024\ndate-modified: \"2025-07-17\"\norder: 50\ncategories:\n- Iterated Functions\n- Fractals\n- L-Systems\n- Algorithmic Patterns\n- Symmetry\nimage: \"\"\nlightbox: true\n---\n\n:::: pa4\n::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}\n[Trees]{.f3}\\\n\n[\"I think that I shall never see\\\nA poem lovely as a tree.\\\nA tree whose hungry mouth is prest\\\nAgainst the earth’s sweet flowing breast;\\\nA tree that looks at God all day,\\\nAnd lifts her leafy arms to pray;\\\nA tree that may in Summer wear\\\nA nest of robins in her hair;\\\nUpon whose bosom snow has lain;\\\nWho intimately lives with rain.\\\nPoems are made by fools like me,\\\nBut only God can make a tree.\"]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}\n\n[--- Joyce Kilmer, 1915]{.f6 .ttu .tracked .fs-normal}\n:::\n::::\n\n## {{< iconify icons8 idea >}} Inspiration\n\n![Japanese Daisugi](../../../../../materials/images/daisugi.jpg)\n\n## Introduction\n\nTrees are fractal in nature, meaning that patterns created by the large\nstructures, such as the main branches, repeat themselves in smaller\nstructures, such as smaller branches.... a universal growth pattern\nfirst observed by Leonardo da Vinci 500 years ago: a simple yet\nstartling relationship that always holds between the size of a tree's\ntrunk and sizes of its branches.\n\n<center>![](../../../../../materials/images/leonardotree1.jpg)</center>\n\n## An Introduction to L-Systems\n\nFrom [Job Talle's\nWebsite](https://jobtalle.com/lindenmayer_systems.html):\n\nLindenmayer systems were originally conceived by Hungarian biologist\nAristid Lindenmayer while studying algae growth. He developed L-systems\nas a way to describe the growth process of algae and simple plants. The\nresult was a **type of language** in which the recursive and self\nsimilar properties of organism growth can be expressed. Indeed,\nL-systems can be used to generate natural patterns, but well known\nmathematical patterns can also be written as an L-system. In this\narticle, I will explain different flavors of L-systems, and I will\ndemonstrate them by rendering 2D Lindenmayer systems and 3D Lindenmayer\nsystems using turtle graphics.\n\nThe language is very simple. It consists of **symbols** (the alphabet)\nand **production rules**. The first state of the sentence is called the\n**axiom**. The production rules can be applied repeatedly on this axiom\nto evolve or grow the system. A simple example would be a system with\nthe axiom $AA$, and the rule $A→ABA$.\n\nYou can see how a self expanding sentence can be analogous to cell\ndivision in plants and other biological processes.\n\n$$\naxiom: AA\n$$ $$\nProduction ~ Rule: A --> ABA\n$$\n\n$$\nIterations:\\\\\\ \n1. A\\\\\\ \n$$\n\n$$\n2. ~\\color{magenta}{A}~\\color{Black}B~\\color{magenta}{A}\\\\\\ \n$$ $$\n3.~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}\\\\\\\n$$ $$\n4.~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}~~\\color{Black}B~~\\color{magenta}{ABA}~\\color{Black}B~\\color{magenta}{ABA}\n$$\n\nL-system Structures thus develop through a process of **string\nrewriting**. A string of letters is transformed into a new string of\nletters using simple rules called **productions**. The process is\nrepeated indefinitely, each time using the string that was just produced\nas the source for the next string. Because the strings tend to grow with\neach rewrite, an L-system can become arbitrarily complex, but always\nguided by a simple process dictated by a fixed set of simple rules. In\nthis respect, L-systems are a manifestation of [Complexity\nPhenomena](https://www.complexityexplorer.org/courses/185-introduction-to-complexity).\n\nAll right, but how does this become a **tree**??\n\nTwo things need to be done:\n\n-   Each **symbol** in the language needs to be mapped to a *left\n    branch* or a *right branch*. (with turn angle)\n-   At each application of the *production rules*, branch **size** is\n    scaled down by a number.\n\n![](https://www.birdsoutsidemywindow.org/wp-content/uploads/2018/11/diagram_da_vinci_rule_of_trees_christophermalloy_insidescience-600x291.jpg){#fig-l-system}\n\n[Image Courtesy Christophe Eloy \\| University of\nProvence](https://www.insidescience.org/news/uncovering-da-vincis-rule-trees).\n\nIn the @fig-l-system, the RHS shows a typical figure generated by the\nL-system language. This figure shows both the LHS and RHS turns, and the\nfairly rapid reduction in the size of the branches.\n\nLet us see how we can create **\"Algorithmic Trees\"**.\n\n## Creating Trees using L-systems\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n### Using p5.js\n\n<center>\n\n<iframe width=\"780px\" height=\"600px\" src=\"https://editor.p5js.org/arvindv/full/3XhIEr2Iv\">\n\n</iframe>\n\n</center>\n\n### Using R\n\nWe will use the package `LindenmayerR` to create our tree.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\n###\nlibrary(LindenmayeR)\nlibrary(LearnGeom)\nlibrary(TurtleGraphics)\noptions(max.print = 20)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Lindemayer tree\n\n## Dictionary of Symbols\ndictionary <- data.frame(\n  symbol = c(\"F\", \"f\", \"+\", \"-\", \"[\", \"]\"), # symbol column\n  action = c(\"F\", \"f\", \"+\", \"-\", \"[\", \"]\"), # action column\n  stringsAsFactors = FALSE\n)\n\n## Axioms to start and morph\ntree_morph_rules <- data.frame(\n  inp = c(\"F\"), # starting axiom\n  out = c(\"F[+F][-F]\"), # Morphing Rule\n  stringsAsFactors = FALSE\n)\n\n## Build the Tree with commands\nLtree <- Lsys(\n  init = \"F\",\n  rules = tree_morph_rules,\n  n = 2,\n  verbose = 0, # No progress messages please...\n  retAll = FALSE # One Vector output at the end only\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     start end\n[1,]     1   1\n\n[[1]]\n  start end    insert\n1     1   1 F[+F][-F]\n\n[[1]]\n     start end\n[1,]     1   1\n[2,]     4   4\n[3,]     8   8\n\n[[1]]\n  start end    insert\n1     1   1 F[+F][-F]\n2     4   4 F[+F][-F]\n3     8   8 F[+F][-F]\n```\n\n\n:::\n\n```{.r .cell-code}\n## Now draw the tree\ndrawLsys(\n  string = Ltree,\n  drules = dictionary,\n  stepSize = 10, shrinkFactor = 1.2, # integers shrink!\n  ang = 12,\n  st = c(50, 10, 90) # Root Position x, y, angle from bottom-left\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n:::\n\n\nA more complex, and more botanical-looking, tree or seaweed:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Define Axiom and Mutation Rules\nfractal_tree_rules <- data.frame(\n  inp = c(\"X\", \"F\"),\n  out = c(\"F-[[X]+X]+F[+FX]-X\", \"FF\"),\n  stringsAsFactors = FALSE\n)\n\n## Create the Algorithmic Tree\nfractal_tree <- Lsys(\n  init = \"X\", # Axiom\n  rules = fractal_tree_rules,\n  n = 4,\n  verbose = 0,\n  retAll = FALSE\n)\n\n## Now draw the tree\ndrawLsys(\n  string = fractal_tree,\n  drules = dictionary,\n  stepSize = 2, # Shrink by half each time\n  ang = runif(n = 1, min = 3, max = 30),\n  st = c(50, 5, 90), # Origin of tree\n  gp = gpar(col = \"chocolate4\", fill = \"honeydew\")\n)\n\ngrid.text(\"Fractal Seaweed (n = 4)\", 0.25, 0.25)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     start end\n[1,]     1   1\n\n[[1]]\n  start end             insert\n1     1   1 F-[[X]+X]+F[+FX]-X\n\n[[1]]\n     start end\n[1,]     5   5\n[2,]     8   8\n[3,]    15  15\n[4,]    18  18\n\n[[2]]\n     start end\n[1,]     1   1\n[2,]    11  11\n[3,]    14  14\n\n[[1]]\n  start end             insert\n1     5   5 F-[[X]+X]+F[+FX]-X\n2     8   8 F-[[X]+X]+F[+FX]-X\n3    15  15 F-[[X]+X]+F[+FX]-X\n4    18  18 F-[[X]+X]+F[+FX]-X\n\n[[2]]\n  start end insert\n1     1   1     FF\n2    11  11     FF\n3    14  14     FF\n\n[[1]]\n      start end\n [1,]    10  10\n [2,]    13  13\n [3,]    20  20\n [4,]    23  23\n [5,]    30  30\n [6,]    33  33\n [7,]    40  40\n [8,]    43  43\n [9,]    56  56\n[10,]    59  59\n [ reached 'max' / getOption(\"max.print\") -- omitted 6 rows ]\n\n[[2]]\n      start end\n [1,]     1   1\n [2,]     2   2\n [3,]     6   6\n [4,]    16  16\n [5,]    19  19\n [6,]    26  26\n [7,]    36  36\n [8,]    39  39\n [9,]    46  46\n[10,]    47  47\n [ reached 'max' / getOption(\"max.print\") -- omitted 8 rows ]\n\n[[1]]\n  start end             insert\n1    10  10 F-[[X]+X]+F[+FX]-X\n2    13  13 F-[[X]+X]+F[+FX]-X\n3    20  20 F-[[X]+X]+F[+FX]-X\n4    23  23 F-[[X]+X]+F[+FX]-X\n5    30  30 F-[[X]+X]+F[+FX]-X\n6    33  33 F-[[X]+X]+F[+FX]-X\n [ reached 'max' / getOption(\"max.print\") -- omitted 10 rows ]\n\n[[2]]\n  start end insert\n1     1   1     FF\n2     2   2     FF\n3     6   6     FF\n4    16  16     FF\n5    19  19     FF\n6    26  26     FF\n [ reached 'max' / getOption(\"max.print\") -- omitted 12 rows ]\n\n[[1]]\n      start end\n [1,]    17  17\n [2,]    20  20\n [3,]    27  27\n [4,]    30  30\n [5,]    37  37\n [6,]    40  40\n [7,]    47  47\n [8,]    50  50\n [9,]    63  63\n[10,]    66  66\n [ reached 'max' / getOption(\"max.print\") -- omitted 54 rows ]\n\n[[2]]\n      start end\n [1,]     1   1\n [2,]     2   2\n [3,]     3   3\n [4,]     4   4\n [5,]     8   8\n [6,]     9   9\n [7,]    13  13\n [8,]    23  23\n [9,]    26  26\n[10,]    33  33\n [ reached 'max' / getOption(\"max.print\") -- omitted 74 rows ]\n\n[[1]]\n  start end             insert\n1    17  17 F-[[X]+X]+F[+FX]-X\n2    20  20 F-[[X]+X]+F[+FX]-X\n3    27  27 F-[[X]+X]+F[+FX]-X\n4    30  30 F-[[X]+X]+F[+FX]-X\n5    37  37 F-[[X]+X]+F[+FX]-X\n6    40  40 F-[[X]+X]+F[+FX]-X\n [ reached 'max' / getOption(\"max.print\") -- omitted 58 rows ]\n\n[[2]]\n  start end insert\n1     1   1     FF\n2     2   2     FF\n3     3   3     FF\n4     4   4     FF\n5     8   8     FF\n6     9   9     FF\n [ reached 'max' / getOption(\"max.print\") -- omitted 78 rows ]\n```\n\n\n:::\n:::\n\n\n### Fractal Grower\n\nHead off to\n<https://www.cs.unm.edu/~joel/PaperFoldingFractal/paper.html>. Download\nthe `.jar` file and save it say in your Documents folder. Open and play.\nInstructions are on the website. Make note of how the `scaling factor`\nworks here.\n\nSome suggestions!! Note the alphabet!!!\n![](../../../../../materials/images/L-system-pythagoras.png)\n\n![](../../../../../materials/images/L-system-KrishnaAnklet.png)\n\n+----------------------------------+----------------------------------+\n| Col1                             | Col2                             |\n+==================================+==================================+\n| A.  Pythagorean Tree:            | ![                               |\n|                                  | ](../../../.%20./../materials/im |\n| -   Axiom: \\[++!++!++!\\]xy       | ages/L%20-system-pythagoras.png) |\n|                                  | \\|                               |\n| -   Production Rules:            |                                  |\n|                                  |                                  |\n|     -   x =                      |                                  |\n|                                  |                                  |\n|     \\[-\\[!++!++!++!\\]!xy         |                                  |\n|                                  |                                  |\n|     -   y =                      |                                  |\n|                                  |                                  |\n| \\[+\\![!++!++!++!\\]!xy            |                                  |\n|                                  |                                  |\n| ```                              |                                  |\n| -   startAngle: 0                |                                  |\n| -   turnAngle: 45.0              |                                  |\n| -   growth : 1.408               |                                  |\n| ```                              |                                  |\n+----------------------------------+----------------------------------+\n| B. Krishna's Anklets:            | ![](.                            |\n|                                  | ./../../../.%20./materials/image |\n| -   Axiom: ++af-h-f+h            | s/L-sy%20stem-KrishnaAnklet.png) |\n|                                  |                                  |\n|     ```                          |                                  |\n|     -   f                        |                                  |\n|     ```                          |                                  |\n|                                  |                                  |\n|     -   \\## h                    |                                  |\n|                                  |                                  |\n|         f++h++f-h-f++h++f-h-f++h |                                  |\n|                                  |                                  |\n| -   Production Rules:            |                                  |\n|                                  |                                  |\n|     -   f = f - h - f ++ h ++    |                                  |\n|         f - h - f                |                                  |\n|     -   startAngle: 0            |                                  |\n|     -   turnAngle: 45.0          |                                  |\n|     -   growth:1.0               |                                  |\n+----------------------------------+----------------------------------+\n|                                  |                                  |\n+----------------------------------+----------------------------------+\n:::\n\n## Design Principles for L-Systems\n\n-   Pick a set of symbols. i.e. our alphabet (say two or three letters\n    of the alphabet)\n-   Map these to specific movements in the growth of the tree\n-   Decide on an `axiom`. It can include one or more of the symbols.\n-   Decide on a (set of) `production rules`. These should generate all\n    the symbols in our alphabet. (Why?)\n-   Decide on a `scaling factor`\n-   Apply the `production rules` multiple times starting with the axiom,\n    develop an extensive string using this recursion\n-   Plot the resulting string, scaling the individual recursions by the\n    `scaling factor`.\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\n-   By making use of \"just sufficient randomness\" in a few parameters,\n    it is possible to generate very organic-looking trees\n-   These tree-like layouts can show up in a surprising number of\n    places, such as transport networks, residential layouts.\n-   The multiple iterations generated from a few simple rules embody all\n    the complexity of a **language**.\n-   Trees become a great metaphor for a diverse set of things and ideas.\n\n## {{< iconify ooui references-ltr >}} References\n\n1.  Job Talle. *Lindenmayer Systems*\n    <https://jobtalle.com/lindenmayer_systems.html>\n2.  C. J Jennings. *L-systems*.\n    <https://cgjennings.ca/articles/l-systems/>\n3.  Joel Castellanos. *Fractal Grower: Java Software for Growing\n    Lindenmayer Substitution Fractals (L-systems)*.\n    <https://www.cs.unm.edu/~joel/PaperFoldingFractal/paper.html>\n4.  Paul Bourke. *L systems User Notes*.\n    <https://paulbourke.net/fractals/lsys/>\n5.  Przemysław Prusinkiewicz and Aristid Lindenmayer. [The Algorithmic\n    Beauty of Plants](http://algorithmicbotany.org/papers/#abop).\n    Springer-Verlag, 1990.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}