{
  "hash": "ae4d0fe2b3d1a19ad2fbea2796495959",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Connecting LMStudio to RStudio'\nabstract: \"Chat and Code Completion with Locally Run LLMs\"\ndate: 29/Jun/2025\ndate-modified: \"2025-07-17\"\nimage: preview.jpg\nimage-alt: \"Photo by Pixabay: https://www.pexels.com/photo/white-and-yellow-playing-cards-39018/\"\norder: 30\ncategories:\n- LLM\n- Code Completion\n- Chat\n- LMStudio\n- Local LLMs\ndraft: true\n---\n\n![](preview.jpg){fig-alt=\"Pick a Card\" fig-align=\"center\" width=\"286\"}\n\n\n\n## Introduction\n\n[LM Studio](https://lmstudio.ai/) is a free, open-source desktop application that allows you to run large language models (LLMs) locally on your computer. It provides a user-friendly interface for interacting with LLMs, making it easy to chat with them, generate text, and perform various tasks without needing an internet connection.\n\nIn this module, we will see how we can **download** an LLM, fire it up in LM Studio, and then connect it to RStudio using the `ellmer` package. This will allow us to use the LLM for code completion and chat directly from RStudio.\n\n## Getting Started\nTo get started, you will need to install LM Studio and the `ellmer` package in R. Follow these steps: \n1. **Download and Install LM Studio**: \n   - Visit the [LM Studio website](https://lmstudio.ai/) and download the application for your operating system (Windows, macOS, or Linux).\n   - Follow the installation instructions provided on the website.\n2. **Install the `ellmer` package**:\n   - Open RStudio and run the following command to install the `ellmer` package from GitHub:\n   ```r\n   remotes::install_github(\"tidyverse/ellmer\")\n   ```\n3. **Download a Local LLM**:\n   - Open LM Studio and navigate to the \"Models\" tab.\n   - Search for a model you want to use (e.g., `llama-3.1-70b`).\n   - Click on the model and follow the instructions to download it. This may take some time depending on your internet speed and the size of the model. \n4. **Start LM Studio**:\n   - Once the model is downloaded, launch LM Studio. You should see the model listed in the \"Models\" tab.\n5. **Connect LM Studio to RStudio**:\n   - In RStudio, load the `ellmer` package:\n   ```r\n   library(ellmer)\n   ```\n   - Use the `ellmer_connect()` function to connect to LM Studio:\n   ```r\n   ellmer_connect(\"http://localhost:8080\")\n   ```\n6. **Test the Connection**:\n   - You can now test the connection by running a simple command:\n   ```r\n   ellmer_chat(\"Hello, how are you?\")\n   ```\n   - This should return a response from the LLM running in LM Studio.\n\n## References\n\n1.  Giles Dickenson-Jones.(Jan 2025).***From code to conversation: Localized AI fun with LM Studio and the `ellmer` package***.<https://www.r-bloggers.com/2025/01/from-code-to-conversation-localized-ai-fun-with-lm-studio-and-the-ellmer-package/>\n1. The `ellmer` package in R. <https://github.com/tidyverse/ellmer>\n1. \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}