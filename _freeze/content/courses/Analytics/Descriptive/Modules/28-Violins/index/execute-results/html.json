{
  "hash": "abaae387d0386d123afb36f3c8d988dd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: <iconify-icon icon=\"material-symbols:light-group-rounded\" width=\"1.2em\" height=\"1.2em\"></iconify-icon> Groups and Densities\nsubtitle: \"\"\nauthor: \"Arvind V.\"\ndate: 15/Nov/2022\ndate-modified: \"2025-07-29\"\nabstract: \"Quant and Qual Variable Graphs and their Siblings\"\norder: 28\nimage: preview.jpg\nimage-alt: Image by rawpixel.com\ndf-print: paged\ncategories:\n- Qual Variables\n- Quant Variables\n- Box Plots\n- Violin Plots\nbibliography: \n  - references.bib\n  - grateful-refs.bib\ncitation: true\n#suppress-bibliography: true\n# editor: \n#   markdown: \n#     wrap: 72\nwebr:\n  packages: ['readr', 'tidyr', 'dplyr','mosaic', 'skimr', 'ggformula','ggridges', 'palmerpenguins']\n\n---\n:::{.baskerville}\n## {{< fa folder-open >}} Slides and Tutorials\n:::\n|                                                                                                 |                                                                                                    |                                                                                        |\n|------------------------|------------------------|------------------------|\n| <a href=\"./files/distributions.qmd\"><i class=\"fa-brands fa-r-project\"></i> R (Static Viz)</a>   | <a href=\"./files/distributions.rda\"> <i class=\"fa-solid fa-person-rays\"></i> Radiant Tutorial</a>  | <a href=\"../../../../../materials/Data/qdd-data.zip\"> <i class=\"fa-solid fa-database\"></i> Datasets</a> |\n\n\n:::: {.pa4}\n::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}\n[\"Keep away from people who try to belittle your ambitions. Small people always do that, but the really great make you feel that you, too, can become great.\"]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}\n\n[ --- Mark Twain]{.f6 .ttu .tracked .fs-normal}\n:::\n::::\n\n## {{< iconify noto-v1 package >}} Setting up R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyplots) # Easily Produced Publication-Ready Plots\nlibrary(tinyplot) # Plots with Base R\nlibrary(tinytable) # Elegant Tables for our data\nlibrary(mosaic)\nlibrary(skimr)\nlibrary(ggformula)\nlibrary(tidyverse) # Most Important Last\n```\n:::\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n#### Plot Fonts and Theme\n\n\n::: {.cell messages='false'}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(systemfonts)\nlibrary(showtext)\n## Clean the slate\nsystemfonts::clear_local_fonts()\nsystemfonts::clear_registry()\n##\nshowtext_opts(dpi = 96) # set DPI for showtext\nsysfonts::font_add(\n  family = \"Alegreya\",\n  regular = \"../../../../../../fonts/Alegreya-Regular.ttf\",\n  bold = \"../../../../../../fonts/Alegreya-Bold.ttf\",\n  italic = \"../../../../../../fonts/Alegreya-Italic.ttf\",\n  bolditalic = \"../../../../../../fonts/Alegreya-BoldItalic.ttf\"\n)\n\nsysfonts::font_add(\n  family = \"Roboto Condensed\",\n  regular = \"../../../../../../fonts/RobotoCondensed-Regular.ttf\",\n  bold = \"../../../../../../fonts/RobotoCondensed-Bold.ttf\",\n  italic = \"../../../../../../fonts/RobotoCondensed-Italic.ttf\",\n  bolditalic = \"../../../../../../fonts/RobotoCondensed-BoldItalic.ttf\"\n)\nshowtext_auto(enable = TRUE) # enable showtext\n##\ntheme_custom <- function() {\n  font <- \"Alegreya\" # assign font family up front\n\n  theme_classic(base_size = 14, base_family = font) %+replace% # replace elements we want to change\n\n    theme(\n      text = element_text(family = font), # set base font family\n\n      # text elements\n      plot.title = element_text( # title\n        family = font, # set font family\n        size = 24, # set font size\n        face = \"bold\", # bold typeface\n        hjust = 0, # left align\n        margin = margin(t = 5, r = 0, b = 5, l = 0)\n      ), # margin\n      plot.title.position = \"plot\",\n      plot.subtitle = element_text( # subtitle\n        family = font, # font family\n        size = 14, # font size\n        hjust = 0, # left align\n        margin = margin(t = 5, r = 0, b = 10, l = 0)\n      ), # margin\n\n      plot.caption = element_text( # caption\n        family = font, # font family\n        size = 9, # font size\n        hjust = 1\n      ), # right align\n\n      plot.caption.position = \"plot\", # right align\n\n      axis.title = element_text( # axis titles\n        family = \"Roboto Condensed\", # font family\n        size = 12\n      ), # font size\n\n      axis.text = element_text( # axis text\n        family = \"Roboto Condensed\", # font family\n        size = 9\n      ), # font size\n\n      axis.text.x = element_text( # margin for axis text\n        margin = margin(5, b = 10)\n      )\n\n      # since the legend often requires manual tweaking\n      # based on plot content, don't define it here\n    )\n}\n```\n:::\n\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| cache: false\n#| code-fold: true\n## Set the theme\ntheme_set(new = theme_custom())\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in theme_set(new = theme_custom()): could not find function \"theme_set\"\n```\n\n\n:::\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| cache: false\n#| code-fold: true\n## Use available fonts in ggplot text geoms too!\nupdate_geom_defaults(geom = \"text\", new = list(\n  family = \"Roboto Condensed\",\n  face = \"plain\",\n  size = 3.5,\n  color = \"#2b2b2b\"\n))\n```\n````\n\n::: {.cell-output .cell-output-error}\n\n```\nError in update_geom_defaults(geom = \"text\", new = list(family = \"Roboto Condensed\", : could not find function \"update_geom_defaults\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## {{< iconify fxemoji japanesesymbolforbeginner >}} What graphs will we see today?\n\n| Variable #1 | Variable #2 | Chart Names |                    Chart Shape    | \n|:-------------:|:--------------:|:------------------:|:--------------------:|:------:|\n|    Quant    |    (Qual)    |  Violin Plot  | {{< iconify carbon chart-violin-plot size=4x >}} |\n\n\n## {{< iconify tabler variable >}} What kind of Data Variables will we choose?\n\n::: column-page-inset-right\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_8kt63p9ijji08e95r0uw(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_8kt63p9ijji08e95r0uw\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_8kt63p9ijji08e95r0uw');\n        // Find the row with data-row attribute matching i\n        var targetRow = table.querySelector(`tr [data-row=\"${i}\"]`).closest('tr');\n        var newRow = table.insertRow(targetRow.rowIndex);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        newCell.setAttribute(\"data-col\", \"0\");\n        newCell.setAttribute(\"data-row\", i - 1);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_8kt63p9ijji08e95r0uw(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_8kt63p9ijji08e95r0uw\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '1', j: 0 }, { i: '1', j: 1 }, { i: '1', j: 2 }, { i: '1', j: 3 }, { i: '1', j: 4 }, { i: '1', j: 5 },  ], css_id: 'tinytable_css_69rxy33ppam65woesivm',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 }, { i: '0', j: 5 },  ], css_id: 'tinytable_css_9i9nz28mz0by0x5297jb',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_8kt63p9ijji08e95r0uw(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_69rxy33ppam65woesivm, .table th.tinytable_css_69rxy33ppam65woesivm { background-color: #ededed; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_9i9nz28mz0by0x5297jb, .table th.tinytable_css_9i9nz28mz0by0x5297jb { border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-striped\" id=\"tinytable_8kt63p9ijji08e95r0uw\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">No</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">Pronoun</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">Answer</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">Variable/Scale</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">Example</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"5\">What Operations?</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">1</td>\n                  <td data-row=\"1\" data-col=\"1\">How Many / Much / Heavy? Few? Seldom? Often? When?</td>\n                  <td data-row=\"1\" data-col=\"2\">Quantities, with Scale and a Zero Value.Differences and Ratios /Products are meaningful.</td>\n                  <td data-row=\"1\" data-col=\"3\">Quantitative/Ratio</td>\n                  <td data-row=\"1\" data-col=\"4\">Length,Height,Temperature in Kelvin,Activity,Dose Amount,Reaction Rate,Flow Rate,Concentration,Pulse,Survival Rate</td>\n                  <td data-row=\"1\" data-col=\"5\">Correlation</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n:::\n\n\n## {{< iconify icons8 idea >}} Inspiration\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/inspiration-violin-plot-1.png){width=2100}\n:::\n:::\n\n\nWhich is the plots above is more evocative of the underlying data? The violin plots, which looks like a combo box-plot + density, is probably giving us a greater sense of the spread of the data than the good old box plot.\n\n\n## {{< iconify mdi food-processor-outline >}} How do these Chart(s) Work?\n\nOften one needs to view **multiple densities** at the same time. Ridge\nplots of course give us one option, where we get densities of a *Quant*\nvariable split by a *Qual* variable. Another option is to generate a\ndensity plot facetted into *small multiples* using a *Qual* variable.\n\nYet another plot that allows comparison of multiple densities side by\nside is a **violin plot**. The violin plot combines the aspects of a\n*boxplot*(ranking of values, median, quantiles...) with a superimposed\n*density* plot. This allows us to look at medians, means, densities, and\nquantiles of a *Quant* variable with respect to another *Qual* variable.\nLet us see what this looks like!\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Violin Plots for Normal Variables](index_files/figure-html/fig-normal-violins-1.png){#fig-normal-violins width=2100}\n:::\n:::\n\n\n\nIn @fig-normal-violins, the plots show (very artificial!) distributions of a *single Quant variable* across *levels* of another **Qual variable**. At each level of the Qual variable along the X-axis, we have a violin plot showing the density.\n\n## {{< iconify grommet-icons test >}} Case Study-1: `diamonds` dataset\n\n\n::: {.column-page-inset-right}\n\n::: {.panel-tabset .nav-pills style=\"background: whitesmoke;\"}\n\n### Using ggformula\n\n:::: {.columns}\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_violin(price ~ \"All Diamonds\",\n  data = diamonds,\n  draw_quantiles = c(0, .25, .50, .75)\n) %>%\n  gf_labs(title = \"Plot A: Violin plot for Diamond Prices\")\n```\n:::\n\n:::\n\n::: {.column}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=2100}\n:::\n:::\n\n:::\n::::\n\n\n\n:::: {.columns}\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_violin(price ~ cut,\n    draw_quantiles = c(0, .25, .50, .75)\n  ) %>%\n  gf_labs(title = \"Plot B: Price by Cut\")\n```\n:::\n\n\n:::\n\n::: {.column}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=2100}\n:::\n:::\n\n:::\n::::\n\n:::: {.columns}\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_violin(price ~ cut,\n    fill = ~cut,\n    color = ~cut,\n    alpha = 0.5,\n    draw_quantiles = c(0, .25, .50, .75)\n  ) %>%\n  gf_labs(title = \"Plot C: Price by Cut\")\n```\n:::\n\n:::\n::: {.column}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=2100}\n:::\n:::\n\n:::\n::::\n\n:::: {.columns}\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_violin(price ~ cut,\n    fill = ~cut,\n    colour = ~cut,\n    alpha = 0.5,\n    draw_quantiles = c(0, .25, .50, .75)\n  ) %>%\n  gf_facet_wrap(vars(clarity)) %>%\n  gf_labs(title = \"Plot D: Price by Cut facetted by Clarity\") %>%\n  gf_theme(theme(axis.text.x = element_text(angle = 45, hjust = 1)))\n```\n:::\n\n\n:::\n::: {.column}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=2100}\n:::\n:::\n\n\n:::\n\n::::\n\n\n\n### Using ggplot\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\ndiamonds %>% ggplot() +\n  geom_violin(aes(y = price, x = \"\"),\n    draw_quantiles = c(0, .25, .50, .75)\n  ) + # note: y, not x\n  labs(title = \"Plot A: violin for Diamond Prices\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Violin plots with ggplot-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n###\ndiamonds %>% ggplot() +\n  geom_violin(aes(cut, price),\n    draw_quantiles = c(0, .25, .50, .75)\n  ) +\n  labs(title = \"Plot B: Price by Cut\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Violin plots with ggplot-2.png){width=2100}\n:::\n\n```{.r .cell-code}\n###\ndiamonds %>% ggplot() +\n  geom_violin(\n    aes(cut, price,\n      color = cut, fill = cut\n    ),\n    draw_quantiles = c(0, .25, .50, .75),\n    alpha = 0.4\n  ) +\n  labs(title = \"Plot C: Price by Cut\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Violin plots with ggplot-3.png){width=2100}\n:::\n\n```{.r .cell-code}\n###\ndiamonds %>% ggplot() +\n  geom_violin(\n    aes(cut,\n      price,\n      color = cut, fill = cut\n    ),\n    draw_quantiles = c(0, .25, .50, .75),\n    alpha = 0.4\n  ) +\n  facet_wrap(vars(clarity)) +\n  labs(title = \"Plot D: Price by Cut facetted by Clarity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/Violin plots with ggplot-4.png){width=2100}\n:::\n:::\n\n\n\n### {{< iconify noto-v1 spider-web >}} web-r\n\n```{webr-r}\n#| label: Violin plots with ggformula webr\n#| collapse: true\n\ngf_violin(price ~ \"\", data = diamonds, \n          draw_quantiles = c(0,.25,.50,.75)) %>%\n  gf_labs(title = \"Plot A: Violin plot for Diamond Prices\")\n\n```\n\n```{webr-r}\n\ngf_violin(price ~ cut,\n            draw_quantiles = c(0,.25,.50,.75)) %>% \n  gf_labs(title = \"Plot B: Price by Cut\")\n\n```\n\n```{webr-r}\n\ndiamonds %>% \n  gf_violin(price ~ cut, \n             fill = ~ cut, \n             color = ~ cut,\n             alpha = 0.3,\n            draw_quantiles = c(0,.25,.50,.75)) %>% \n  gf_labs(title = \"Plot C: Price by Cut\")\n\n```\n\n```{webr-r}\n\ndiamonds %>% \n  gf_violin(price ~ cut, \n             fill = ~ cut, \n             colour = ~ cut,             \n             alpha = 0.3,draw_quantiles = c(0,.25,.50,.75)) %>% \n  gf_facet_wrap(vars(clarity)) %>%\n  gf_labs(title = \"Plot D: Price by Cut facetted by Clarity\") %>%\n  gf_theme(theme(axis.text.x = element_text(angle = 45,hjust = 1)))\n\n```\n\n```{webr-r}\n#| label: Violin plots with ggplot webr\n#| layout-ncol: 2\n#| collapse: true\n\ndiamonds %>% ggplot() + \n  geom_violin(aes(y = price, x = \"\"),\n              draw_quantiles = c(0,.25,.50,.75)) + # note: y, not x\n  labs(title = \"Plot A: violin for Diamond Prices\")\n\n```\n\n```{webr-r}\n\ndiamonds %>% ggplot() + \n  geom_violin(aes(cut, price),\n              draw_quantiles = c(0,.25,.50,.75)) + \n  labs(title = \"Plot B: Price by Cut\")\n\n```\n\n```{webr-r}\n\ndiamonds %>% ggplot() + \n  geom_violin(aes(cut, price, \n                  color = cut, fill = cut),\n              draw_quantiles = c(0,.25,.50,.75),\n              alpha = 0.4) +\n  labs(title = \"Plot C: Price by Cut\")\n\n```\n\n```{webr-r}\n\ndiamonds %>% ggplot() + \n  geom_violin(aes(cut, \n                   price, \n                   color = cut, fill = cut), \n              draw_quantiles = c(0,.25,.50,.75),\n              alpha = 0.4)  +  \n  facet_wrap(vars(clarity)) +\n  labs(title = \"Plot D: Price by Cut facetted by Clarity\") +\n  theme(axis.text.x = element_text(angle = 45,hjust = 1))\n\n```\n\n:::\n\n::: callout-note\n### Business Insights from `diamond` Violin Plots\n\nThe distribution for price is clearly *long-tailed* (skewed). The\ndistributions also vary considerably based on both `cut` and `clarity`.\nThese *Qual* variables clearly have a large effect on the prices of\nindividual diamonds.\n\n\n:::\n\n:::\n\n\n\n\n## {{< iconify mingcute thought-line >}} Wait, But Why?\n\n- Box plots give us an idea of `medians`, `IQR` ranges, and `outliers`. The shape of the density is not apparent from the box.\n- Densities give us shapes of distributions, but do not provide visual indication of other metrics like `means` or `medians` ( at least not without some effort)\n- Violins help us do both!\n- Violins can also be cut in half (since they are symmetric, like [Buddhist Prayer Wheels](https://youtu.be/vjlBZuwyX7U)), then placed horizontally, and combined with both a `boxplot` and a `dot-plot` to give us `raincloud plots` that look like [this](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/). (Yes, there is code over there, which you can reuse.)\n\n![](../../../../../materials/images/polished-penguins-1.png)\n\n## {{< iconify fluent-mdl2 decision-solid >}} Conclusion\n\n-   Histograms, Frequency Distributions, and Box Plots are used for\n    Quantitative data variables\n-   Histograms \"dwell upon\" **counts**, **ranges**, **means** and\n    **standard deviations**\n-   Frequency Density plots \"dwell upon\" **probabilities** and\n    **densities**\n-   Box Plots \"dwell upon\" **medians** and **Quartiles**\n-   Qualitative data variables can be plotted as **counts**, using Bar\n    Charts, or using Heat Maps\n-   Violin Plots help us to visualize multiple distributions at the same\n    time, as when we split a *Quant* variable wrt to the *levels* of a\n    *Qual* variable.\n-   Ridge Plots are **density plots** used for describing one Quant and\n    one Qual variable (by inherent splitting)\n-   We can split all these plots on the basis of another Qualitative\n    variable.(Ridge Plots are already split)\n-   Long tailed distributions need care in visualization and in\n    inference making!\n\n## {{< iconify openmoji person >}} Your Turn\n\n::: callout-note\n### Datasets\n<a href=\"../../../../../materials/Data/qdd-data.zip\">\n<i class=\"fa-solid fa-database\"></i> Datasets</a>\n\n1.  Click on the Dataset Icon above, and unzip that archive. Try to make\n    distribution plots with each of the three tools.\n:::\n\n::: callout-note\n### CalmCode\n2.  A dataset from calmcode.io <https://calmcode.io/datasets.html>\n:::\n\n:::callout-note\n### From [Groups](../24-BoxPlots/index.qmd#your-turn)\n3.  Datasets from the earlier module on [Groups](../24-BoxPlots/index.qmd#your-turn).\n:::\n\n`inspect` the dataset in each case and develop a set of Questions, that\ncan be answered by appropriate stat measures, or by using a chart to\nshow the distribution.\n\n\n## {{< iconify ooui references-rtl >}} References\n\n1. Winston Chang (2024). *R Graphics Cookbook*. <https://r-graphics.org>\n1. See the scrolly animation for a histogram at this website: *Exploring Histograms, an essay by Aran Lunzer and Amelia McNamara*\n<https://tinlizzie.org/histograms/?s=09>\\\n1. Minimal R using\n`mosaic`.<https://cran.r-project.org/web/packages/mosaic/vignettes/MinimalRgg.pdf>\\\n1. Sebastian Sauer, *Plotting multiple plots using purrr::map and ggplot* [](https://data-se.netlify.app/2021/02/06/plotting-multiple-plots-using-purrr-map-and-ggplot/)\\\n\n::: {#refs style=\"font-size: 60%;\"}\n###### {{< iconify lucide package-check >}} R Package Citations\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nPackage          Version   Citation        \n---------------  --------  ----------------\nggnormalviolin   0.2.1     @ggnormalviolin \nggridges         0.5.6     @ggridges       \nNHANES           2.1.0     @NHANES         \nTeachHist        0.2.1     @TeachHist      \nTeachingDemos    2.13      @TeachingDemos  \ntidyplots        0.3.1     @tidyplots      \ntinyplot         0.4.1     @tinyplot       \ntinytable        0.10.0    @tinytable      \nvisualize        4.5.0     @visualize      \n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}