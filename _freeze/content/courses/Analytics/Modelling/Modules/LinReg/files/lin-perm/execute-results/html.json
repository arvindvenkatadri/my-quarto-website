{
  "hash": "622c2ff166a3ac97be92753347150a44",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Permutation Tests for Linear Regression\"\nauthor: \"Arvind Venkatadri\"\ndate: 03/May/2023\ndate-modified: \"2025-07-17\"\ncategories: \n  - Linear Regression\n  - Quantitative Predictor\n  - Quantitative Response\n  - Sum of Squares\n  - Residuals\n  - Permutation\nabstract: \"Using a Permutation Test to check our Regression Model\"\nfilters:\n  - nutshell\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)\nlibrary(tidyverse)\nlibrary(ggformula)\nlibrary(mosaic)\nlibrary(infer)\n```\n:::\n\n\n\n## Linear Regression using Permutation Tests\n\nWe wish to establish the significance of the effect size due to each of\nthe levels in `TempFac`. From the normality tests conducted earlier we\nsee that except at one level of `TempFac`, the times are are not\nnormally distributed. Hence we opt for a Permutation Test to check for\nsignificance of effect.\n\nAs remarked in Ernst[^2], the non-parametric permutation test can be\nboth *exact* and also **intuitively easier** for students to grasp.\nPermutations are easily executed in R, using packages such as\n`mosaic`[^3].\n\nWe proceed with a Permutation Test for `TempFac`. We shuffle the levels\n(13, 18, 25) randomly between the Times and repeat the ANOVA test each\ntime and calculate the F-statistic. The Null distribution is the\ndistribution of the F-statistic over the many permutations and the\np-value is given by the proportion of times the F-statistic equals or\nexceeds that observed.\n\n### Read the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"BostonHousing2\", package = \"mlbench\")\nhousing <- BostonHousing2\ninspect(housing)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n  name  class levels   n missing                                  distribution\n1 town factor     92 506       0 Cambridge (5.9%) ...                         \n2 chas factor      2 506       0 0 (93.1%), 1 (6.9%)                          \n\nquantitative variables:  \n      name   class       min          Q1     median          Q3       max\n1    tract integer   1.00000 1303.250000 3393.50000 3739.750000 5082.0000\n2      lon numeric -71.28950  -71.093225  -71.05290  -71.019625  -70.8100\n3      lat numeric  42.03000   42.180775   42.21810   42.252250   42.3810\n4     medv numeric   5.00000   17.025000   21.20000   25.000000   50.0000\n5    cmedv numeric   5.00000   17.025000   21.20000   25.000000   50.0000\n6     crim numeric   0.00632    0.082045    0.25651    3.677083   88.9762\n7       zn numeric   0.00000    0.000000    0.00000   12.500000  100.0000\n8    indus numeric   0.46000    5.190000    9.69000   18.100000   27.7400\n9      nox numeric   0.38500    0.449000    0.53800    0.624000    0.8710\n10      rm numeric   3.56100    5.885500    6.20850    6.623500    8.7800\n11     age numeric   2.90000   45.025000   77.50000   94.075000  100.0000\n12     dis numeric   1.12960    2.100175    3.20745    5.188425   12.1265\n13     rad integer   1.00000    4.000000    5.00000   24.000000   24.0000\n14     tax integer 187.00000  279.000000  330.00000  666.000000  711.0000\n15 ptratio numeric  12.60000   17.400000   19.05000   20.200000   22.0000\n16       b numeric   0.32000  375.377500  391.44000  396.225000  396.9000\n17   lstat numeric   1.73000    6.950000   11.36000   16.955000   37.9700\n           mean           sd   n missing\n1  2700.3557312 1.380037e+03 506       0\n2   -71.0563887 7.540535e-02 506       0\n3    42.2164403 6.177718e-02 506       0\n4    22.5328063 9.197104e+00 506       0\n5    22.5288538 9.182176e+00 506       0\n6     3.6135236 8.601545e+00 506       0\n7    11.3636364 2.332245e+01 506       0\n8    11.1367787 6.860353e+00 506       0\n9     0.5546951 1.158777e-01 506       0\n10    6.2846344 7.026171e-01 506       0\n11   68.5749012 2.814886e+01 506       0\n12    3.7950427 2.105710e+00 506       0\n13    9.5494071 8.707259e+00 506       0\n14  408.2371542 1.685371e+02 506       0\n15   18.4555336 2.164946e+00 506       0\n16  356.6740316 9.129486e+01 506       0\n17   12.6530632 7.141062e+00 506       0\n```\n\n\n:::\n:::\n\n\n\nWe will use `mosaic` and also try with `infer`.\n\n::: panel-tabset\n#### Using `mosaic`\n\n`mosaic` offers an easy and intuitive way of doing a repeated\npermutation test, using the `do()` command. We will `shuffle` the\n`TempFac` factor to jumble up the `Time` observations, 10000 times. Each\ntime we shuffle, we compute the F_statistic and record it. We then plot\nthe 10000 F-statistics and compare that with the real-world observation\nof `F-stat`.\n\n\n\nThe Null distribution of the F_statistic under permutation shows it\nnever crosses the real-world observed value, testifying the strength of\nthe effect of `TempFac` on hatching `Time`. And the p-value is:\n\n\n\n#### Using `infer`\n\nWe calculate the observed F-stat with `infer`, which also has a very\ndirect, if verbose, syntax for doing permutation tests:\n\n\n\nWe see that the observed F-Statistic is of course $385.8966$ as before.\nNow we use `infer` to generate a NULL distribution using permutation of\nthe factor `TempFac`:\n\n\n\nAs seen, the `infer` based permutation test also shows that the\npermutationally generated F-statistics are nowhere near that which was\nobserved. The effect of `TempFac` is very strong.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}