{
  "hash": "2cfe5a6df01ff9ce1a258edb61c89de6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A Tidygraph version of a Popular Network Science Tutorial\nauthor: Arvind Venkatadri\ndate: '2021-06-16'\ndate-modified: \"'r Sys.Date()'\"\nslug: a-tidygraph-version-of-a-popular-network-science-tutorial\ncategories: [R; Networks]\ntags: [tidygraph; ggraph;]\nsubtitle: ''\nsummary: 'A reworking of a Network Science tutorial by Prof. Katherine Ognyanova, using tidygraph'\ndraft: false\n---\n\n## Introduction\n\nThis is an attempt to rework , using `tidygraph` and `ggraph`, much of\n[**Network Visualization with R**](https://www.kateto.net/polnet2018)\nPolnet 2018 Workshop Tutorial, Washington, DC by Prof. Katherine (Katya)\nOgnyanova.\n\nThe aim is to get a working acquaintance with both these packages and\nalso to appreciate some of the concepts in Networks. My code is by no\nmeans intended to be elegant; it merely works and there are surely many\nimprovements that people may think of!\n\nI have attempted to write code for the Sections 2:5. I have retained\nProf. Ognyanova's text in all places.\n\n## CONTENTS\n\n1.  ~~Working with colors in R plots~~\n2.  Reading in the network data\n3.  Network plots in 'igraph'\n4.  Plotting two-mode networks\n5.  Plotting multiplex networks\n6.  ~~Quick example using 'network'~~\n7.  ~~Simple plot animations in R~~\n8.  ~~Interactive JavaScript networks~~\n9.  ~~Interactive and dynamic networks with ndtv-d3~~\n10. ~~Plotting networks on a geographic map~~\n\n\n\n## -------\\~\\~ DATASET 1: edgelist \\~\\~-------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the data:\nnodes <- read.csv(\"./Dataset1-Media-Example-NODES.csv\", header = T, as.is = T)\nlinks <- read.csv(\"./Dataset1-Media-Example-EDGES.csv\", header = T, as.is = T)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine the data:\nhead(nodes)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media.type\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type.label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"audience.size\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"NY Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"1\"},{\"1\":\"s02\",\"2\":\"Washington Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"25\",\"_rn_\":\"2\"},{\"1\":\"s03\",\"2\":\"Wall Street Journal\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"30\",\"_rn_\":\"3\"},{\"1\":\"s04\",\"2\":\"USA Today\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"32\",\"_rn_\":\"4\"},{\"1\":\"s05\",\"2\":\"LA Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"5\"},{\"1\":\"s06\",\"2\":\"New York Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"50\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(links)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"from\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"weight\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"s02\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"1\"},{\"1\":\"s01\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"2\"},{\"1\":\"s01\",\"2\":\"s04\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"3\"},{\"1\":\"s01\",\"2\":\"s15\",\"3\":\"mention\",\"4\":\"20\",\"_rn_\":\"4\"},{\"1\":\"s02\",\"2\":\"s01\",\"3\":\"hyperlink\",\"4\":\"23\",\"_rn_\":\"5\"},{\"1\":\"s02\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Converting the data to an igraph object:\n\nThe `graph_from_data_frame()` function takes two data frames: 'd' and\n'vertices'. - 'd' describes the edges of the network - it should start\nwith two columns containing the source and target node IDs for each\nnetwork tie. - 'vertices' should start with a column of node IDs. It can\nbe omitted. - Any additional columns in either data frame are\ninterpreted as attributes.\n\nNOTE: ID columns need not be numbers or integers!!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet <- graph_from_data_frame(d = links, vertices = nodes, directed = T)\n\n# Examine the resulting object:\nclass(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"igraph\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnet\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 08de822 DNW- 17 49 -- \n+ attr: name (v/c), media (v/c), media.type (v/n), type.label (v/c),\n| audience.size (v/n), type (e/c), weight (e/n)\n+ edges from 08de822 (vertex names):\n [1] s01->s02 s01->s03 s01->s04 s01->s15 s02->s01 s02->s03 s02->s09 s02->s10\n [9] s03->s01 s03->s04 s03->s05 s03->s08 s03->s10 s03->s11 s03->s12 s04->s03\n[17] s04->s06 s04->s11 s04->s12 s04->s17 s05->s01 s05->s02 s05->s09 s05->s15\n[25] s06->s06 s06->s16 s06->s17 s07->s03 s07->s08 s07->s10 s07->s14 s08->s03\n[33] s08->s07 s08->s09 s09->s10 s10->s03 s12->s06 s12->s13 s12->s14 s13->s12\n[41] s13->s17 s14->s11 s14->s13 s15->s01 s15->s04 s15->s06 s16->s06 s16->s17\n[49] s17->s04\n```\n\n\n:::\n:::\n\n\nThe description of an `igraph` object starts with four letters:\\\n- D or U, for a directed or undirected graph - N for a named graph\n(where nodes have a `name` attribute) - W for a weighted graph (where\nedges have a `weight` attribute) -B for a bipartite (two-mode) graph\n(where nodes have a `type` attribute) The two numbers that follow (17\n49) refer to the **number of nodes** and **edges** in the graph. The\ndescription also lists node & edge attributes.\n\nWe can access the nodes, edges, and their attributes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 49/49 edges from 08de822 (vertex names):\n [1] s01->s02 s01->s03 s01->s04 s01->s15 s02->s01 s02->s03 s02->s09 s02->s10\n [9] s03->s01 s03->s04 s03->s05 s03->s08 s03->s10 s03->s11 s03->s12 s04->s03\n[17] s04->s06 s04->s11 s04->s12 s04->s17 s05->s01 s05->s02 s05->s09 s05->s15\n[25] s06->s06 s06->s16 s06->s17 s07->s03 s07->s08 s07->s10 s07->s14 s08->s03\n[33] s08->s07 s08->s09 s09->s10 s10->s03 s12->s06 s12->s13 s12->s14 s13->s12\n[41] s13->s17 s14->s11 s14->s13 s15->s01 s15->s04 s15->s06 s16->s06 s16->s17\n[49] s17->s04\n```\n\n\n:::\n\n```{.r .cell-code}\nV(net)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 17/17 vertices, named, from 08de822:\n [1] s01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12 s13 s14 s15 s16 s17\n```\n\n\n:::\n\n```{.r .cell-code}\nE(net)$type\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"   \"hyperlink\" \"hyperlink\"\n [7] \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\"\n[13] \"mention\"   \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"   \"mention\"  \n[19] \"hyperlink\" \"mention\"   \"mention\"   \"hyperlink\" \"hyperlink\" \"mention\"  \n[25] \"hyperlink\" \"hyperlink\" \"mention\"   \"mention\"   \"mention\"   \"hyperlink\"\n[31] \"mention\"   \"hyperlink\" \"mention\"   \"mention\"   \"mention\"   \"hyperlink\"\n[37] \"mention\"   \"hyperlink\" \"mention\"   \"hyperlink\" \"mention\"   \"mention\"  \n[43] \"mention\"   \"hyperlink\" \"hyperlink\" \"hyperlink\" \"hyperlink\" \"mention\"  \n[49] \"hyperlink\"\n```\n\n\n:::\n\n```{.r .cell-code}\nV(net)$media\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"NY Times\"            \"Washington Post\"     \"Wall Street Journal\"\n [4] \"USA Today\"           \"LA Times\"            \"New York Post\"      \n [7] \"CNN\"                 \"MSNBC\"               \"FOX News\"           \n[10] \"ABC\"                 \"BBC\"                 \"Yahoo News\"         \n[13] \"Google News\"         \"Reuters.com\"         \"NYTimes.com\"        \n[16] \"WashingtonPost.com\"  \"AOL.com\"            \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(edges) %>%\n  select(type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 49 × 3 (active)\n    from    to type     \n   <int> <int> <chr>    \n 1     1     2 hyperlink\n 2     1     3 hyperlink\n 3     1     4 hyperlink\n 4     1    15 mention  \n 5     2     1 hyperlink\n 6     2     3 hyperlink\n 7     2     9 hyperlink\n 8     2    10 hyperlink\n 9     3     1 hyperlink\n10     3     4 hyperlink\n# ℹ 39 more rows\n#\n# Node Data: 17 × 5\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n# ℹ 14 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  select(media)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 1 (active)\n   media              \n   <chr>              \n 1 NY Times           \n 2 Washington Post    \n 3 Wall Street Journal\n 4 USA Today          \n 5 LA Times           \n 6 New York Post      \n 7 CNN                \n 8 MSNBC              \n 9 FOX News           \n10 ABC                \n11 BBC                \n12 Yahoo News         \n13 Google News        \n14 Reuters.com        \n15 NYTimes.com        \n16 WashingtonPost.com \n17 AOL.com            \n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# ℹ 46 more rows\n```\n\n\n:::\n:::\n\n\nOr find specific nodes and edges by attribute:(that returns objects of\ntype vertex sequence / edge sequence)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(net)[media == \"BBC\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 1/17 vertex, named, from 08de822:\n[1] s11\n```\n\n\n:::\n\n```{.r .cell-code}\nE(net)[type == \"mention\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n+ 20/49 edges from 08de822 (vertex names):\n [1] s01->s15 s03->s10 s04->s06 s04->s11 s04->s17 s05->s01 s05->s15 s06->s17\n [9] s07->s03 s07->s08 s07->s14 s08->s07 s08->s09 s09->s10 s12->s06 s12->s14\n[17] s13->s17 s14->s11 s14->s13 s16->s17\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  filter(media == \"BBC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 1 nodes and 0 edges\n#\n# A rooted tree\n#\n# Node Data: 1 × 5 (active)\n  id    media media.type type.label audience.size\n  <chr> <chr>      <int> <chr>              <int>\n1 s11   BBC            2 TV                    34\n#\n# Edge Data: 0 × 4\n# ℹ 4 variables: from <int>, to <int>, type <chr>, weight <int>\n```\n\n\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(edges) %>%\n  filter(type == \"mention\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 20 edges\n#\n# A directed simple graph with 3 components\n#\n# Edge Data: 20 × 4 (active)\n    from    to type    weight\n   <int> <int> <chr>    <int>\n 1     1    15 mention     20\n 2     3    10 mention      2\n 3     4     6 mention      1\n 4     4    11 mention     22\n 5     4    17 mention      2\n 6     5     1 mention      1\n 7     5    15 mention     21\n 8     6    17 mention     21\n 9     7     3 mention      1\n10     7     8 mention     22\n11     7    14 mention      4\n12     8     7 mention     21\n13     8     9 mention     23\n14     9    10 mention     21\n15    12     6 mention      2\n16    12    14 mention     22\n17    13    17 mention      1\n18    14    11 mention      1\n19    14    13 mention     21\n20    16    17 mention     21\n#\n# Node Data: 17 × 5\n  id    media               media.type type.label audience.size\n  <chr> <chr>                    <int> <chr>              <int>\n1 s01   NY Times                     1 Newspaper             20\n2 s02   Washington Post              1 Newspaper             25\n3 s03   Wall Street Journal          1 Newspaper             30\n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\nIf you need them, you can extract an edge list or a matrix back from the\nigraph networks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas_edgelist(net, names = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1]  [,2] \n [1,] \"s01\" \"s02\"\n [2,] \"s01\" \"s03\"\n [3,] \"s01\" \"s04\"\n [4,] \"s01\" \"s15\"\n [5,] \"s02\" \"s01\"\n [6,] \"s02\" \"s03\"\n [7,] \"s02\" \"s09\"\n [8,] \"s02\" \"s10\"\n [9,] \"s03\" \"s01\"\n[10,] \"s03\" \"s04\"\n[11,] \"s03\" \"s05\"\n[12,] \"s03\" \"s08\"\n[13,] \"s03\" \"s10\"\n[14,] \"s03\" \"s11\"\n[15,] \"s03\" \"s12\"\n[16,] \"s04\" \"s03\"\n[17,] \"s04\" \"s06\"\n[18,] \"s04\" \"s11\"\n[19,] \"s04\" \"s12\"\n[20,] \"s04\" \"s17\"\n[21,] \"s05\" \"s01\"\n[22,] \"s05\" \"s02\"\n[23,] \"s05\" \"s09\"\n[24,] \"s05\" \"s15\"\n[25,] \"s06\" \"s06\"\n[26,] \"s06\" \"s16\"\n[27,] \"s06\" \"s17\"\n[28,] \"s07\" \"s03\"\n[29,] \"s07\" \"s08\"\n[30,] \"s07\" \"s10\"\n[31,] \"s07\" \"s14\"\n[32,] \"s08\" \"s03\"\n[33,] \"s08\" \"s07\"\n[34,] \"s08\" \"s09\"\n[35,] \"s09\" \"s10\"\n[36,] \"s10\" \"s03\"\n[37,] \"s12\" \"s06\"\n[38,] \"s12\" \"s13\"\n[39,] \"s12\" \"s14\"\n[40,] \"s13\" \"s12\"\n[41,] \"s13\" \"s17\"\n[42,] \"s14\" \"s11\"\n[43,] \"s14\" \"s13\"\n[44,] \"s15\" \"s01\"\n[45,] \"s15\" \"s04\"\n[46,] \"s15\" \"s06\"\n[47,] \"s16\" \"s06\"\n[48,] \"s16\" \"s17\"\n[49,] \"s17\" \"s04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nas_adjacency_matrix(net, attr = \"weight\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n17 x 17 sparse Matrix of class \"dgCMatrix\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                     \ns01  . 22 22 21 .  .  .  .  .  .  .  .  .  . 20  .  .\ns02 23  . 21  . .  .  .  .  1  5  .  .  .  .  .  .  .\ns03 21  .  . 22 1  .  .  4  .  2  1  1  .  .  .  .  .\ns04  .  . 23  . .  1  .  .  .  . 22  3  .  .  .  .  2\ns05  1 21  .  . .  .  .  .  2  .  .  .  .  . 21  .  .\ns06  .  .  .  . .  1  .  .  .  .  .  .  .  .  . 21 21\ns07  .  .  1  . .  .  . 22  . 21  .  .  .  4  .  .  .\ns08  .  .  2  . .  . 21  . 23  .  .  .  .  .  .  .  .\ns09  .  .  .  . .  .  .  .  . 21  .  .  .  .  .  .  .\ns10  .  .  2  . .  .  .  .  .  .  .  .  .  .  .  .  .\ns11  .  .  .  . .  .  .  .  .  .  .  .  .  .  .  .  .\ns12  .  .  .  . .  2  .  .  .  .  .  . 22 22  .  .  .\ns13  .  .  .  . .  .  .  .  .  .  . 21  .  .  .  .  1\ns14  .  .  .  . .  .  .  .  .  .  1  . 21  .  .  .  .\ns15 22  .  .  1 .  4  .  .  .  .  .  .  .  .  .  .  .\ns16  .  .  .  . . 23  .  .  .  .  .  .  .  .  .  . 21\ns17  .  .  .  4 .  .  .  .  .  .  .  .  .  .  .  .  .\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# No direct command seems available ...\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Or data frames describing nodes and edges:\nigraph::as_data_frame(x = net, what = \"edges\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"from\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"weight\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"s02\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"1\"},{\"1\":\"s01\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"2\"},{\"1\":\"s01\",\"2\":\"s04\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"3\"},{\"1\":\"s01\",\"2\":\"s15\",\"3\":\"mention\",\"4\":\"20\",\"_rn_\":\"4\"},{\"1\":\"s02\",\"2\":\"s01\",\"3\":\"hyperlink\",\"4\":\"23\",\"_rn_\":\"5\"},{\"1\":\"s02\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"6\"},{\"1\":\"s02\",\"2\":\"s09\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"7\"},{\"1\":\"s02\",\"2\":\"s10\",\"3\":\"hyperlink\",\"4\":\"5\",\"_rn_\":\"8\"},{\"1\":\"s03\",\"2\":\"s01\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"9\"},{\"1\":\"s03\",\"2\":\"s04\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"10\"},{\"1\":\"s03\",\"2\":\"s05\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"11\"},{\"1\":\"s03\",\"2\":\"s08\",\"3\":\"hyperlink\",\"4\":\"4\",\"_rn_\":\"12\"},{\"1\":\"s03\",\"2\":\"s10\",\"3\":\"mention\",\"4\":\"2\",\"_rn_\":\"13\"},{\"1\":\"s03\",\"2\":\"s11\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"14\"},{\"1\":\"s03\",\"2\":\"s12\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"15\"},{\"1\":\"s04\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"23\",\"_rn_\":\"16\"},{\"1\":\"s04\",\"2\":\"s06\",\"3\":\"mention\",\"4\":\"1\",\"_rn_\":\"17\"},{\"1\":\"s04\",\"2\":\"s11\",\"3\":\"mention\",\"4\":\"22\",\"_rn_\":\"18\"},{\"1\":\"s04\",\"2\":\"s12\",\"3\":\"hyperlink\",\"4\":\"3\",\"_rn_\":\"19\"},{\"1\":\"s04\",\"2\":\"s17\",\"3\":\"mention\",\"4\":\"2\",\"_rn_\":\"20\"},{\"1\":\"s05\",\"2\":\"s01\",\"3\":\"mention\",\"4\":\"1\",\"_rn_\":\"21\"},{\"1\":\"s05\",\"2\":\"s02\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"22\"},{\"1\":\"s05\",\"2\":\"s09\",\"3\":\"hyperlink\",\"4\":\"2\",\"_rn_\":\"23\"},{\"1\":\"s05\",\"2\":\"s15\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"24\"},{\"1\":\"s06\",\"2\":\"s06\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"25\"},{\"1\":\"s06\",\"2\":\"s16\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"26\"},{\"1\":\"s06\",\"2\":\"s17\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"27\"},{\"1\":\"s07\",\"2\":\"s03\",\"3\":\"mention\",\"4\":\"1\",\"_rn_\":\"28\"},{\"1\":\"s07\",\"2\":\"s08\",\"3\":\"mention\",\"4\":\"22\",\"_rn_\":\"29\"},{\"1\":\"s07\",\"2\":\"s10\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"30\"},{\"1\":\"s07\",\"2\":\"s14\",\"3\":\"mention\",\"4\":\"4\",\"_rn_\":\"31\"},{\"1\":\"s08\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"2\",\"_rn_\":\"32\"},{\"1\":\"s08\",\"2\":\"s07\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"33\"},{\"1\":\"s08\",\"2\":\"s09\",\"3\":\"mention\",\"4\":\"23\",\"_rn_\":\"34\"},{\"1\":\"s09\",\"2\":\"s10\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"35\"},{\"1\":\"s10\",\"2\":\"s03\",\"3\":\"hyperlink\",\"4\":\"2\",\"_rn_\":\"36\"},{\"1\":\"s12\",\"2\":\"s06\",\"3\":\"mention\",\"4\":\"2\",\"_rn_\":\"37\"},{\"1\":\"s12\",\"2\":\"s13\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"38\"},{\"1\":\"s12\",\"2\":\"s14\",\"3\":\"mention\",\"4\":\"22\",\"_rn_\":\"39\"},{\"1\":\"s13\",\"2\":\"s12\",\"3\":\"hyperlink\",\"4\":\"21\",\"_rn_\":\"40\"},{\"1\":\"s13\",\"2\":\"s17\",\"3\":\"mention\",\"4\":\"1\",\"_rn_\":\"41\"},{\"1\":\"s14\",\"2\":\"s11\",\"3\":\"mention\",\"4\":\"1\",\"_rn_\":\"42\"},{\"1\":\"s14\",\"2\":\"s13\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"43\"},{\"1\":\"s15\",\"2\":\"s01\",\"3\":\"hyperlink\",\"4\":\"22\",\"_rn_\":\"44\"},{\"1\":\"s15\",\"2\":\"s04\",\"3\":\"hyperlink\",\"4\":\"1\",\"_rn_\":\"45\"},{\"1\":\"s15\",\"2\":\"s06\",\"3\":\"hyperlink\",\"4\":\"4\",\"_rn_\":\"46\"},{\"1\":\"s16\",\"2\":\"s06\",\"3\":\"hyperlink\",\"4\":\"23\",\"_rn_\":\"47\"},{\"1\":\"s16\",\"2\":\"s17\",\"3\":\"mention\",\"4\":\"21\",\"_rn_\":\"48\"},{\"1\":\"s17\",\"2\":\"s04\",\"3\":\"hyperlink\",\"4\":\"4\",\"_rn_\":\"49\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nigraph::as_data_frame(x = net, what = \"vertices\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media.type\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type.label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"audience.size\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"NY Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"s01\"},{\"1\":\"s02\",\"2\":\"Washington Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"25\",\"_rn_\":\"s02\"},{\"1\":\"s03\",\"2\":\"Wall Street Journal\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"30\",\"_rn_\":\"s03\"},{\"1\":\"s04\",\"2\":\"USA Today\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"32\",\"_rn_\":\"s04\"},{\"1\":\"s05\",\"2\":\"LA Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"s05\"},{\"1\":\"s06\",\"2\":\"New York Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"50\",\"_rn_\":\"s06\"},{\"1\":\"s07\",\"2\":\"CNN\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"56\",\"_rn_\":\"s07\"},{\"1\":\"s08\",\"2\":\"MSNBC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"34\",\"_rn_\":\"s08\"},{\"1\":\"s09\",\"2\":\"FOX News\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"60\",\"_rn_\":\"s09\"},{\"1\":\"s10\",\"2\":\"ABC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"23\",\"_rn_\":\"s10\"},{\"1\":\"s11\",\"2\":\"BBC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"34\",\"_rn_\":\"s11\"},{\"1\":\"s12\",\"2\":\"Yahoo News\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"33\",\"_rn_\":\"s12\"},{\"1\":\"s13\",\"2\":\"Google News\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"23\",\"_rn_\":\"s13\"},{\"1\":\"s14\",\"2\":\"Reuters.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"12\",\"_rn_\":\"s14\"},{\"1\":\"s15\",\"2\":\"NYTimes.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"24\",\"_rn_\":\"s15\"},{\"1\":\"s16\",\"2\":\"WashingtonPost.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"28\",\"_rn_\":\"s16\"},{\"1\":\"s17\",\"2\":\"AOL.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"33\",\"_rn_\":\"s17\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  as_tibble()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media.type\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type.label\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"audience.size\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"NY Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\"},{\"1\":\"s02\",\"2\":\"Washington Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"25\"},{\"1\":\"s03\",\"2\":\"Wall Street Journal\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"30\"},{\"1\":\"s04\",\"2\":\"USA Today\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"32\"},{\"1\":\"s05\",\"2\":\"LA Times\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\"},{\"1\":\"s06\",\"2\":\"New York Post\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"50\"},{\"1\":\"s07\",\"2\":\"CNN\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"56\"},{\"1\":\"s08\",\"2\":\"MSNBC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"34\"},{\"1\":\"s09\",\"2\":\"FOX News\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"60\"},{\"1\":\"s10\",\"2\":\"ABC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"23\"},{\"1\":\"s11\",\"2\":\"BBC\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"34\"},{\"1\":\"s12\",\"2\":\"Yahoo News\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"33\"},{\"1\":\"s13\",\"2\":\"Google News\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"23\"},{\"1\":\"s14\",\"2\":\"Reuters.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"12\"},{\"1\":\"s15\",\"2\":\"NYTimes.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"24\"},{\"1\":\"s16\",\"2\":\"WashingtonPost.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"28\"},{\"1\":\"s17\",\"2\":\"AOL.com\",\"3\":\"3\",\"4\":\"Online\",\"5\":\"33\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(edges) %>%\n  as_tibble()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"from\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"type\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"weight\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"2\",\"3\":\"hyperlink\",\"4\":\"22\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"hyperlink\",\"4\":\"22\"},{\"1\":\"1\",\"2\":\"4\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"1\",\"2\":\"15\",\"3\":\"mention\",\"4\":\"20\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"hyperlink\",\"4\":\"23\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"2\",\"2\":\"9\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"2\",\"2\":\"10\",\"3\":\"hyperlink\",\"4\":\"5\"},{\"1\":\"3\",\"2\":\"1\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"3\",\"2\":\"4\",\"3\":\"hyperlink\",\"4\":\"22\"},{\"1\":\"3\",\"2\":\"5\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"3\",\"2\":\"8\",\"3\":\"hyperlink\",\"4\":\"4\"},{\"1\":\"3\",\"2\":\"10\",\"3\":\"mention\",\"4\":\"2\"},{\"1\":\"3\",\"2\":\"11\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"3\",\"2\":\"12\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"4\",\"2\":\"3\",\"3\":\"hyperlink\",\"4\":\"23\"},{\"1\":\"4\",\"2\":\"6\",\"3\":\"mention\",\"4\":\"1\"},{\"1\":\"4\",\"2\":\"11\",\"3\":\"mention\",\"4\":\"22\"},{\"1\":\"4\",\"2\":\"12\",\"3\":\"hyperlink\",\"4\":\"3\"},{\"1\":\"4\",\"2\":\"17\",\"3\":\"mention\",\"4\":\"2\"},{\"1\":\"5\",\"2\":\"1\",\"3\":\"mention\",\"4\":\"1\"},{\"1\":\"5\",\"2\":\"2\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"5\",\"2\":\"9\",\"3\":\"hyperlink\",\"4\":\"2\"},{\"1\":\"5\",\"2\":\"15\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"6\",\"2\":\"6\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"6\",\"2\":\"16\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"6\",\"2\":\"17\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"7\",\"2\":\"3\",\"3\":\"mention\",\"4\":\"1\"},{\"1\":\"7\",\"2\":\"8\",\"3\":\"mention\",\"4\":\"22\"},{\"1\":\"7\",\"2\":\"10\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"7\",\"2\":\"14\",\"3\":\"mention\",\"4\":\"4\"},{\"1\":\"8\",\"2\":\"3\",\"3\":\"hyperlink\",\"4\":\"2\"},{\"1\":\"8\",\"2\":\"7\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"8\",\"2\":\"9\",\"3\":\"mention\",\"4\":\"23\"},{\"1\":\"9\",\"2\":\"10\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"10\",\"2\":\"3\",\"3\":\"hyperlink\",\"4\":\"2\"},{\"1\":\"12\",\"2\":\"6\",\"3\":\"mention\",\"4\":\"2\"},{\"1\":\"12\",\"2\":\"13\",\"3\":\"hyperlink\",\"4\":\"22\"},{\"1\":\"12\",\"2\":\"14\",\"3\":\"mention\",\"4\":\"22\"},{\"1\":\"13\",\"2\":\"12\",\"3\":\"hyperlink\",\"4\":\"21\"},{\"1\":\"13\",\"2\":\"17\",\"3\":\"mention\",\"4\":\"1\"},{\"1\":\"14\",\"2\":\"11\",\"3\":\"mention\",\"4\":\"1\"},{\"1\":\"14\",\"2\":\"13\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"15\",\"2\":\"1\",\"3\":\"hyperlink\",\"4\":\"22\"},{\"1\":\"15\",\"2\":\"4\",\"3\":\"hyperlink\",\"4\":\"1\"},{\"1\":\"15\",\"2\":\"6\",\"3\":\"hyperlink\",\"4\":\"4\"},{\"1\":\"16\",\"2\":\"6\",\"3\":\"hyperlink\",\"4\":\"23\"},{\"1\":\"16\",\"2\":\"17\",\"3\":\"mention\",\"4\":\"21\"},{\"1\":\"17\",\"2\":\"4\",\"3\":\"hyperlink\",\"4\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You can also access the network matrix directly:\nnet[1, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ns01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12 s13 s14 s15 s16 s17 \n  0  22  22  21   0   0   0   0   0   0   0   0   0   0  20   0   0 \n```\n\n\n:::\n\n```{.r .cell-code}\nnet[5, 7]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# Does not seem possible, even with `as.matrix()`.\n# Returns tibbles only as in the code chunk above\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First attempt to plot the graph:\nplot(net) # not pretty!\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Removing loops from the graph:\nnet <-\n  igraph::simplify(net, remove.multiple = F, remove.loops = T)\n\n# Let's and reduce the arrow size and remove the labels:\nplot(net, edge.arrow.size = .4, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-2.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\ntbl_graph(nodes, links, directed = TRUE) %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(0.2, \"cm\"),\n    start_cap = circle(0.2, \"cm\"),\n    # clears an area near the node\n\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(size = 8, shape = 21, fill = \"orange\") +\n  geom_node_text(aes(label = id), size = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Removing loops from the graph:\n# From the docs:\n# convert() is a shorthand for performing both `morph` and `crystallise` along with extracting a single tbl_graph (defaults to the first). For morphs w(h)ere you know they only create a single graph, and you want to keep it, this is an easy way.\n#\ntbl_graph(nodes, links, directed = TRUE) %>%\n  convert(to_simple) %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(0.2, \"cm\"),\n    start_cap = circle(0.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(size = 6, shape = 21, fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=2100}\n:::\n:::\n\n\n\n## -------\\~\\~ DATASET 2: matrix --------\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the data:\nnodes2 <- read.csv(\"./Dataset2-Media-User-Example-NODES.csv\", header = T, as.is = T)\nlinks2 <- read.csv(\"./Dataset2-Media-User-Example-EDGES.csv\", header = T, row.names = 1)\n\n# Examine the data:\nhead(nodes2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media.type\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"media.name\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"audience.size\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"NYT\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"1\"},{\"1\":\"s02\",\"2\":\"WaPo\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"25\",\"_rn_\":\"2\"},{\"1\":\"s03\",\"2\":\"WSJ\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"30\",\"_rn_\":\"3\"},{\"1\":\"s04\",\"2\":\"USAT\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"32\",\"_rn_\":\"4\"},{\"1\":\"s05\",\"2\":\"LATimes\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"5\"},{\"1\":\"s06\",\"2\":\"CNN\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"56\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(links2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"U01\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U02\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U03\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U04\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U05\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U06\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U07\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U08\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U09\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U10\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U11\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U12\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U13\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U14\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U15\"],\"name\":[15],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U16\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U17\"],\"name\":[17],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U18\"],\"name\":[18],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U19\"],\"name\":[19],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"U20\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0\",\"17\":\"0\",\"18\":\"0\",\"19\":\"0\",\"20\":\"0\",\"_rn_\":\"s01\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"1\",\"5\":\"1\",\"6\":\"0\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0\",\"17\":\"0\",\"18\":\"0\",\"19\":\"0\",\"20\":\"1\",\"_rn_\":\"s02\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"1\",\"7\":\"1\",\"8\":\"1\",\"9\":\"1\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"0\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0\",\"17\":\"0\",\"18\":\"0\",\"19\":\"0\",\"20\":\"0\",\"_rn_\":\"s03\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"0\",\"8\":\"0\",\"9\":\"1\",\"10\":\"1\",\"11\":\"1\",\"12\":\"0\",\"13\":\"0\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0\",\"17\":\"0\",\"18\":\"0\",\"19\":\"0\",\"20\":\"0\",\"_rn_\":\"s04\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"1\",\"12\":\"1\",\"13\":\"1\",\"14\":\"0\",\"15\":\"0\",\"16\":\"0\",\"17\":\"0\",\"18\":\"0\",\"19\":\"0\",\"20\":\"0\",\"_rn_\":\"s05\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"7\":\"0\",\"8\":\"0\",\"9\":\"0\",\"10\":\"0\",\"11\":\"0\",\"12\":\"0\",\"13\":\"1\",\"14\":\"1\",\"15\":\"0\",\"16\":\"0\",\"17\":\"1\",\"18\":\"0\",\"19\":\"0\",\"20\":\"0\",\"_rn_\":\"s06\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# links2 is a matrix for a two-mode network:\nlinks2 <- as.matrix(links2)\ndim(links2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10 20\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(nodes2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30  5\n```\n\n\n:::\n:::\n\n\nNote: What is a **two-mode** network? A network that as a `node$type`\nvariable and can be a `bipartite` or a `k-partite` network as a result.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an igraph network object from the two-mode matrix:\nnet2 <- igraph::graph_from_incidence_matrix(links2)\n\n# To transform a one-mode network matrix into an igraph object,\n# we would use graph_from_adjacency_matrix()\n\n# A built-in vertex attribute 'type' shows which mode vertices belong to.\ntable(V(net2)$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFALSE  TRUE \n   10    20 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Basic igraph plot\nplot(net2, vertex.label = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using tidygraph\n# For all objects that are not node and edge data_frames\n# tidygraph uses `as_tbl_graph()`\n#\ngraph <- as_tbl_graph(links2)\ngraph %>%\n  activate(nodes) %>%\n  as_tibble()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"type\"],\"name\":[1],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"name\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"FALSE\",\"2\":\"s01\"},{\"1\":\"FALSE\",\"2\":\"s02\"},{\"1\":\"FALSE\",\"2\":\"s03\"},{\"1\":\"FALSE\",\"2\":\"s04\"},{\"1\":\"FALSE\",\"2\":\"s05\"},{\"1\":\"FALSE\",\"2\":\"s06\"},{\"1\":\"FALSE\",\"2\":\"s07\"},{\"1\":\"FALSE\",\"2\":\"s08\"},{\"1\":\"FALSE\",\"2\":\"s09\"},{\"1\":\"FALSE\",\"2\":\"s10\"},{\"1\":\"TRUE\",\"2\":\"U01\"},{\"1\":\"TRUE\",\"2\":\"U02\"},{\"1\":\"TRUE\",\"2\":\"U03\"},{\"1\":\"TRUE\",\"2\":\"U04\"},{\"1\":\"TRUE\",\"2\":\"U05\"},{\"1\":\"TRUE\",\"2\":\"U06\"},{\"1\":\"TRUE\",\"2\":\"U07\"},{\"1\":\"TRUE\",\"2\":\"U08\"},{\"1\":\"TRUE\",\"2\":\"U09\"},{\"1\":\"TRUE\",\"2\":\"U10\"},{\"1\":\"TRUE\",\"2\":\"U11\"},{\"1\":\"TRUE\",\"2\":\"U12\"},{\"1\":\"TRUE\",\"2\":\"U13\"},{\"1\":\"TRUE\",\"2\":\"U14\"},{\"1\":\"TRUE\",\"2\":\"U15\"},{\"1\":\"TRUE\",\"2\":\"U16\"},{\"1\":\"TRUE\",\"2\":\"U17\"},{\"1\":\"TRUE\",\"2\":\"U18\"},{\"1\":\"TRUE\",\"2\":\"U19\"},{\"1\":\"TRUE\",\"2\":\"U20\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(edges) %>%\n  as_tibble()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"from\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"to\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"weight\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"11\",\"3\":\"1\"},{\"1\":\"1\",\"2\":\"12\",\"3\":\"1\"},{\"1\":\"1\",\"2\":\"13\",\"3\":\"1\"},{\"1\":\"2\",\"2\":\"14\",\"3\":\"1\"},{\"1\":\"2\",\"2\":\"15\",\"3\":\"1\"},{\"1\":\"2\",\"2\":\"30\",\"3\":\"1\"},{\"1\":\"3\",\"2\":\"16\",\"3\":\"1\"},{\"1\":\"3\",\"2\":\"17\",\"3\":\"1\"},{\"1\":\"3\",\"2\":\"18\",\"3\":\"1\"},{\"1\":\"3\",\"2\":\"19\",\"3\":\"1\"},{\"1\":\"4\",\"2\":\"19\",\"3\":\"1\"},{\"1\":\"4\",\"2\":\"20\",\"3\":\"1\"},{\"1\":\"4\",\"2\":\"21\",\"3\":\"1\"},{\"1\":\"5\",\"2\":\"21\",\"3\":\"1\"},{\"1\":\"5\",\"2\":\"22\",\"3\":\"1\"},{\"1\":\"5\",\"2\":\"23\",\"3\":\"1\"},{\"1\":\"6\",\"2\":\"23\",\"3\":\"1\"},{\"1\":\"6\",\"2\":\"24\",\"3\":\"1\"},{\"1\":\"6\",\"2\":\"27\",\"3\":\"1\"},{\"1\":\"7\",\"2\":\"24\",\"3\":\"1\"},{\"1\":\"7\",\"2\":\"25\",\"3\":\"1\"},{\"1\":\"7\",\"2\":\"26\",\"3\":\"1\"},{\"1\":\"8\",\"2\":\"26\",\"3\":\"1\"},{\"1\":\"8\",\"2\":\"27\",\"3\":\"1\"},{\"1\":\"8\",\"2\":\"28\",\"3\":\"1\"},{\"1\":\"8\",\"2\":\"29\",\"3\":\"1\"},{\"1\":\"9\",\"2\":\"16\",\"3\":\"1\"},{\"1\":\"9\",\"2\":\"29\",\"3\":\"1\"},{\"1\":\"9\",\"2\":\"30\",\"3\":\"1\"},{\"1\":\"10\",\"2\":\"11\",\"3\":\"1\"},{\"1\":\"10\",\"2\":\"21\",\"3\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ngraph %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(\n    fill = \"orange\",\n    shape = 21, size = 6,\n    color = \"black\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Examine the resulting object:\nclass(net2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"igraph\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnet2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 4f078ac UN-B 30 31 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 4f078ac (vertex names):\n [1] s01--U01 s01--U02 s01--U03 s02--U04 s02--U05 s02--U20 s03--U06 s03--U07\n [9] s03--U08 s03--U09 s04--U09 s04--U10 s04--U11 s05--U11 s05--U12 s05--U13\n[17] s06--U13 s06--U14 s06--U17 s07--U14 s07--U15 s07--U16 s08--U16 s08--U17\n[25] s08--U18 s08--U19 s09--U06 s09--U19 s09--U20 s10--U01 s10--U11\n```\n\n\n:::\n:::\n\n\nNote: The remaining attributes for the nodes ( in data frame `nodes2`)\nare not (yet) a part of the graph, either with igraph or with tidygraph.\n\n# 3. Network plots in 'igraph'\n\n## ------\\~\\~ Plot parameters in igraph --------\n\nCheck out the node options (starting with 'vertex.') and the edge\noptions (starting with 'edge.').[Type ?igraph.plotting in your console]{.aside}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?igraph.plotting\n```\n:::\n\n\nWe can set the node & edge options in two ways - one is to specify them\nin the `plot()` function, as we are doing below.\n\n-   Plot with curved edges (edge.curved = .1) and reduce arrow size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net, edge.arrow.size = .4, edge.curved = .1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n   id    media               media.type type.label audience.size\n   <chr> <chr>                    <int> <chr>              <int>\n 1 s01   NY Times                     1 Newspaper             20\n 2 s02   Washington Post              1 Newspaper             25\n 3 s03   Wall Street Journal          1 Newspaper             30\n 4 s04   USA Today                    1 Newspaper             32\n 5 s05   LA Times                     1 Newspaper             20\n 6 s06   New York Post                1 Newspaper             50\n 7 s07   CNN                          2 TV                    56\n 8 s08   MSNBC                        2 TV                    34\n 9 s09   FOX News                     2 TV                    60\n10 s10   ABC                          2 TV                    23\n11 s11   BBC                          2 TV                    34\n12 s12   Yahoo News                   3 Online                33\n13 s13   Google News                  3 Online                23\n14 s14   Reuters.com                  3 Online                12\n15 s15   NYTimes.com                  3 Online                24\n16 s16   WashingtonPost.com           3 Online                28\n17 s17   AOL.com                      3 Online                33\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# ℹ 46 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngraph %>% ggraph(., layout = \"graphopt\") +\n  geom_edge_arc(\n    color = \"grey\",\n    strength = 0.1,\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"both\",\n      length = unit(3, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    fill = \"orange\",\n    shape = 21,\n    size = 8,\n    color = \"black\"\n  ) +\n  geom_node_text(aes(label = id), size = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-2.png){width=2100}\n:::\n:::\n\n\n-   Set node color to orange and the border color to hex 555555\n-   Replace the vertex label with the node names stored in \"media\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  net,\n  edge.arrow.size = .2,\n  edge.curved = 0,\n  vertex.color = \"orange\",\n  vertex.frame.color = \"#555555\",\n  vertex.label = V(net)$media,\n  vertex.label.color = \"black\",\n  vertex.label.cex = .7\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- tbl_graph(nodes, links, directed = TRUE)\n# graph\ngraph %>%\n  ggraph(., layout = \"gem\") +\n  geom_edge_link(\n    color = \"grey\",\n    end_cap = circle(.3, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"both\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    fill = \"orange\",\n    shape = 21,\n    size = 6,\n    color = \"#555555\"\n  ) +\n  geom_node_text(aes(label = media))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=2100}\n:::\n:::\n\n\n\nThe second way to set attributes is to **add them** to the igraph\nobject.\n\n-   Generate colors based on media type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolrs <- c(\"gray50\", \"tomato\", \"gold\")\nV(net)$color <- colrs[V(net)$media.type]\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=2100}\n:::\n:::\n\n\n-   Compute node degrees (#links) and use that to set node size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg <- igraph::degree(net, mode = \"all\")\nV(net)$size <- deg * 3\n# Alternatively, we can set node size based on audience size:\nV(net)$size <- V(net)$audience.size * 0.7\nV(net)$size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14.0 17.5 21.0 22.4 14.0 35.0 39.2 23.8 42.0 16.1 23.8 23.1 16.1  8.4 16.8\n[16] 19.6 23.1\n```\n\n\n:::\n\n```{.r .cell-code}\n# The labels are currently node IDs.\n# Setting them to NA will render no labels:\nV(net)$label.color <- \"black\"\nV(net)$label <- NA\n\n# Set edge width based on weight:\nE(net)$width <- E(net)$weight / 6\n\n# change arrow size and edge color:\nE(net)$arrow.size <- .2\nE(net)$edge.color <- \"gray80\"\n\n# We can even set the network layout:\ngraph_attr(net, \"layout\") <- layout_with_lgl\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- tbl_graph(nodes, links, directed = TRUE)\n# graph\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  ggraph(., layout = \"lgl\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(aes(fill = type.label, size = size),\n    shape = 21,\n    color = \"black\"\n  ) +\n  scale_fill_manual(\n    name = \"Media Type\",\n    values = c(\"grey50\", \"gold\", \"tomato\")\n  ) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 16)) +\n\n  guides(fill = guide_legend(\n    title = \"Media Type\",\n    override.aes = list(pch = 21, size = 4)\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=2100}\n:::\n:::\n\n\nWe can also override the attributes explicitly in the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net, edge.color = \"orange\", vertex.color = \"gray50\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=2100}\n:::\n:::\n\n\nWe can also add a legend explaining the meaning of the colors we used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net)\nlegend(\n  x = -2.1, y = -1.1,\n  c(\"Newspaper\", \"Television\", \"Online News\"),\n  pch = 21, col = \"#777777\",\n  pt.bg = colrs, pt.cex = 2.5, bty = \"n\", ncol = 1\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# legends are automatic with the tidygraph + ggraph flow\n```\n:::\n\n\nSometimes, especially with semantic networks, we may be interested in\nplotting only the labels of the nodes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net,\n  vertex.shape = \"none\", vertex.label = V(net)$media,\n  vertex.label.font = 2, vertex.label.color = \"gray40\",\n  vertex.label.cex = .7, edge.color = \"gray85\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# using tidygraph\n\nggraph(net, layout = \"gem\") +\n  geom_edge_link(\n    color = \"grey80\", width = 2,\n    end_cap = circle(0.5, \"cm\"),\n    start_cap = circle(0.5, \"cm\")\n  ) +\n  geom_node_text(aes(label = media))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-2.png){width=2100}\n:::\n:::\n\n\nLet's color the edges of the graph based on their source node color.\nWe'll get the starting node for each edge with `ends()`.\n\nNote: Edge attribute is being set by start node.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedge.start <- ends(net, es = E(net), names = F)[, 1]\nedge.col <- V(net)$color[edge.start] # How simple this is !!!\n# The three colors are recycled\n#\nplot(net, edge.color = edge.col, edge.curved = .4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){width=2100}\n:::\n:::\n\n\nNOTE: The source node colour has been set using the `media.type`, which\nis a node attribute. Node attributes are not typically accessible to\nedges. So we need to build a combo data frame using `dplyr`, so that\nedges can use this node attribute. ( There may be other ways...)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n# Make a \"combo\" data frame of nodes *and* edges with left_join()\n# Join by `from` so that type.label is based on from = edge.start\n\nlinks %>%\n  left_join(., nodes, by = c(\"from\" = \"id\")) %>%\n  tbl_graph(edges = ., nodes = nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  ggraph(., layout = \"lgl\") +\n  geom_edge_arc(\n    aes(\n      color = type.label,\n      width = weight\n    ),\n    strength = 0.3\n  ) +\n  geom_node_point(\n    aes(\n      fill = type.label,\n      # type.label is now available as edge attribute\n      size = size\n    ),\n    shape = 21,\n    color = \"black\"\n  ) +\n  scale_fill_manual(\n    name = \"Media Type\",\n    values = c(\"grey50\", \"gold\", \"tomato\"),\n    guide = \"legend\"\n  ) +\n  scale_edge_color_manual(\n    name = \"Source Type\",\n    values = c(\"grey80\", \"gold\", \"tomato\")\n  ) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 16)) +\n  # not \"limits\"!\n  guides(fill = guide_legend(override.aes = list(\n    pch = 21,\n    size = 4\n  )))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=2100}\n:::\n:::\n\n\n## -------\\~\\~ Network Layouts in 'igraph' --------\n\nNetwork layouts are algorithms that return **coordinates** for each node\nin a network.\n\nLet's generate a slightly larger 100-node graph using a\n`preferential attachment` model (Barabasi-Albert).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet.bg <- sample_pa(n = 100, power = 1.2)\nV(net.bg)$size <- 8\nV(net.bg)$frame.color <- \"white\"\nV(net.bg)$color <- \"orange\"\nV(net.bg)$label <- \"\"\nE(net.bg)$arrow.mode <- 0\nplot(net.bg)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 4) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-2.png){width=2100}\n:::\n:::\n\n\nNow let's plot this network using the layouts available in igraph. You\ncan set the layout in the plot function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_randomly)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){width=2100}\n:::\n:::\n\n\nOr calculate the vertex coordinates in advance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_in_circle(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = \"circle\") +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 2) +\n  theme_graph() +\n  theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-2.png){width=2100}\n:::\n:::\n\n\n`l` is simply a matrix of x,y coordinates (N x 2) for the N nodes in the\ngraph. You can generate your own:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- cbind(1:vcount(net.bg), c(1, vcount(net.bg):2))\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       [,1] [,2]\n  [1,]    1    1\n  [2,]    2  100\n  [3,]    3   99\n  [4,]    4   98\n  [5,]    5   97\n  [6,]    6   96\n  [7,]    7   95\n  [8,]    8   94\n  [9,]    9   93\n [10,]   10   92\n [11,]   11   91\n [12,]   12   90\n [13,]   13   89\n [14,]   14   88\n [15,]   15   87\n [16,]   16   86\n [17,]   17   85\n [18,]   18   84\n [19,]   19   83\n [20,]   20   82\n [21,]   21   81\n [22,]   22   80\n [23,]   23   79\n [24,]   24   78\n [25,]   25   77\n [26,]   26   76\n [27,]   27   75\n [28,]   28   74\n [29,]   29   73\n [30,]   30   72\n [31,]   31   71\n [32,]   32   70\n [33,]   33   69\n [34,]   34   68\n [35,]   35   67\n [36,]   36   66\n [37,]   37   65\n [38,]   38   64\n [39,]   39   63\n [40,]   40   62\n [41,]   41   61\n [42,]   42   60\n [43,]   43   59\n [44,]   44   58\n [45,]   45   57\n [46,]   46   56\n [47,]   47   55\n [48,]   48   54\n [49,]   49   53\n [50,]   50   52\n [51,]   51   51\n [52,]   52   50\n [53,]   53   49\n [54,]   54   48\n [55,]   55   47\n [56,]   56   46\n [57,]   57   45\n [58,]   58   44\n [59,]   59   43\n [60,]   60   42\n [61,]   61   41\n [62,]   62   40\n [63,]   63   39\n [64,]   64   38\n [65,]   65   37\n [66,]   66   36\n [67,]   67   35\n [68,]   68   34\n [69,]   69   33\n [70,]   70   32\n [71,]   71   31\n [72,]   72   30\n [73,]   73   29\n [74,]   74   28\n [75,]   75   27\n [76,]   76   26\n [77,]   77   25\n [78,]   78   24\n [79,]   79   23\n [80,]   80   22\n [81,]   81   21\n [82,]   82   20\n [83,]   83   19\n [84,]   84   18\n [85,]   85   17\n [86,]   86   16\n [87,]   87   15\n [88,]   88   14\n [89,]   89   13\n [90,]   90   12\n [91,]   91   11\n [92,]   92   10\n [93,]   93    9\n [94,]   94    8\n [95,]   95    7\n [96,]   96    6\n [97,]   97    5\n [98,]   98    4\n [99,]   99    3\n[100,]  100    2\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = l) +\n  geom_edge_link(color = \"grey\") +\n  geom_node_point(color = \"orange\", size = 2) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-2.png){width=2100}\n:::\n:::\n\n\nThis layout is just an example and not very helpful - thankfully\n`igraph` has a number of built-in layouts, including:\n\n-   Randomly placed vertices\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_randomly(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_randomly(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-2.png){width=2100}\n:::\n:::\n\n\n-   Circle layout\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_in_circle(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_in_circle(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\") +\n  theme(aspect.ratio = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-2.png){width=2100}\n:::\n:::\n\n\n-   3D sphere layout\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_on_sphere(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_on_sphere(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-2.png){width=2100}\n:::\n:::\n\n\n-   The Fruchterman-Reingold force-directed algorithm: Nice but slow,\n    most often used in graphs smaller than \\~1000 vertices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_with_fr(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_fr(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-35-2.png){width=2100}\n:::\n:::\n\n\nYou will also notice that the F-R layout is not deterministic -\ndifferent runs will result in slightly different configurations. Saving\nthe layout in l allows us to get the exact same result multiple times.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2), mar = c(1, 1, 1, 1))\nplot(net.bg, layout = layout_with_fr)\nplot(net.bg, layout = layout_with_fr)\nplot(net.bg, layout = l)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=2100}\n:::\n:::\n\n\nBy default, the coordinates of the plots are rescaled to the \\[-1,1\\]\ninterval for both x and y. You can change that with the parameter\n`rescale = FALSE` and rescale your plot manually by multiplying the\ncoordinates by a scalar. You can use `norm_coords` to normalize the plot\nwith the boundaries you want. This way you can create more compact or\nspread out layout versions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the layout coordinates:\nl <- layout_with_fr(net.bg)\n# Normalize them so that they are in the -1, 1 interval:\nl <- norm_coords(l, ymin = -1, ymax = 1, xmin = -1, xmax = 1)\n\npar(mfrow = c(2, 2), mar = c(0, 0, 0, 0))\nplot(net.bg, rescale = F, layout = l * 0.4)\nplot(net.bg, rescale = F, layout = l * 0.8)\nplot(net.bg, rescale = F, layout = l * 1.2)\nplot(net.bg, rescale = F, layout = l * 1.6)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# Can't do this with tidygraph ( multiplying layout * scalar ), it seems\n```\n:::\n\n\nAnother popular force-directed algorithm that produces nice results for\nconnected graphs is **Kamada Kawai**. Like Fruchterman Reingold, it\nattempts to minimize the energy in a spring system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- layout_with_kk(net.bg)\nplot(net.bg, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_kk(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-2.png){width=2100}\n:::\n:::\n\n\nThe **MDS (multidimensional scaling)** algorithm tries to place nodes\nbased on some measure of similarity or distance between them. More\nsimilar/less distant nodes are placed closer to each other. By default,\nthe measure used is based on the shortest paths between nodes in the\nnetwork. That can be changed with the `dist` parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_with_mds)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_mds(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-2.png){width=2100}\n:::\n:::\n\n\nThe LGL algorithm is for large connected graphs. Here you can specify a\n`root`- the node that will be placed in the middle of the layout.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net.bg, layout = layout_with_lgl)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\n# graph <- play_barabasi_albert(n = 100, power = 1.2)\ngraph %>% ggraph(., layout = layout_with_lgl(.)) +\n  geom_edge_link0(colour = \"grey\") +\n  geom_node_point(colour = \"orange\", size = 4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-2.png){width=2100}\n:::\n:::\n\n\nBy default, igraph uses a layout called `layout_nicely` which selects an\nappropriate layout algorithm based on the properties of the graph. Check\nout all available layouts in igraph:[ Type ?igraph::layout_ in your console]{.aside}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayouts <- grep(\"^layout_\", ls(\"package:igraph\"), value = TRUE)[-1]\n\n# Remove layouts that do not apply to our graph.\nlayouts <- layouts[!grepl(\"bipartite|merge|norm|sugiyama|tree\", layouts)]\n\npar(mfrow = c(3, 3), mar = c(1, 1, 1, 1))\n\nfor (layout in layouts) {\n  print(layout)\n  l <- do.call(layout, list(net))\n  plot(net, edge.arrow.mode = 0, layout = l, main = layout)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_as_star\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_components\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_in_circle\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_nicely\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_on_grid\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_on_sphere\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_randomly\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_dh\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_drl\"\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_fr\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_gem\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_graphopt\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_kk\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_lgl\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"layout_with_mds\"\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-41-2.png){width=2100}\n:::\n:::\n\n\n# -------\\~\\~ Highlighting aspects of the network --------\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-42-1.png){width=2100}\n:::\n:::\n\n\nNotice that our network plot is still not too helpful. We can identify\nthe type and size of nodes, but cannot see much about the structure\nsince the links we're examining are so dense. One way to approach this\nis to see if we can sparsify the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(links$weight)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-43-1.png){width=2100}\n:::\n\n```{.r .cell-code}\nmean(links$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12.40816\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(links$weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.905635\n```\n\n\n:::\n:::\n\n\nThere are more sophisticated ways to extract the key edges, but for the\npurposes of this exercise we'll only keep ones that have weight higher\nthan the mean for the network. We can delete edges using\n`delete_edges(net, edges)` (or, by the way, add edges with\n`add_edges(net, edges)` )\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut.off <- mean(links$weight)\nnet.sp <- delete_edges(net, E(net)[weight < cut.off])\nplot(net.sp, layout = layout_with_kk)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n   id    media               media.type type.label audience.size\n   <chr> <chr>                    <int> <chr>              <int>\n 1 s01   NY Times                     1 Newspaper             20\n 2 s02   Washington Post              1 Newspaper             25\n 3 s03   Wall Street Journal          1 Newspaper             30\n 4 s04   USA Today                    1 Newspaper             32\n 5 s05   LA Times                     1 Newspaper             20\n 6 s06   New York Post                1 Newspaper             50\n 7 s07   CNN                          2 TV                    56\n 8 s08   MSNBC                        2 TV                    34\n 9 s09   FOX News                     2 TV                    60\n10 s10   ABC                          2 TV                    23\n11 s11   BBC                          2 TV                    34\n12 s12   Yahoo News                   3 Online                33\n13 s13   Google News                  3 Online                23\n14 s14   Reuters.com                  3 Online                12\n15 s15   NYTimes.com                  3 Online                24\n16 s16   WashingtonPost.com           3 Online                28\n17 s17   AOL.com                      3 Online                33\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# ℹ 46 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # New stuff here\n  activate(edges) %>%\n  filter(weight >= mean(weight)) %>%\n  ggraph(., layout = \"kk\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    aes(\n      fill = type.label,\n      size = size\n    ),\n    shape = 21,\n    color = \"black\"\n  ) +\n  scale_fill_manual(\n    name = \"Media Type\",\n    values = c(\"grey50\", \"gold\", \"tomato\"),\n    guide = \"legend\"\n  ) +\n\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 16)) +\n  # not \"limits\"!\n  guides(fill = guide_legend(override.aes = list(\n    pch = 21,\n    size = 4\n  )))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-44-2.png){width=2100}\n:::\n:::\n\n\nAnother way to think about this is to plot the two tie types (hyperlinks\nand mentions) separately. We will do that in section 5 of this tutorial:\nPlotting multiplex networks.\n\n### Community Detection\n\nWe can also try to make the network map more useful by showing the\ncommunities within it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Community detection (by optimizing modularity over partitions):\nclp <- cluster_optimal(net)\nclass(clp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"communities\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH clustering optimal, groups: 4, mod: 0.6\n+ groups:\n  $`1`\n  [1] \"s01\" \"s02\" \"s03\" \"s04\" \"s05\" \"s11\" \"s15\"\n  \n  $`2`\n  [1] \"s06\" \"s16\" \"s17\"\n  \n  $`3`\n  [1] \"s07\" \"s08\" \"s09\" \"s10\"\n  \n  $`4`\n  + ... omitted several groups/vertices\n```\n\n\n:::\n\n```{.r .cell-code}\nclp$membership\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 2 3 3 3 3 1 4 4 4 1 2 2\n```\n\n\n:::\n:::\n\n\nCommunity detection returns an object of class \"communities\" which\nigraph knows how to plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(clp, net)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=2100}\n:::\n:::\n\n\nTo plot communities using the `tidygraph` approach, I have taken help\nfrom the `ggforce` package. This package allows drawing of hull shapes\naround specific sets of points. Here goes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n# And ggforce\nlibrary(ggforce)\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph <- graph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # new stuff\n  mutate(community = as.factor(tidygraph::group_optimal()))\n\n# Need to pre-compute layout coordinates to pass to ggforce\n# To create a hull around each community\nlayout_go <- layout_with_graphopt(graph)\n\nggraph(graph, layout = layout_go) +\n\n  # new stuff\n  # need to pass x and y coordinates of nodes to `geom_mark_hull`\n  # Hull colour is `community`\n  #\n  ggforce::geom_mark_hull(aes(\n    x = layout_go[, 1],\n    y = layout_go[, 2],\n    color = community, fill = community\n  ), alpha = 0.1) +\n\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    aes(\n      fill = type.label,\n      size = size\n    ),\n    shape = 21,\n    color = \"black\"\n  ) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 10)) +\n  scale_fill_discrete(\"Media Type\") +\n  scale_colour_discrete(\"Community\") +\n  guides(fill = guide_legend(override.aes = list(\n    pch = 21,\n    size = 4\n  )))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=2100}\n:::\n:::\n\n\nWe can also plot the communities without relying on their built-in plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(net)$community <- clp$membership\ncolrs <-\n  adjustcolor(c(\"gray50\", \"tomato\", \"gold\", \"yellowgreen\"), alpha = .6)\nplot(net, vertex.color = colrs[V(net)$community])\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# using tidygraph\n# All clustering algorithms from igraph is available in tidygraph using the group_* prefix. All of these functions return an integer vector with nodes (or edges) sharing the same integer being grouped together.\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n   id    media               media.type type.label audience.size\n   <chr> <chr>                    <int> <chr>              <int>\n 1 s01   NY Times                     1 Newspaper             20\n 2 s02   Washington Post              1 Newspaper             25\n 3 s03   Wall Street Journal          1 Newspaper             30\n 4 s04   USA Today                    1 Newspaper             32\n 5 s05   LA Times                     1 Newspaper             20\n 6 s06   New York Post                1 Newspaper             50\n 7 s07   CNN                          2 TV                    56\n 8 s08   MSNBC                        2 TV                    34\n 9 s09   FOX News                     2 TV                    60\n10 s10   ABC                          2 TV                    23\n11 s11   BBC                          2 TV                    34\n12 s12   Yahoo News                   3 Online                33\n13 s13   Google News                  3 Online                23\n14 s14   Reuters.com                  3 Online                12\n15 s15   NYTimes.com                  3 Online                24\n16 s16   WashingtonPost.com           3 Online                28\n17 s17   AOL.com                      3 Online                33\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# ℹ 46 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # new stuff\n  mutate(community = as.factor(tidygraph::group_optimal())) %>%\n  ggraph(., layout = \"graphopt\") +\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    # clears an area near the node\n\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    aes(\n      fill = community,\n      size = size\n    ),\n    shape = 21,\n    color = \"black\"\n  ) +\n  scale_fill_manual(\n    name = \"Community\",\n    values = c(\"grey50\", \"gold\", \"tomato\", \"yellowgreen\"),\n    guide = \"legend\"\n  ) +\n\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 10)) +\n  guides(fill = guide_legend(override.aes = list(\n    pch = 21,\n    size = 4\n  )))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-48-2.png){width=2100}\n:::\n:::\n\n\n## -------\\~\\~ Highlighting specific nodes or links --------\n\nSometimes we want to focus the visualization on a particular node or a\ngroup of nodes. Let's represent distance from the NYT:\n\n-   `distances()` calculates shortest path from vertices in 'v' to ones\n    in 'to'.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist.from.NYT <- distances(net,\n  v = V(net)[media == \"NY Times\"],\n  to = V(net),\n  weights = NA\n)\n\n# Set colors to plot the distances:\noranges <- colorRampPalette(c(\"dark red\", \"gold\"))\ncol <- oranges(max(dist.from.NYT) + 1)\ncol <- col[dist.from.NYT + 1]\n\n# Let's have same coordinates for Nodes in both graph renderings\n# Then we can verify that the distance calculations are the same for both renderings\ncoords <- igraph::layout_nicely(net)\nplot(net,\n  vertex.label = dist.from.NYT,\n  vertex.color = col, vertex.label.color = \"black\",\n  layout = coords\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\ngraph <- tbl_graph(nodes, links, directed = TRUE)\ngraph\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 17 × 5 (active)\n   id    media               media.type type.label audience.size\n   <chr> <chr>                    <int> <chr>              <int>\n 1 s01   NY Times                     1 Newspaper             20\n 2 s02   Washington Post              1 Newspaper             25\n 3 s03   Wall Street Journal          1 Newspaper             30\n 4 s04   USA Today                    1 Newspaper             32\n 5 s05   LA Times                     1 Newspaper             20\n 6 s06   New York Post                1 Newspaper             50\n 7 s07   CNN                          2 TV                    56\n 8 s08   MSNBC                        2 TV                    34\n 9 s09   FOX News                     2 TV                    60\n10 s10   ABC                          2 TV                    23\n11 s11   BBC                          2 TV                    34\n12 s12   Yahoo News                   3 Online                33\n13 s13   Google News                  3 Online                23\n14 s14   Reuters.com                  3 Online                12\n15 s15   NYTimes.com                  3 Online                24\n16 s16   WashingtonPost.com           3 Online                28\n17 s17   AOL.com                      3 Online                33\n#\n# Edge Data: 49 × 4\n   from    to type      weight\n  <int> <int> <chr>      <int>\n1     1     2 hyperlink     22\n2     1     3 hyperlink     22\n3     1     4 hyperlink     21\n# ℹ 46 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Set up NY Times as root node first\n# V(net)[media == \"NY Times\"] cannot be used since it returns an `igraph.vs` ( i.e. a list ) object.\n# We need an integer node id.\nroot_nyt <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"NY Times\") %>%\n  select(node_id) %>%\n  as_vector()\nroot_nyt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnode_id \n      1 \n```\n\n\n:::\n\n```{.r .cell-code}\ngraph %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # new stuff:\n  # breadth first search for all distances from the root node\n  mutate(order = bfs_dist(root = root_nyt)) %>%\n  ggraph(., layout = coords) + # same layout\n  geom_edge_link(\n    aes(width = weight),\n    color = \"grey80\",\n    end_cap = circle(.2, \"cm\"),\n    arrow = arrow(\n      type = \"closed\",\n      ends = \"last\",\n      length = unit(1, \"mm\")\n    )\n  ) +\n  geom_node_point(\n    aes(\n      fill = order,\n      size = size\n    ),\n    shape = 21,\n    color = \"black\"\n  ) +\n\n  geom_node_text(aes(label = order)) +\n\n  scale_fill_gradient(\n    name = \"Distance from NY Times\",\n    low = \"dark red\",\n    high = \"gold\",\n    guide = \"legend\"\n  ) +\n  scale_edge_width(range = c(0.2, 1.5), guide = \"none\") +\n  scale_size_continuous(\"Degree\", range = c(2, 16)) +\n  guides(fill = guide_legend(override.aes = list(\n    pch = 21,\n    size = 4\n  )))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=2100}\n:::\n:::\n\n\nOr, a bit more readable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net,\n  vertex.color = col,\n  vertex.label = dist.from.NYT, edge.arrow.size = .6,\n  vertex.label.color = \"white\",\n  vertex.size = V(net)$size * 1.6,\n  edge.width = 2,\n  layout = norm_coords(layout_with_lgl(net)) * 1.4, rescale = F\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=2100}\n:::\n:::\n\n\n## Path Highlighting\n\nWe can also highlight paths between the nodes in the network.\n\n-   Say here between MSNBC and the New York Post\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews.path <- shortest_paths(net,\n  from = V(net)[media == \"MSNBC\"],\n  to = V(net)[media == \"New York Post\"],\n  output = \"both\"\n) # both path nodes and edges\nnews.path.distance <- distances(\n  net,\n  V(net)[media == \"MSNBC\"],\n  V(net)[media == \"New York Post\"]\n)\nnews.path\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$vpath\n$vpath[[1]]\n+ 4/17 vertices, named, from c4373b1:\n[1] s08 s03 s12 s06\n\n\n$epath\n$epath[[1]]\n+ 3/48 edges from c4373b1 (vertex names):\n[1] s08->s03 s03->s12 s12->s06\n\n\n$predecessors\nNULL\n\n$inbound_edges\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nnews.path.distance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    s06\ns08   5\n```\n\n\n:::\n\n```{.r .cell-code}\n# Generate edge color variable to plot the path:\necol <- rep(\"gray80\", ecount(net))\necol[unlist(news.path$epath)] <- \"orange\"\n\n# Generate edge width variable to plot the path:\new <- rep(2, ecount(net))\new[unlist(news.path$epath)] <- 4\n\n# Generate node color variable to plot the path:\nvcol <- rep(\"gray40\", vcount(net))\nvcol[unlist(news.path$vpath)] <- \"gold\"\n\nplot(net,\n  vertex.color = vcol,\n  edge.color = ecol,\n  edge.width = ew,\n  edge.arrow.mode = 0,\n  ## added lines\n  vertex.label = V(net)$media,\n  vertex.label.font = 2,\n  vertex.label.color = \"gray40\",\n  vertex.label.cex = .7,\n  layout = coords * 1.5\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-52-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n# We need to use:\n# to_shortest_path(graph, from, to, mode = \"out\", weights = NULL)\n# Let's set up `to` and `from` nodes\n#\n# V(net)[media == \"NY Times\"] cannot be used since it returns an `igraph.vs` ( i.e. a list ) object.\n# We need integer node ids for `from` and `to` in `to_shortest_path`\n\nmsnbc <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"MSNBC\") %>%\n  select(node_id) %>%\n  as_vector()\nmsnbc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnode_id \n      8 \n```\n\n\n:::\n\n```{.r .cell-code}\nnypost <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"New York Post\") %>%\n  select(node_id) %>%\n  as_vector()\nnypost\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nnode_id \n      6 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Let's create a fresh graph object using morph\n# However we want to merge it back with the original `graph`\n# to get an overlay plot\n#\n# # Can do this to obtain a separate graph\n# convert(to_shortest_path,from = msnbc,to = nypost)\n# However we want to merge it back with the original `graph`\n# to get an overlay plot\nmsnbc_nyp <-\n  graph %>%\n  # first mark all nodes and edges as *not* on the shortest path\n  activate(nodes) %>%\n  mutate(shortest_path_node = FALSE) %>%\n  activate(edges) %>%\n  mutate(shortest_path_edge = FALSE) %>%\n  # Find shortest path between MSNBC and NY Post\n  morph(to_shortest_path, from = msnbc, to = nypost) %>%\n  # Now to mark the shortest_path nodes as TRUE\n  activate(nodes) %>%\n  mutate(shortest_path_node = TRUE) %>%\n  # Now to mark the shortest_path edges as TRUE\n  activate(edges) %>%\n  mutate(shortest_path_edge = TRUE) %>%\n  #\n  # Merge back into main graph; Still saving it as a `msnbc_nyp`\n  unmorph()\nmsnbc_nyp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tbl_graph: 17 nodes and 49 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 49 × 5 (active)\n    from    to type      weight shortest_path_edge\n   <int> <int> <chr>      <int> <lgl>             \n 1     1     2 hyperlink     22 FALSE             \n 2     1     3 hyperlink     22 FALSE             \n 3     1     4 hyperlink     21 FALSE             \n 4     1    15 mention       20 FALSE             \n 5     2     1 hyperlink     23 FALSE             \n 6     2     3 hyperlink     21 FALSE             \n 7     2     9 hyperlink      1 FALSE             \n 8     2    10 hyperlink      5 FALSE             \n 9     3     1 hyperlink     21 FALSE             \n10     3     4 hyperlink     22 TRUE              \n# ℹ 39 more rows\n#\n# Node Data: 17 × 6\n  id    media             media.type type.label audience.size shortest_path_node\n  <chr> <chr>                  <int> <chr>              <int> <lgl>             \n1 s01   NY Times                   1 Newspaper             20 FALSE             \n2 s02   Washington Post            1 Newspaper             25 FALSE             \n3 s03   Wall Street Jour…          1 Newspaper             30 TRUE              \n# ℹ 14 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nmsnbc_nyp %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  ggraph(layout = coords) +\n  # geom_edge_link0(colour = \"grey\") +\n  geom_edge_link0(aes(\n    colour = shortest_path_edge,\n    width = shortest_path_edge\n  )) +\n\n  geom_node_point(aes(\n    size = size,\n    fill = shortest_path_node\n  ), shape = 21) +\n  geom_node_text(aes(label = media)) +\n\n  scale_size_continuous(\"Degree\", range = c(2, 16)) +\n  scale_fill_manual(\"Shortest Path\",\n    values = c(\"grey\", \"gold\")\n  ) +\n\n  scale_edge_width_manual(values = c(1, 4)) +\n\n  scale_edge_colour_manual(values = c(\"grey\", \"orange\")) +\n  guides(\n    fill = guide_legend(override.aes = list(\n      pch = 21,\n      size = 6\n    )),\n    edge_colour = \"none\",\n    edge_width = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-53-1.png){width=2100}\n:::\n:::\n\n\n-   Highlight the edges going into or out of a vertex, for instance the\n    WSJ. For a single node, use `incident()`, for multiple nodes use\n    `incident_edges()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninc.edges <-\n  incident(net, V(net)[media == \"Wall Street Journal\"], mode = \"all\")\n\n# Set colors to plot the selected edges.\necol <- rep(\"gray80\", ecount(net))\necol[inc.edges] <- \"orange\"\nvcol <- rep(\"grey40\", vcount(net))\nvcol[V(net)$media == \"Wall Street Journal\"] <- \"gold\"\nplot(\n  net,\n  vertex.color = vcol,\n  edge.color = ecol,\n  edge.width = 2,\n  layout = coords\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\nwsj <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"Wall Street Journal\") %>%\n  select(node_id) %>%\n  as_vector()\n\ngraph %>%\n  activate(nodes) %>%\n  mutate(\n    wsj_adjacent = node_is_adjacent(\n      to = wsj, mode = \"all\",\n      include_to = TRUE\n    ),\n    size = centrality_degree()\n  ) %>%\n  mutate(WSJ = if_else(media == \"Wall Street Journal\", TRUE, FALSE)) %>%\n  activate(edges) %>%\n  mutate(wsj_links = edge_is_incident(wsj)) %>%\n  ggraph(., layout = coords) +\n  geom_edge_link0(aes(colour = wsj_links), width = 2) +\n\n  geom_node_point(aes(\n    fill = WSJ,\n    size = size\n  ), shape = 21) +\n\n  geom_node_text(aes(label = media), repel = TRUE) +\n\n  scale_fill_manual(\"WSJ Neighbours\",\n    values = c(\"grey\", \"gold\"),\n    guide = guide_legend(\n      override.aes =\n        list(\n          pch = 21,\n          size = 5\n        )\n    )\n  ) +\n  scale_edge_colour_manual(\"WSJ Links\",\n    values = c(\"grey\", \"orange\")\n  ) +\n  scale_size(\"Degree\", range = c(2, 16)) +\n  ggtitle(label = \"Highlighting WSJ Neighbours and Links\") +\n  guides(\n    shape = \"none\", fill = \"none\" # , colour = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=2100}\n:::\n:::\n\n\n## Highlight Neighbours\n\nOr we can highlight the immediate neighbors of a vertex, say WSJ. The\n`neighbors` function finds all nodes one step out from the focal actor.\nTo find the neighbors for multiple nodes, use `adjacent_vertices()`. To\nfind node neighborhoods going more than one step out, use function\n`ego()` with parameter `order` set to the number of steps out to go from\nthe focal node(s).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nneigh.nodes <- neighbors(net, V(net)[media == \"Wall Street Journal\"], mode = \"out\")\n\n# Set colors to plot the neighbors:\nvcol[neigh.nodes] <- \"#ff9d00\"\nplot(net, vertex.color = vcol)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-56-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\nwsj <- graph %>%\n  activate(nodes) %>%\n  as_tibble() %>%\n  rowid_to_column(var = \"node_id\") %>%\n  filter(media == \"Wall Street Journal\") %>%\n  select(node_id) %>%\n  as_vector()\n\ngraph %>%\n  activate(nodes) %>%\n  mutate(\n    wsj_adjacent = node_is_adjacent(\n      to = wsj, mode = \"all\",\n      # remove WSJ from the list!\n      # highlight only the neighbours\n\n      include_to = FALSE\n    ),\n    size = centrality_degree()\n  ) %>%\n  mutate(WSJ = if_else(media == \"Wall Street Journal\", TRUE, FALSE)) %>%\n  activate(edges) %>%\n  mutate(wsj_links = edge_is_incident(wsj)) %>%\n  ggraph(., layout = coords) +\n  geom_edge_link0(aes(colour = wsj_links), width = 2) +\n\n  geom_node_point(aes(\n    fill = wsj_adjacent,\n    size = size\n  ), shape = 21) +\n\n  geom_node_text(aes(label = media), repel = TRUE) +\n\n  scale_fill_manual(\"WSJ Neighbours\",\n    values = c(\"grey\", \"gold\"),\n    guide = guide_legend(\n      override.aes =\n        list(\n          pch = 21,\n          size = 5\n        )\n    )\n  ) +\n  scale_edge_colour_manual(\"WSJ Links\",\n    values = c(\"grey\", \"orange\")\n  ) +\n  scale_size(\"Degree\", range = c(2, 16)) +\n  ggtitle(label = \"Highlighting WSJ Neighbours and Links\") +\n  guides(\n    shape = \"none\", fill = \"none\" # , colour = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-57-1.png){width=2100}\n:::\n:::\n\n\nAnother way to draw attention to a group of nodes: (This is generally\nnot recommended since, depending on layout, nodes that are not 'marked'\ncan accidentally get placed on top of the mark)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net, mark.groups = c(1, 4, 5, 8), mark.col = \"#C5E5E7\", mark.border = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Mark multiple groups:\nplot(net,\n  mark.groups = list(c(1, 4, 5, 8), c(15:17)),\n  mark.col = c(\"#C5E5E7\", \"#ECD89A\"), mark.border = NA\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-58-2.png){width=2100}\n:::\n:::\n\n\n## -------\\~\\~ Interactive plotting with 'tkplot' --------\n\nR and igraph offer interactive plotting capabilities (mostly helpful for\nsmall networks)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntkid <- tkplot(net) # tkid is the id of the tkplot\n\nl <- tkplot.getcoords(tkid) # grab the coordinates from tkplot\nplot(net, layout = l)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-59-1.png){width=2100}\n:::\n:::\n\n\n## -------\\~\\~ Other ways to represent a network --------\n\nOne reminder that there are other ways to represent a network:\n\n-   Heatmap of the network matrix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnetm <- as_adjacency_matrix(net, attr = \"weight\", sparse = F)\ncolnames(netm) <- V(net)$media\nrownames(netm) <- V(net)$media\n\npalf <- colorRampPalette(c(\"gold\", \"dark orange\"))\n\n# The Rowv & Colv parameters turn dendrograms on and off\nheatmap(netm[, 17:1],\n  Rowv = NA, Colv = NA, col = palf(20),\n  scale = \"none\", margins = c(10, 10)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-60-1.png){width=2100}\n:::\n:::\n\n\n-   Degree distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndeg.dist <- degree_distribution(net, cumulative = T, mode = \"all\")\n# degree is available in `sna` too\nplot(x = 0:max(igraph::degree(net)), y = 1 - deg.dist, pch = 19, cex = 1.4, col = \"orange\", xlab = \"Degree\", ylab = \"Cumulative Frequency\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using Tidygraph\n# https://stackoverflow.com/questions/18356860/cumulative-histogram-with-ggplot2\ngraph %>%\n  activate(nodes) %>%\n  mutate(degree = centrality_degree(mode = \"all\")) %>%\n  as_tibble() %>%\n  ggplot(aes(x = degree, y = stat(count))) +\n  # geom_histogram(aes(y = cumsum(..count..)), binwidth = 1) +\n  stat_bin(aes(y = cumsum(after_stat(count))),\n    binwidth = 1, # Ta-Da !!\n    geom = \"point\", color = \"orange\", size = 5\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-61-2.png){width=2100}\n:::\n:::\n\n\n## 4. Plotting two-mode networks\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(nodes2)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"media.type\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"media.name\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"audience.size\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"s01\",\"2\":\"NYT\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"1\"},{\"1\":\"s02\",\"2\":\"WaPo\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"25\",\"_rn_\":\"2\"},{\"1\":\"s03\",\"2\":\"WSJ\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"30\",\"_rn_\":\"3\"},{\"1\":\"s04\",\"2\":\"USAT\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"32\",\"_rn_\":\"4\"},{\"1\":\"s05\",\"2\":\"LATimes\",\"3\":\"1\",\"4\":\"Newspaper\",\"5\":\"20\",\"_rn_\":\"5\"},{\"1\":\"s06\",\"2\":\"CNN\",\"3\":\"2\",\"4\":\"TV\",\"5\":\"56\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nhead(links2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19\ns01   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns02   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\ns03   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\ns04   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0\ns05   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0\ns06   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   0   1   0   0\n    U20\ns01   0\ns02   1\ns03   0\ns04   0\ns05   0\ns06   0\n```\n\n\n:::\n\n```{.r .cell-code}\nnet2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIGRAPH 4f078ac UN-B 30 31 -- \n+ attr: type (v/l), name (v/c)\n+ edges from 4f078ac (vertex names):\n [1] s01--U01 s01--U02 s01--U03 s02--U04 s02--U05 s02--U20 s03--U06 s03--U07\n [9] s03--U08 s03--U09 s04--U09 s04--U10 s04--U11 s05--U11 s05--U12 s05--U13\n[17] s06--U13 s06--U14 s06--U17 s07--U14 s07--U15 s07--U16 s08--U16 s08--U17\n[25] s08--U18 s08--U19 s09--U06 s09--U19 s09--U20 s10--U01 s10--U11\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(net2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-62-1.png){width=2100}\n:::\n:::\n\n\nThis time we will make nodes look different based on their type. Media\noutlets are blue squares, audience nodes are orange circles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nV(net2)$color <- c(\"steel blue\", \"orange\")[V(net2)$type + 1]\nV(net2)$shape <- c(\"square\", \"circle\")[V(net2)$type + 1]\n\n# Media outlets will have name labels, audience members will not:\nV(net2)$label <- \"\"\nV(net2)$label[V(net2)$type == F] <- nodes2$media[V(net2)$type == F]\nV(net2)$label.cex <- .6\nV(net2)$label.font <- 2\n\nplot(net2, vertex.label.color = \"white\", vertex.size = (2 - V(net2)$type) * 8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-63-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(layout = \"nicely\") +\n  geom_edge_link0() +\n  geom_node_point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label = if_else(type, \"\", media)), colour = \"white\", size = 3) +\n\n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n\n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n\n  scale_size_manual(values = c(10, 4), guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-64-1.png){width=2100}\n:::\n:::\n\n\n`igraph` has a built-in bipartite layout, though it's not the most\nhelpful:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(net2, vertex.label = NA, vertex.size = 7, layout = layout_as_bipartite)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(., layout = \"igraph\", algorithm = \"bipartite\") +\n  geom_edge_link0() +\n  geom_node_point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label = if_else(type, \"\", media)), colour = \"white\", size = 3) +\n\n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 6))\n  ) +\n\n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n\n  scale_size_manual(values = c(10, 4), guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-65-2.png){width=2100}\n:::\n:::\n\n\n-   Using text as nodes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(0, 0, 0, 0))\nplot(net2,\n  vertex.shape = \"none\", vertex.label = nodes2$media,\n  vertex.label.color = V(net2)$color, vertex.label.font = 2,\n  vertex.label.cex = .95, edge.color = \"gray70\", edge.width = 2\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  ggraph(layout = \"nicely\") +\n  geom_edge_link(\n    end_cap = circle(.4, \"cm\"),\n    start_cap = circle(0.4, \"cm\")\n  ) +\n  # geom_node>point(aes(shape = type, fill = type, size = type)) +\n  geom_node_text(aes(label = media, colour = type), size = 4) +\n\n  scale_shape_manual(\n    \"Type\",\n    values = c(22, 21),\n    labels = c(\"Media\", \"Persons\"),\n    guide = guide_legend(override.aes = list(size = 4))\n  ) +\n\n  scale_fill_manual(\n    \"Type\",\n    values = c(\"dodgerblue\", \"orange\"),\n    labels = c(\"Media\", \"Persons\")\n  ) +\n\n  scale_size_manual(values = c(10, 4), guide = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-66-2.png){width=2100}\n:::\n:::\n\n\n-   Using images as nodes You will need the 'png' package to do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"png\")\nlibrary(\"png\")\n\nimg.1 <- readPNG(\"./images/news.png\")\nimg.2 <- readPNG(\"./images/user.png\")\n\nV(net2)$raster <- list(img.1, img.2)[V(net2)$type + 1]\n\npar(mar = c(3, 3, 3, 3))\n\nplot(net2,\n  vertex.shape = \"raster\", vertex.label = NA,\n  vertex.size = 16, vertex.size2 = 16, edge.width = 2\n)\n\n\n# By the way, you can also add any image you want to any plot. For example, many #network graphs could be improved by a photo of a puppy carrying a basket full of kittens.\nimg.3 <- readPNG(\"./images/puppy.png\")\nrasterImage(img.3, xleft = -1.7, xright = 0, ybottom = -1.2, ytop = 0)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-67-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# The numbers after the image are coordinates for the plot.\n# The limits of your plotting area are given in par()$usr\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using ~~tidygraph~~ visNetwork\n# See this cheatsheet:\n# system.file(\"fontAwesome/Font_Awesome_Cheatsheet.pdf\", package = \"visNetwork\")\nlibrary(visNetwork)\n\nas_tbl_graph(x = links2, directed = TRUE) %>%\n  activate(nodes) %>%\n  left_join(nodes2, by = c(\"name\" = \"id\")) %>%\n  # visNetwork needs a \"group\" variable for grouping...\n  mutate(group = as.character(type)) %>%\n  visIgraph(.) %>%\n  visGroups(\n    groupname = \"FALSE\", shape = \"icon\",\n    icon = list(code = \"f26c\", size = 75, color = \"orange\")\n  ) %>%\n  visGroups(\n    groupname = \"TRUE\", shape = \"icon\",\n    icon = list(code = \"f007\", size = 75)\n  ) %>%\n  addFontAwesome()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item\" id=\"htmlwidget-fe1da12f154333ea11dc\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fe1da12f154333ea11dc\">{\"x\":{\"nodes\":{\"id\":[\"s01\",\"s02\",\"s03\",\"s04\",\"s05\",\"s06\",\"s07\",\"s08\",\"s09\",\"s10\",\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U06\",\"U07\",\"U08\",\"U09\",\"U10\",\"U11\",\"U12\",\"U13\",\"U14\",\"U15\",\"U16\",\"U17\",\"U18\",\"U19\",\"U20\"],\"type\":[false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],\"media\":[\"NYT\",\"WaPo\",\"WSJ\",\"USAT\",\"LATimes\",\"CNN\",\"MSNBC\",\"FOX \",\"ABC\",\"BBC\",\"John\",\"Mary\",\"Paul\",\"Ted\",\"Tom\",\"Kate\",\"Ed\",\"Anna\",\"Dan\",\"Nancy\",\"Sandra\",\"Ronda\",\"Sheila\",\"Jim\",\"Jill\",\"Jo\",\"Brian\",\"Jason\",\"Lisa\",\"Dave\"],\"media.type\":[1,1,1,1,1,2,2,2,2,2,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"media.name\":[\"Newspaper\",\"Newspaper\",\"Newspaper\",\"Newspaper\",\"Newspaper\",\"TV\",\"TV\",\"TV\",\"TV\",\"TV\",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"audience.size\":[20,25,30,32,20,56,34,60,23,34,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"group\":[\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"FALSE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\",\"TRUE\"],\"label\":[\"s01\",\"s02\",\"s03\",\"s04\",\"s05\",\"s06\",\"s07\",\"s08\",\"s09\",\"s10\",\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U06\",\"U07\",\"U08\",\"U09\",\"U10\",\"U11\",\"U12\",\"U13\",\"U14\",\"U15\",\"U16\",\"U17\",\"U18\",\"U19\",\"U20\"],\"x\":[-0.8540213241779031,0.2347324220507825,-0.3310685305013074,-0.4379253755921848,-0.0640354080474409,0.4530725057305349,0.8379711374507135,0.5922704280987172,0.1708094062076473,-0.5288827977066031,-0.6987759632706162,-0.8997141683074009,-1,0.187302820782673,0.3210000206808246,-0.08681191384770914,-0.4130467755407496,-0.4886118909580877,-0.4082768996435356,-0.5919284568828254,-0.3454864726116572,-0.04115910103542186,0.2037479654747232,0.6682107146935683,1,0.7597823185112829,0.532816211393522,0.7261093903534432,0.3942787596165467,0.2037900341761216],\"y\":[-0.8695747371484803,0.8657243200270199,0.2671263356919669,-0.1809321637989773,-0.4126638262884664,-0.2382093089454236,-0.1514276646116355,0.1290439432777586,0.4394520340329471,-0.5736001493921351,-0.7301075216057468,-1,-0.9137746614252955,1,0.9833846283815337,0.3669365812092642,0.3915691956232936,0.3079863731315424,0.04704883834785467,-0.1876183508464958,-0.3987915043174288,-0.5432641437530181,-0.3427267125600216,-0.2336416749854118,-0.2001334498774242,0.005547438478640476,-0.05756749154304097,0.2137715963771871,0.2991963492663317,0.6606961448995619]},\"edges\":{\"from\":[\"s01\",\"s01\",\"s01\",\"s02\",\"s02\",\"s02\",\"s03\",\"s03\",\"s03\",\"s03\",\"s04\",\"s04\",\"s04\",\"s05\",\"s05\",\"s05\",\"s06\",\"s06\",\"s06\",\"s07\",\"s07\",\"s07\",\"s08\",\"s08\",\"s08\",\"s08\",\"s09\",\"s09\",\"s09\",\"s10\",\"s10\"],\"to\":[\"U01\",\"U02\",\"U03\",\"U04\",\"U05\",\"U20\",\"U06\",\"U07\",\"U08\",\"U09\",\"U09\",\"U10\",\"U11\",\"U11\",\"U12\",\"U13\",\"U13\",\"U14\",\"U17\",\"U14\",\"U15\",\"U16\",\"U16\",\"U17\",\"U18\",\"U19\",\"U06\",\"U19\",\"U20\",\"U01\",\"U11\"],\"weight\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false,\"arrows\":\"to\"},\"physics\":{\"stabilization\":false},\"groups\":{\"FALSE\":{\"shape\":\"icon\",\"icon\":{\"code\":\"f26c\",\"size\":75,\"color\":\"orange\"}},\"useDefaultGroups\":true,\"TRUE\":{\"shape\":\"icon\",\"icon\":{\"code\":\"f007\",\"size\":75,\"color\":\"#2B7CE9\"}}}},\"groups\":[\"FALSE\",\"TRUE\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false},\"byselection\":{\"enabled\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"iconsRedraw\":true},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nWe can also generate and plot **bipartite projections** for the\n**two-mode network** : (co-memberships are easy to calculate by\nmultiplying the network matrix by its transposed matrix, or using\nigraph's `bipartite.projection` function)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnet2.bp <- bipartite.projection(net2)\n\n# We can calculate the projections manually as well:\nas_incidence_matrix(net2) %*% t(as_incidence_matrix(net2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    s01 s02 s03 s04 s05 s06 s07 s08 s09 s10\ns01   3   0   0   0   0   0   0   0   0   1\ns02   0   3   0   0   0   0   0   0   1   0\ns03   0   0   4   1   0   0   0   0   1   0\ns04   0   0   1   3   1   0   0   0   0   1\ns05   0   0   0   1   3   1   0   0   0   1\ns06   0   0   0   0   1   3   1   1   0   0\ns07   0   0   0   0   0   1   3   1   0   0\ns08   0   0   0   0   0   1   1   4   1   0\ns09   0   1   1   0   0   0   0   1   3   0\ns10   1   0   0   1   1   0   0   0   0   2\n```\n\n\n:::\n\n```{.r .cell-code}\nt(as_incidence_matrix(net2)) %*% as_incidence_matrix(net2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    U01 U02 U03 U04 U05 U06 U07 U08 U09 U10 U11 U12 U13 U14 U15 U16 U17 U18 U19\nU01   2   1   1   0   0   0   0   0   0   0   1   0   0   0   0   0   0   0   0\nU02   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU03   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU04   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU05   0   0   0   1   1   0   0   0   0   0   0   0   0   0   0   0   0   0   0\nU06   0   0   0   0   0   2   1   1   1   0   0   0   0   0   0   0   0   0   1\nU07   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\nU08   0   0   0   0   0   1   1   1   1   0   0   0   0   0   0   0   0   0   0\nU09   0   0   0   0   0   1   1   1   2   1   1   0   0   0   0   0   0   0   0\nU10   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0   0   0\nU11   1   0   0   0   0   0   0   0   1   1   3   1   1   0   0   0   0   0   0\nU12   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0   0   0   0\nU13   0   0   0   0   0   0   0   0   0   0   1   1   2   1   0   0   1   0   0\nU14   0   0   0   0   0   0   0   0   0   0   0   0   1   2   1   1   1   0   0\nU15   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   0   0   0\nU16   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   2   1   1   1\nU17   0   0   0   0   0   0   0   0   0   0   0   0   1   1   0   1   2   1   1\nU18   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   1\nU19   0   0   0   0   0   1   0   0   0   0   0   0   0   0   0   1   1   1   2\nU20   0   0   0   1   1   1   0   0   0   0   0   0   0   0   0   0   0   0   1\n    U20\nU01   0\nU02   0\nU03   0\nU04   1\nU05   1\nU06   1\nU07   0\nU08   0\nU09   0\nU10   0\nU11   0\nU12   0\nU13   0\nU14   0\nU15   0\nU16   0\nU17   0\nU18   0\nU19   1\nU20   2\n```\n\n\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\n\nplot(\n  net2.bp$proj1,\n  vertex.label.color = \"black\",\n  vertex.label.dist = 2,\n  vertex.label = nodes2$media[!is.na(nodes2$media.type)]\n)\n\nplot(\n  net2.bp$proj2,\n  vertex.label.color = \"black\",\n  vertex.label.dist = 2,\n  vertex.label = nodes2$media[is.na(nodes2$media.type)]\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-69-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n# Calculate projections and add attributes/labels\nproj1 <-\n  as_incidence_matrix(net2) %*% t(as_incidence_matrix(net2)) %>%\n  as_tbl_graph() %>%\n  activate(nodes) %>%\n  left_join(., nodes2, by = c(\"name\" = \"id\"))\nproj2 <-\n  t(as_incidence_matrix(net2)) %*% as_incidence_matrix(net2) %>%\n  as_tbl_graph() %>%\n  activate(nodes) %>%\n  left_join(., nodes2, by = c(\"name\" = \"id\"))\n\n\np1 <- proj1 %>%\n  ggraph(layout = \"graphopt\") +\n  geom_edge_link0() +\n  geom_node_point(size = 6, colour = \"orange\") +\n  geom_node_text(aes(label = media), repel = TRUE)\n\np2 <- proj2 %>%\n  ggraph(layout = \"graphopt\") +\n  geom_edge_link0() +\n  geom_node_point(\n    aes(colour = media.type),\n    size = 6,\n    shape = 15,\n    colour = \"dodgerblue\"\n  ) +\n  geom_node_text(aes(label = media), repel = TRUE)\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-70-1.png){width=2100}\n:::\n:::\n\n\n## 5. Plotting multiplex networks\n\nIn some cases, the networks we want to plot are **multigraphs**: they\ncan have multiple edges connecting the same two nodes. A related\nconcept, **multiplex networks**, contain multiple types of ties -- e.g.\nfriendship, romantic, and work relationships between individuals.\n\nIn our example network, we also have two tie types: hyperlinks and\nmentions. One thing we can do is plot each type of tie separately:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nE(net)$width <- 2\nplot(\n  net,\n  edge.color = c(\"dark red\", \"slategrey\")[(E(net)$type == \"hyperlink\") +\n    1],\n  vertex.color = \"gray40\",\n  layout = layout_in_circle,\n  edge.curved = .3\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-71-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Another way to delete edges using the minus operator:\nnet.m <- net - E(net)[E(net)$type == \"hyperlink\"]\nnet.h <- net - E(net)[E(net)$type == \"mention\"]\n\n# Plot the two links separately:\npar(mfrow = c(1, 2))\n\nplot(net.h,\n  vertex.color = \"orange\",\n  layout = layout_with_fr,\n  main = \"Tie: Hyperlink\"\n)\nplot(net.m,\n  vertex.color = \"lightsteelblue2\",\n  layout = layout_with_fr,\n  main = \"Tie: Mention\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-71-2.png){width=2100}\n:::\n:::\n\n\n-   Make sure the nodes stay in the same place in both plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2), mar = c(1, 1, 4, 1))\n\nl <- layout_with_fr(net)\nplot(net.h,\n  vertex.color = \"orange\",\n  layout = l,\n  main = \"Tie: Hyperlink\"\n)\nplot(net.m,\n  vertex.color = \"lightsteelblue2\",\n  layout = l,\n  main = \"Tie: Mention\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-72-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using tidygraph\n\nlayout <- layout_in_circle(net)\np1 <- tbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  activate(edges) %>%\n  filter(type == \"hyperlink\") %>%\n  # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05) +\n  geom_node_point(aes(size = size),\n    shape = 21,\n    fill = \"orange\"\n  ) +\n  scale_size(range = c(2, 12)) +\n  labs(title = \"Tie: Hyperlink\") +\n  theme(\n    aspect.ratio = 1, ,\n    legend.position = \"bottom\"\n  )\n\np2 <- tbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  activate(edges) %>%\n  filter(type == \"mention\") %>%\n  # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05) +\n  geom_node_point(aes(size = size),\n    shape = 21,\n    fill = \"lightsteelblue2\"\n  ) +\n  scale_size(range = c(2, 12)) +\n  labs(title = \"Tie: Mention\") +\n  theme(aspect.ratio = 1, legend.position = \"bottom\")\n\nwrap_plots(p1, p2, guides = \"collect\") &\n  # note this \"pipe\" for patchwork!\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-73-1.png){width=2100}\n:::\n:::\n\n\nIn our example network, we don't have **node dyads** connected by\nmultiple types of connections (we never have both a 'hyperlink' and a\n'mention' tie between the same two news outlets) -- however that could\nhappen.\n\nNote: See the edges between `s03` and `s10`...these are in opposite\ndirections. So no dyads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout <- layout_in_circle(net)\ntbl_graph(nodes, links, directed = TRUE) %>%\n  activate(nodes) %>%\n  mutate(size = centrality_degree()) %>%\n  # reusing the earlier computed layout\n  ggraph(layout = layout) +\n  geom_edge_arc(strength = 0.05, aes(colour = type)) +\n  geom_node_point(aes(size = size),\n    shape = 21,\n    fill = \"orange\"\n  ) +\n  geom_node_text(aes(label = id), repel = TRUE) +\n  scale_size(range = c(2, 12)) +\n  labs(title = \"Tie: Hyperlink\") +\n  theme(\n    aspect.ratio = 1, ,\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-74-1.png){width=2100}\n:::\n:::\n\n\nOne challenge in visualizing multiplex networks is that multiple edges\nbetween the same two nodes may get plotted on top of each other in a way\nthat makes them impossible to distinguish. For example, let us generate\na simple multiplex network with two nodes and three ties between them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultigtr <- graph(edges = c(1, 2, 1, 2, 1, 2), n = 2)\n\nl <- layout_with_kk(multigtr)\n\n# Let's just plot the graph:\nplot(\n  multigtr,\n  vertex.color = \"lightsteelblue\",\n  vertex.frame.color = \"white\",\n  vertex.size = 40,\n  vertex.shape = \"circle\",\n  vertex.label = NA,\n  edge.color = c(\"gold\", \"tomato\", \"yellowgreen\"),\n  edge.width = 10,\n  edge.arrow.size = 5,\n  edge.curved = 0.1,\n  layout = l\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-75-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# Using tidygraph\nmultigtr %>%\n  as_tbl_graph() %>%\n  activate(edges) %>%\n  mutate(edge_col = c(\"gold\", \"tomato\", \"yellowgreen\")) %>%\n  ggraph(., layout = l) +\n  geom_edge_arc(strength = 0.1, aes(colour = edge_col)) +\n  geom_node_point(size = 4, colour = \"lightsteelblue\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-75-2.png){width=2100}\n:::\n:::\n\n\nBecause all edges in the graph have the same curvature, they are drawn\nover each other so that we only see the last one. What we can do is\nassign each edge a different curvature. One useful function in 'igraph'\ncalled `curve_multiple()` can help us here. For a graph G,\n`curve.multiple(G)` will generate a curvature for each edge that\nmaximizes visibility.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(\n  multigtr,\n  vertex.color = \"lightsteelblue\",\n  vertex.frame.color = \"white\",\n  vertex.size = 40,\n  vertex.shape = \"circle\",\n  vertex.label = NA,\n  edge.color = c(\"gold\", \"tomato\", \"yellowgreen\"),\n  edge.width = 10,\n  edge.arrow.size = 5,\n  edge.curved = curve_multiple(multigtr),\n  layout = l\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-76-1.png){width=2100}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultigtr %>%\n  as_tbl_graph() %>%\n  activate(edges) %>%\n  mutate(edge_col = c(\"gold\", \"tomato\", \"yellowgreen\")) %>%\n  ggraph(., layout = l) +\n  geom_edge_fan(strength = 0.1, aes(colour = edge_col), width = 2) +\n  geom_node_point(size = 4, colour = \"lightsteelblue\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-77-1.png){width=2100}\n:::\n:::\n\n\nAnd that is the end of this reoworked tutorial! Hope you enjoyed it and\nfound it useful!!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../../../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\n<script src=\"../../../../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\n<link href=\"../../../../../site_libs/font-awesome-4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\n<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}