---
title: <iconify-icon icon="healthicons:elderly-outline" width="1.2em" height="1.2em"></iconify-icon> Demo:Product Packaging and Elderly People
order: 10
df-print: paged
categories:
  - colour palettes
  - icons
  - ridge plots
toc: true
editor: 
  markdown: 
    wrap: sentence
---

This is the YAML at the top of this Quarto document. Use `order` to sequence your blog posts, and `df_print` to tidily print your dataframes in the final HTML. 

```yaml
title: <iconify-icon icon="healthicons:elderly-outline" width="1.2em" height="1.2em"></iconify-icon> Demo:Product Packaging and Elderly People
order: 10
df-print: paged
toc: true
editor: 
  markdown: 
    wrap: sentence

```

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false
#| warning: false
library(tidyverse)
library(mosaic)
library(skimr)
library(ggformula)
library(ggridges)
#
library(crosstable)
library(paletteer)
```

```{r}
#| label: pedagogical-packages
#| echo: false
library(downloadthis)
library(glue)
##
###     Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 
#    
```

#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: true
#| code-fold: true
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14, base_family = font) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = font,          #set font family
                   size = 24,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = font,          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = font,          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

## Use available fonts in ggplot text geoms too!
update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)

## Set the theme
theme_set(new = theme_custom())

```


## {{< iconify fxemoji japanesesymbolforbeginner >}} Introduction

As a demonstration Data Analysis flow, I will take a dataset and show the various steps involved in the workflow: data inspection, cleaning, setting up a hypothesis, plotting a chart, and responding to the hypothesis.

::: callout-note
I will repeat the entire code in **every chunk**, so that the whole process is visible in one shot at the end. 
This is not something you should do as a practice. 

:::

This is a dataset pertaining to packaging of groceries, and the difficulty that elderly people face with opening or closing those packages. The study also included people who were experiencing hand pain due to ailments such as arthritis.

## {{< iconify tabler variable >}} Data

The data is available here: Juliá-Nehme, Begoña (2023).
*Usability of Food Packaging in Older Adults.* Figshare Dataset. <https://doi.org/10.6084/m9.figshare.22637656.v1>

And, for you peasants, here too: 

```{r}
#| label: read-data
#| echo: false
#| message: false
library(downloadthis)
opening <- 
  readxl::read_xlsx("../../../../../materials/Data/Usability Test Opening Times.xlsx") 

closing <- readxl::read_xlsx("../../../../../materials/Data/Usability Test Opening Times.xlsx")

opening %>% download_this(output_name = "opening", output_extension = ".csv", button_label = "Click me, peasants!", button_type = "default", icon = "fa fa-save")

closing %>% download_this(output_name = "closing", output_extension = ".csv", button_label = "Click me also, peasants!", button_type = "default", icon = "fa fa-save")

```


```{r}
#| results: hold
opening <- opening %>% janitor::clean_names()
glimpse(opening)
inspect(opening)

```

```{r}
#| results: hold

## janitor is a good package to make clean names out of weird column names
## 
closing <- closing %>% janitor::clean_names()
glimpse(closing)
inspect(closing)

```

## {{< iconify streamline dictionary-language-book-solid >}} Data Dictionary

Several variables are wrongly encoded here, as can be seen.
For instance `group`, and `sex` are encoded as `<dbl>` and need to be converted to `factors` before analysis.
We will write our Data Dictionary based on this understanding, and then convert the variables appropriately. (The full workflow will be shown here for the `opening` dataset; it follows in identical fashion for the `closing` dataset.)

::: callout-note
### Quantitative Variables

-   `hand_strength`(dbl): Hand Strength, numerical
-   `pinch_strength`(dbl): Pinch Strength, numerical
-   `time_jar` (chr) Time to open a jar. **Needs to be (dbl)**
-   `time_beverage`(dbl)Time to open a beverage
-   `time_suace` (chr) Time to open sauce
-   `time_juice` (dbl) Time to open juice
-   `time_milk` (dbl) Time to open milk carton
-   `time_crackers`(dbl)Time to open crackers pack
-   `time_cheese` (dbl) Time to open cheese packet
-   `time_chickpeas` (dbl) Time to open chickpeas packet
-   `time_bottle` (dbl) Time to open a bottle
-   `time_soup`(dbl) Time to open a a can of soup
:::

::: callout-note
### Qualitative Variables

-   `group`(dbl): Groups in the study. Two. Make into (fct).
-   `sex`(dbl): sex of the participant. Make into (fct).
-   `hand_pain`: Did they suffer from hand pain or not? Binary. Make into (fct).
-   `hand_illness`: How different from `hand_pain`?  Make into (fct).
:::

::: callout-note
### Observations

Small dataset of 17 rows.
Several time values have been measured across the same set of subjects, resulting is what is called a "repeat measures" experiment. 
Subjects seem to be in two groups, and with or without hand-pain.
Are these the two groups?
What is the difference between `hand_pain` and `hand_illness`?
:::

## {{< iconify carbon clean >}} Analyse / Transform the Data

We need to first convert all the obvious Qual variables into, well, Qual factors!
A few variables are also obviously Quant, and need to be transformed.
We can also perform counts based on `hand_pain` and `hand_illness` to decide how to deal with them.
And we will not modify the original data !!

```{r}
#| label: data-modified-and-saved
#| echo: true

opening_modified <- opening %>% 
  # correct spelling mistake
  rename("time_sauce" = time_suace) %>% 
  
  # If you want to do this fast!
  mutate(across(contains("time"), as.numeric)) %>% 
# Two "NA" entries exist

  mutate(hand_pain = as_factor(hand_pain),
         hand_illness = as_factor(hand_illness),
         group = as_factor(group),
         sex = as_factor(sex))

opening_modified
glimpse(opening_modified)   

```

Ab theek hai. [Haan, ab theek hai](https://youtu.be/chi9hsfYcDE?t=149)

## Analyse the Data

Let us make some counts wrt Qual variables, and histograms of Quant variables and get used to our data.

```{r}
opening_modified %>% count(sex)
opening_modified %>% count(hand_pain)
opening_modified %>% count(hand_pain, hand_illness)

```

Reasonably balanced groups.
`Hand_pain` and `Hand_illness` are not the same thing, as seen from the 4-fold counts above.

```{r}
#| layout-ncol: 2

theme_set(theme_custom())
##
opening_modified %>% 
  gf_histogram(~ hand_strength, title = "Hand Strength") 
opening_modified %>% 
  gf_histogram(~ pinch_strength, title = "Pinch Strength")
opening_modified %>% 
  gf_histogram(~ time_jar, "Time to open a Jar")
opening_modified %>% 
  gf_histogram(~ time_bottle, title = "Time to open a Bottle")

```

Histograms do not look symmetric, but then we have only 17 observations anyway. Elderly people can't very well be expected to be normal, bless them. 

## {{< iconify  material-symbols lab-research >}} Research Questions

We can create more than one too, and even iteratively, after we have answered the first one and so on.
Let us write two:

::: callout-note
Q1.
Do opening times for groceries vary between people with `hand_pain` and those without?
:::

::: callout-note
Q1.
Do opening times for groceries vary between people of different sex?
:::

## {{< iconify material-symbols:pivot-table-chart-rounded >}} More data transformation

As seen, this data is in *untidy* form: there are several numerical columns that have some "Qual" information embedded in their column names, such as the the *kind of package that is being opened*.
We should transform the data into *long form* so that all the time numbers are stacked up in one column, and the *types of packages* are in another column, called `grocery`.
For more info see <https://www.garrickadenbuie.com/project/tidyexplain/>. 

```{r}
#| label: making-tidy-data-1
opening_modified %>% 
  pivot_longer(cols = -c(1:7),# Choose columns to stack (by negation)
               names_to = "operation", # Name of stack column
               values_to = "times" # Name of values column
)
```

Once we do this, we realize that the word "time" in the column `operation` adds no value, since we want only the grocery involved.


```{r}
#| label: making-tidy-data-2
opening_modified %>% 
  pivot_longer(cols = -c(1:7),
               names_to = "operation",
               values_to = "times") %>%
# knock off that "time" word
  tidyr::separate_wider_delim(cols = operation, 
                              delim = "time_",
  # Rename "operation" column as "grocery", drop the silly column now containing only "_time"
                              names = c(NA,"grocery")) 
```

OK, looking better!
Now if we plot `times`, we can colour or facet by `grocery`.

## First Plot

```{r}
#| label: plot-1
theme_set(theme_custom())
##
opening_modified %>% 
  pivot_longer(cols = -c(1:7),
               names_to = "operation",
               values_to = "times") %>%
# knock off that "time" word
  tidyr::separate_wider_delim(operation, 
                              delim = "time_",
                              names = c(NA,"grocery")) %>% 
## First Plot
  gf_density_ridges(grocery ~ times,
                    fill = "grey70",scale = 0.75) %>% 
  gf_facet_grid(hand_pain ~ .) %>%
  gf_labs(title = "Distribution of Opening and Closing Times",
          subtitle = "For Various Grocery Packagings")

```

Ok!
Not bad!
We now want to label to do two things:

-   label facets `0` and `1` as "Pain" and "No Pain".
-   Reorder the `groceries` so that they are in decreasing order of me(di)an(times).
-   In two steps!!

```{r}
#| label: plot-2
# Set graph theme
theme_set(new = theme_custom())
#
opening_modified %>% 
  pivot_longer(cols = -c(1:7),
               names_to = "operation",
               values_to = "times") %>%
# knock off that "time" word
  tidyr::separate_wider_delim(operation, 
                              delim = "time_",
                              names = c(NA,"grocery")) %>% 
  
# Re-label the factor hand_pain
# Use base::factor() as this command is more clear to me
  mutate(hand_pain = 
           base::factor(hand_pain, 
              levels = c(0,1),
              labels = c("No Hand Pain", "Hand Pain"))) %>% 
## First Plot
  gf_density_ridges(grocery ~ times,
                    fill = "grey70",scale = 0.75) %>% 
  gf_facet_grid(hand_pain ~ .) %>%
  gf_labs(title = "Distribution of Opening and Closing Times",
          subtitle = "For Various Grocery Packagings")

```

And to reorder the groceries in decreasing order of me(di)an (times):

::: callout-warning
This does not seem to be happening at this time. Needs to be checked! Wonder what this chart is thinking...
:::

```{r}
#| label: plot-3
# Set graph theme
theme_set(new = theme_custom())
#
opening_modified %>% 
  pivot_longer(cols = -c(1:7),
               names_to = "operation",
               values_to = "times") %>%
# knock off that "time" word
  tidyr::separate_wider_delim(operation, 
                              delim = "time_",
                              names = c(NA,"grocery")) %>% 
  
# Re-label the factor hand_pain
# Use base::factor() as this command is more clear to me
  mutate(hand_pain = 
           base::factor(hand_pain, 
              levels = c(0,1),
              labels = c("No Hand Pain", "Hand Pain"))) %>% 
## First Plot modified

gf_density_ridges(reorder(
                    grocery,# reorder the grocery var
                    times,# based on times variable
                    FUN = median) # taking the median times
                  ~ times,
                  fill = "grey70",scale = 0.75) %>%
  gf_facet_grid(hand_pain ~ .) %>%
  gf_labs(title = "Distribution of Opening and Closing Times",
          subtitle = "For Various Grocery Packagings")

```

Almost done!
We need to relabel the y-axis name and also add some title and subtitles to our plot.
And maybe add a point on each sub-plot to show the median opening times?

```{r}
#| label: plot-4
#| warning: false
#| message: false

theme_set(theme_custom())
##
opening_modified %>% 
  pivot_longer(cols = -c(1:7),
               names_to = "operation",
               values_to = "times") %>%
# knock off that "time" word
  tidyr::separate_wider_delim(operation, 
                              delim = "time_",
                              names = c(NA,"grocery")) %>% 
  
# Re-label the factor hand_pain
# Use base::factor() as this command is more clear to me
  mutate(hand_pain = 
           base::factor(hand_pain, 
              levels = c(0,1),
              labels = c("No Hand Pain", "Hand Pain"))) %>% 
  
  group_by(grocery, hand_pain) %>% 
## First Plot modified
  gf_density_ridges(reorder(
                      grocery,# reorder the grocery var
                      times, # based on times variable
                      FUN = median) # taking the median times
                    ~ times,
                    fill = "grey70",scale = 0.75) %>% 
  ## Add the median points 
  gf_summary(fun = "median", color = "black", 
             size = 1, 
             geom = "point") %>% 
  ## Facet by hand_pain
  gf_facet_grid(hand_pain ~ .) %>% 
  ## Add titles and labels
  gf_labs(
    title = "Times take by Older People to Open Food Packages",
    x = "Time in seconds", 
    y = "Type of Product",
    caption = "Juliá-Nehme, Begoña (2023). Usability of Food Packaging in Older Adults.\n figshare Dataset.\n https://doi.org/10.6084/m9.figshare.22637656.v1")  

# %>% gf_theme(theme_custom())

```


```{r}
#| eval: false
#| echo: false
theme_set(theme_custom())
##
opening %>% 
  mutate(across(starts_with("time"), as.numeric)) %>% 
  pivot_longer(cols = -c(1:7), names_to = "operation", 
               values_to = "times") %>% 
  
  separate_wider_delim(operation, delim = "time_",
                       names = c(NA,"operation")) %>%
  mutate(operation = str_replace(string = operation, 
            pattern = "suace", replacement = "sauce"),
         hand_pain = factor(hand_pain, levels = c(0,1), 
                            labels = c("No Hand Pain", "Hand Pain"))) %>% group_by(operation, hand_pain) %>% 
  
  gf_density_ridges(reorder(operation, times, FUN = mean) ~ times,
                    fill = "grey70",scale = 0.75) %>% 
  gf_summary(fun = "mean", color = "black", size = 1, geom = "point") %>% 
  gf_facet_grid(hand_pain ~ .) %>% 
  gf_labs(title = "Times take by Older People to Open Food Packages",
           x = "Time in seconds", y = "Type of Product",
          caption = "Juliá-Nehme, Begoña (2023). Usability of Food Packaging in Older Adults.\n figshare Dataset.\n https://doi.org/10.6084/m9.figshare.22637656.v1") 

```

### Closing Times Analysis

Since the `as.numeric` did not work for us in the analysis of `opening` data, I have found and used another function `as_numeric` from the `sjlabelled` package. Sigh. 

```{r}
theme_set(theme_custom())
##
closing %>% 
  mutate(across(starts_with("time"), sjlabelled::as_numeric)) %>% 
  pivot_longer(cols = -c(1:7), names_to = "operation", 
               values_to = "times") %>% 
  
  separate_wider_delim(operation, delim = "time_",
                       names = c(NA,"operation")) %>%
  mutate(operation = str_replace(string = operation, pattern = "suace", replacement = "sauce"),
         hand_pain = factor(hand_pain, levels = c(0,1), 
                            labels = c("No Hand Pain", "Hand Pain"))) %>% group_by(operation, hand_pain) %>% 
  
  gf_density_ridges(reorder(operation, times, FUN = mean) ~ times,
                    fill = "grey70",scale = 0.75) %>% 
  gf_summary(fun = "mean", color = "black", size = 1, geom = "point") %>% 
  gf_facet_grid(hand_pain ~ .) %>% 
  gf_labs(title = "Times take by Older People to Close Food Packages",
           x = "Time in seconds", y = "Type of Product",
          caption = "Juliá-Nehme, Begoña (2023). Usability of Food Packaging in Older Adults.\n figshare Dataset.\n https://doi.org/10.6084/m9.figshare.22637656.v1") 

# %>% 
#   gf_theme(theme_custom())

```

## Task and Discussion

-   Complete the Data Dictionary.
-   Create the graph shown and discuss the following questions:
-   What is the kind of plot used in the chart? A facetted ridge plot with medians marked using points
-   What variables have been used in the chart?
    -   Time on X; Grocery Item on Y; Density on the ridges; Hand Pain for faceting
-   Q1. Do opening times for groceries vary between people with hand_pain and those without?
    -   Yes; the people with hand pain take longer to open the packages (meh, but all right!) While medians are not too different across the two groups, the distribution tails extend longer in the case of hand_pain = YES.
-   Why do that lines abruptly stop towards the right side of the upper half of the chart?
    -   Because the extreme times are shorter across the board for closing, as compared to opening.


## References

1. Colour in R: <https://r-for-artists.netlify.app/labs/04-graphics/04-colors>
1. The `paletteer` package
Over 2500 colour palettes are available in the `paletteer` package. Can you find `tayloRswift`? `wesanderson`? `harrypotter`? `timburton`?

Here are the Qualitative Palettes (searchable):

```{r}
#| echo: false
palettes_d_names %>% reactable::reactable(data = ., filterable = TRUE, minRows = 10)
```

And the Quantitative/Continuous palettes (searchable):

```{r}
#| echo: false
palettes_c_names %>% reactable::reactable(data = ., filterable = TRUE, minRows = 10)
```

Use the commands:

- Qual variable-> colour/fill: 
`scale_colour_paletteer_d(name = "Legend Name", 
                          palette = "package::palette",
                          dynamic = TRUE/FALSE)`
                          
- Quant variable-> colour/fill: `scale_colour_paletteer_c(name = "Legend Name", 
                          palette = "package::palette",
                          dynamic = TRUE/FALSE)`
                          



3. If you want those funky icons at the Section Headers, install [this Quarto Extension](https://github.com/mcanouil/quarto-iconify), and then choosing the icons you want from <https://iconify.design> and using the `iconify` shortcode syntax shown below. 

```{yaml}

{{< iconify fluent-emoji exploding-head >}}
{{< iconify fa6-brands apple width=50px height=10px rotate=90deg flip=vertical >}}
{{< iconify simple-icons:quarto >}}

```
