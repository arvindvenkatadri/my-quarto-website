---
title: <iconify-icon icon="icon-park-outline:change" width="1.2em" height="1.2em"></iconify-icon> Change
subtitle: "Correlations"
author: "Arvind V."
date: 22/Nov/2022
date-modified: "`r Sys.Date()`"
order: 30
abstract: "How one variable changes with another"
image: preview.jpg
image-alt: image from rawpixel.com
categories:
- Correlations  
- Scatter Plots
- Bubble Plots  
- Errorbar Plot
- Heatmaps  
- Regression Lines  
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
webr:
  packages: ['readr', 'tidyr', 'dplyr','mosaic', 'skimr', 'ggformula', 'palmerpenguins','correlation','GGally','corrplot', 'ggExtra','Lock5withR']
  
---

## {{< fa folder-open >}} Slides and Tutorials {#sec-slides-and-tutorials}

|                                                                                           |                                                                                                                  |
|-------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------|
| <a href="./files/correlations.qmd"><i class="fa-brands fa-r-project"></i> Tutorial </a>   | <a href="./files/correlations-interactive.qmd"> <i class="fa-brands fa-r-project"></i> R (Interactive Graphs</a> |


:::: {.pa4}
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["The world says: 'You have needs -- satisfy them. You have as much right as the rich and the mighty. Don't hesitate to satisfy your needs; indeed, expand your needs and demand more.' This is the worldly doctrine of today. And they believe that this is freedom. The result for the rich is isolation and suicide, for the poor, envy and murder."]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}

[ --- Fyodor Dostoevsky]{.f6 .ttu .tracked .fs-normal}
:::
::::

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false
#| warning: false

library(GGally) # Corr plots
library(corrplot) # More corrplots
library(ggExtra) # Making Combination Plots

# library(devetools)
# devtools::install_github("rpruim/Lock5withR")
library(Lock5withR) # Datasets
library(palmerpenguins) # A famous dataset

library(easystats) # Easy Statistical Analysis and Charts
library(correlation) # Different Types of Correlations
# From the easystats collection of packages
##
library(tidyplots) # Easily Produced Publication-Ready Plots
library(tinyplot) # Plots with Base R
library(tinytable) # Elegant Tables for our data


library(ggformula) # Formula based plots
library(mosaic) # Our go-to package
library(skimr) # Another Data inspection package
library(tidyverse) # Tidy data processing and plotting

```

```{r}
#| label: Extra-Pedagogical-Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(TeachHist)
library(TeachingDemos)
library(visualize) # Plot Densities, Histograms and Probabilities as areas under the curve
library(grateful)
library(MKdescr)
library(downloadthis)
library(latex2exp)
#devtools::install_github("mccarthy-m-g/embedr")
library(embedr) # Embed multimedia in HTML files

## Figures
## A. Markdown
##![A nice image.](foo/bar.png){width=300}{#fig-nice}
# This is illustrated well by @fig-nice.
##B. html
##<img src="foo/bar.png" width="300">
##C: knitr
##```{r, out.width="300px"}
##knitr::includegraphics("foo/bar.png")
## ```
## ## Markdown boiler plate stuff!!
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
# Adding download buttons
# Data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
# Existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 
```

#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: true
#| code-fold: true
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14, base_family = font) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = font,          #set font family
                   size = 24,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = font,          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = font,          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

```

```{r}
#| cache: false
#| echo: fenced
#| code-fold: true
## Set the theme
theme_set(new = theme_custom())

## Use available fonts in ggplot text geoms too!
update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)


```


## {{< iconify material-symbols add-chart-outline >}} What graphs will we see today?

| Variable #1 | Variable #2 | Chart Names | Chart Shape |
|:--------:|:--------:|:----------:|:-------------:|
|Quant| Quant|  Scatter Plot | {{< iconify ph chart-scatter-bold size=4x >}} {{< iconify carbon qq-plot size=3x >}} |

Some of the very basic and commonly used plots for data are:

-   Scatter Plot for two variables
-   ~~Contour Plot~~
-   ~~Scatter Plot with Confidence Ellipses~~
-   Pairwise Correlation Plots for multiple variables
-   Correlogram  for multiple variables
-   Heatmap  for multiple variables
-   Errorbar chart  for multiple variables
-   Combination chart with marginal densities


## {{< iconify tabler variable >}} What kind of Data Variables will we choose?

::: column-page-inset-right
```{r}
#| message: false
#| echo: false
#| warning: false

read_csv("../../../../../materials/Data/pronouns.csv") %>% 
  filter(No == "1") %>% 
  tt(theme = "striped")
  
```
:::


## {{< iconify icons8 idea >}} Inspiration

![ScatterPlot Inspiration <http://www.calamitiesofnature.com/archive/?c=559>](Evolution-belief-vs-GDP.jpeg){#fig-scatterplot-inspiration}

Does *belief in Evolution* depend upon the GSP of of the country?
Where is the US in all of this? Does the [Bible Belt](https://www.thoughtco.com/the-bible-belt-1434529) tip the scales here?

And India?

## {{< iconify tabler exchange >}} What is Correlation?

One of the basic Questions we would have of our data is: Does some
variable depend upon another in some way? Does $y$ vary with $x$? A
**Correlation Test** is designed to answer exactly this question.

The word **correlation** is used in everyday life to denote some form of association. We might say that we have noticed a correlation between rainy days and reduced sales at supermarkets. However, in statistical terms we use correlation to denote association between two quantitative variables. We also assume that the association is **linear**, that one variable increases or decreases a fixed amount for a unit increase or decrease in the other. The other technique that is often used in these circumstances is **regression**, which involves estimating the best straight line to summarise the association.


## {{< iconify arcticons tapemeasure >}} Pearson Correlation coefficient

The degree of association is measured by a *correlation coefficient*,
denoted by r. It is sometimes called *Pearson's correlation coefficient* after its originator and is a measure of linear association. (*If a curved line is needed to express the relationship, other and more complicated measures of the correlation must be used.*)

The correlation coefficient is measured on a scale that varies from + 1 through 0 to -- 1. Complete correlation between two variables is
expressed by either + 1 or -1. When one variable increases as the other
increases the correlation is positive; when one decreases as the other
increases it is negative.

In formal terms, the correlation between two variables $x$ and $y$ is
defined as

$$
\rho = E\left[\frac{(x - \mu_{x}) * (y - \mu_{y})}{(\sigma_x)*(\sigma_y)}\right]
$$

where $E$ is the *expectation operator* ( i.e taking mean ). Think of this
as *the average of the products of two scaled variables*.

```{r}
#| echo: false
#| warning: false
#| message: false

set.rseed(1971)
demo_dat <- MKdescr::simCorVars(n = 100, r = 0.8, mu1 = 2, sd1 = 1, mu2 = 0, sd2 = 1,plot = FALSE)
mean_var1 <- mean(demo_dat$Var1)
mean_var2 <- mean(demo_dat$Var2)
demo_dat_sample <- slice_sample(demo_dat, n = 6)
demo_dat %>% 
  gf_point(Var2 ~ Var1, size = 0.5) %>% 
  gf_vline(xintercept = ~ mean(Var1)) %>% 
  gf_hline(yintercept =  ~ mean(Var2)) %>% 
  ## Segments
  gf_segment(data = demo_dat_sample, Var2 + Var2 ~ Var1 + mean_var1, color = "grey80") %>% 
  gf_segment(data = demo_dat_sample, mean_var2 + Var2 ~ Var1 + Var1,color = "grey80")  %>% 
  ## Points
  gf_point(Var2 ~ Var1, data = demo_dat_sample, colour = "grey80", 
           size = 4, shape = "X") %>% 
  
  ## Emphasize point X1
  gf_segment(data = demo_dat_sample, 
        max(Var2) + max(Var2) ~ max(Var1) + mean_var1, 
        color = "dodgerblue",
        arrow = arrow(angle = 30, length = unit(5, "mm"),
      ends = "first", type = "open")) %>% 
  gf_segment(data = demo_dat_sample, mean_var2 + max(Var2) ~ max(Var1) + max(Var1),color = "firebrick",arrow = arrow(angle = 30, length = unit(5, "mm"),
      ends = "last", type = "open"))  %>% 
    gf_point(max(Var2) ~ max(Var1), data = demo_dat_sample, colour = "red", size = 4) %>% 
  ##
  gf_labs(title = "Correlation Coeff Calculation",
          x = "Variable X", y = "Variable Y") %>% 
  gf_refine(annotate(geom='text', x = 3, y= 2.5, 
                     label = TeX("$x_1 - \\mu_{X}$", output='character'), parse=TRUE),
            annotate(geom='text', x = 2.2, y = -2, 
                     label = TeX("$\\mu_{X}$", output='character'), parse=TRUE),
            annotate(geom='text', x = -0.5, y= 0.2, 
                     label = TeX("$\\mu_{Y}$", output='character'), parse=TRUE),
            annotate(geom='text', x = 4.2, y= 1, 
                     label = TeX("$y_1 - \\mu_{Y}$", output='character'), parse=TRUE),
            annotate(geom='text', x = 4.25, y= 2.2, 
                     label = TeX("$(x_1, y_1)$", output='character'), parse=TRUE))


```

::: callout-tip
### Pearson Correlation uses z-scores

We can see $(x-\mu_x)/\sigma_x$ is a centering and scaling of the
variable $x$. Recall from our discussion on [Distributions](../../Modules/26-Densities/index.qmd#iconify-ph-bell-simple-z-duotone-z-scores) that this is called the `z-score` of x.
:::

Pearson correlation *assumes* that the relationship between the two variables is **linear**. There are of course [**many other types of correlation measures**]{.bg-yellow .black}: some which work when this is not so. Type `vignette("types", package = "correlation")` in your Console to see the vignette from the `correlation` package that discusses various types of correlation measures.


## {{< iconify grommet-icons test >}} Case Study-1: `HollywoodMovies2011` dataset

Let us look at the `HollywoodMovies2011` dataset from the `Lock5withR` package. The dataset is also available by clicking the icon below ( in case you are not able to install `Lock5withR`):

```{r, echo = FALSE}
HollywoodMovies2011 %>% download_this(output_name = "HollywoodMovies2011", output_extension = ".csv", button_label = "Hollywood Movies Dataset", button_type = "default", icon = "fa fa-save",   class = "hvr-sweep-to-left")
```

## {{< iconify carbon chart-3d >}} Inspecting the Data

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} glimpse
```{r}
#| label: glimpse-movies
HollywoodMovies2011-> movies
glimpse(movies)

```

### {{< iconify la r-project >}} skimr
```{r}
#| label: skim-movies
#| include: false
skimr::skim(movies)
skimr::skim(movies) %>% 
  tt(theme = "striped")

```

### {{< iconify la r-project >}} mosaic
```{r}
#| label: inspect-movies
#| include: false

movies_describe <- inspect(movies)
##
movies_describe$categorical %>%
  tt(theme = "striped")
##
movies_describe$quantitative %>%
  tt(theme = "striped")

```

### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
HollywoodMovies2011-> movies
glimpse(movies)

```

```{webr-r}
#| label: skim-movies-webr
skimr::skim(movies)

```

```{webr-r}
#| label: inspect-movies-webr

movies_describe <- inspect(movies)
movies_describe$categorical
movies_describe$quantitative

```


:::


::: callout-note
### Business Insights from Data Inspection

`movies` has 136 observations on the following 14 variables.

- `Movie` a factor with many levels
- `LeadStudio` a factor with many levels
- `RottenTomatoes` a numeric vector
- `AudienceScore` a numeric vector
- `Story` a factor with many levels
- `Genre` a factor with levels `Action, Adventure, Animation, Comedy, Drama, Fantasy, Horror, Romance, Thriller.`
- `TheatersOpenWeek` a numeric vector. No. of theatres.
- `BOAverageOpenWeek` a numeric vector. 
- `DomesticGross` a numeric vector. In million USD.
- `ForeignGross` a numeric vector. In million USD.
- `WorldGross` a numeric vector. In million USD.
- `Budget` a numeric vector. In million USD.
- `Profitability` a numeric vector. A ratio
- `OpeningWeekend` a numeric vector. In million USD.

There are no missing values in the *Qual* variables; but some entries in the *Quant* variables are missing. `skim` throws a warning that we may need to examine later. 


:::

Let us look at the *Quant* variables: are these related in anyway? Could the relationship between any two Quant variables also depend upon the level of a *Qual* variable? 


## {{< iconify ph chart-scatter-bold >}} {{< iconify carbon qq-plot >}} Scatter Plots

Which are the numeric variables in `movies`?

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
movies_quant <- movies %>%
  drop_na() %>%
  select(where(is.numeric))
movies_quant

```

### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}

movies_quant <- movies %>%
  drop_na() %>%
  select(where(is.numeric))
movies_quant

```

:::



Now let us plot their relationships.

::: {.column-page-inset-right}

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using ggformula

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggformula-1
#| warning: false
#| eval: false

movies %>% 
  drop_na() %>% 
  gf_point(DomesticGross ~ WorldGross) %>% 
  gf_lm() %>% 
  gf_labs(title = "Scatter Plot",
          subtitle = "Movie Gross Earnings: Domestics vs World")
```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-1
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggformula-2
#| warning: false
#| eval: false

movies %>% 
  drop_na() %>% 
  gf_point(Profitability ~ OpeningWeekend) %>% 
  gf_lm() %>% 
  gf_labs(title = "Scatter Plot",
          subtitle = "Movies: Does Opening Week Earnings indicate Profitability?")
```

:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-2
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggformula-3
#| warning: false
#| eval: false

movies %>% 
drop_na() %>% 
  gf_point(RottenTomatoes ~ AudienceScore) %>% 
  gf_lm() %>% 
  gf_labs(title = "Scatter Plot",
          subtitle = "Movie Ratings: Tomatoes vs Audience")
```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-3
#| echo: false
```
:::
::::



We can split some of the scatter plots using one or other of the Qual variables. For instance, is the relationship between the two ratings the same, regardless of movie genre?

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggformula-4
#| warning: false
#| eval: false

movies %>%
  drop_na() %>%
  gf_point(RottenTomatoes ~ AudienceScore, 
           color = ~ Genre) %>%
  gf_lm() %>% 
  gf_labs(title = "Scatter Plot",
          subtitle = "Movie Ratings: Trends by Genre")
```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-4
#| echo: false
```
:::
::::

### Using ggplot

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggplot-1
#| warning: false
#| eval: false

movies %>% 
  drop_na() %>% 
  ggplot(aes(x = DomesticGross,y = WorldGross)) + 
  geom_point() + 
  geom_lm() + 
  labs(title = "Scatter Plot",
       subtitle = "Movie Gross Earnings: Domestics vs World")
```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-1
#| echo: false
```
:::
::::


:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggplot-2
#| warning: false
#| eval: false

movies %>% 
  drop_na() %>% 
  ggplot(aes(OpeningWeekend,Profitability)) + 
  geom_point() + 
  geom_lm() + 
  labs(title = "Scatter Plot",
       subtitle = "Movies: Does Opening Week Earnings indicate Profitability?")
```

:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-2
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggplot-3
#| warning: false
#| eval: false

movies %>% 
  drop_na() %>% 
  ggplot(aes(AudienceScore,RottenTomatoes)) + 
  geom_point() + 
  geom_lm() +
  labs(title = "Scatter Plot",
       subtitle = "Movie Ratings: Tomatoes vs Audience")
```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-3
#| echo: false
```
:::
::::


:::: {.columns}
:::{.column}
```{r}
#| label: scatter-plot-ggplot-4
#| warning: false
#| eval: false

movies %>%
  drop_na() %>%
  ggplot(aes(RottenTomatoes, AudienceScore, color = Genre)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Scatter Plot",
       subtitle = "Movie Ratings: Trends by Genre")

```
:::
:::{.column}
```{r}
#| ref.label: scatter-plot-ggformula-4
#| echo: false
```
:::

::::


### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}

movies %>% 
  drop_na() %>% 
  gf_point(DomesticGross ~ WorldGross) %>% 
  gf_lm(title = "Scatter Plot",
        subtitle = "Movie Gross Earnings: Domestics vs World")
```

```{webr-r}

movies %>% 
  drop_na() %>% 
  gf_point(Profitability ~ OpeningWeekend) %>% 
  gf_lm(title = "Scatter Plot",
        subtitle = "Movies: Does Opening Week Earnings indicate Profitability?")

```

```{webr-r}

movies %>% 
  drop_na() %>% 
  gf_point(RottenTomatoes ~ AudienceScore) %>% 
  gf_lm(title = "Scatter Plot",
        subtitle = "Movie Ratings: Tomatoes vs Audience")

```

```{webr-r}
## We can split some of the scatter plots using one or other of the Qual variables. For instance, is the relationship between the two ratings the same, regardless of movie genre?

movies %>%
  drop_na() %>%
  gf_point(RottenTomatoes ~ AudienceScore, 
           color = ~ Genre) %>%
  gf_lm() %>% 
  gf_labs(title = "Scatter Plot",
          subtitle = "Movie Ratings: Trends by Genre")

```



:::

::::


:::callout-note
### Business Insight from `movies` scatter plots
We have fitted a **trend line** to each of the scatter plots.

- `DomesticGross` and `World Gross` are related, though there are fewer movies at the high end of `DomesticGross`...
- `AudienceScore` and `RottenTomatoes` seem clearly related...both increase together.
- `OpeningWeek` and `Profitability` are also related in a linear way. There are just **two** movies which have been extremely profitable..but they do not **influence** the slope of the trend line too much, because of their location midway in the range of `OpeningWeek`. Influence is something that is a key concept in Linear Regression. 
- By and large, there are only small variations in slope across `Genre`s.

:::
 
::: {.content-hidden when-format="html"}

## {{< iconify gis contour-map >}} 2D Density Plot

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using ggformula

```{r}
#| layout-ncol: 2

movies %>% 
  drop_na() %>%
  gf_density_2d(WorldGross ~ DomesticGross) %>% 
  gf_point() %>%
  gf_lm() %>% 
  gf_labs(title = "2D Density Plot",
        subtitle = "Movie Gross Earnings: Domestics vs World")
##
movies %>% 
  drop_na() %>%
  gf_density_2d(Profitability ~ OpeningWeekend) %>% 
  gf_point() %>%
  gf_lm() %>% 
  gf_labs(title = "2D Density Plot",
          subtitle = "Movies: Does Opening Week Earnings indicate Profitability?")

```

```{r}

movies %>% 
  drop_na() %>%
  gf_density_2d(RottenTomatoes ~ AudienceScore) %>% 
  gf_point() %>%
  gf_lm(title = "2D Density Plot",
        subtitle = "Movie Ratings: Tomatoes vs Audience")

```

### Using ggplot

```{r}
#| layout-ncol: 2

movies %>% drop_na() %>%
  ggplot(aes(DomesticGross, WorldGross)) + 
  geom_density_2d() + 
  geom_point() + 
  geom_lm() + 
  labs(title = "2D Density Plot",
       subtitle = "Movie Gross Earnings: Domestics vs World")
##
movies %>% drop_na() %>%
  ggplot(aes(OpeningWeekend,Profitability)) +
  geom_density2d() + 
  geom_point() + 
  geom_lm() + 
  labs(title = "2D Density Plot",
       subtitle = "Movies: Does Opening Week Earnings indicate Profitability?")

```

### 2D Densities with Stat Ellipese

```{r}

movies %>% drop_na() %>%
  ggplot(aes(AudienceScore, RottenTomatoes)) + 
  geom_density_2d(bins = 30) + 
  geom_point() + 
  stat_ellipse(level = 0.95, colour = "grey", linewidth = 1) + 
  stat_ellipse(level = 0.68, colour = "firebrick", linewidth = 1) +   
  geom_lm() + 
  labs(title = "2D Density Plot with Stat Ellipses",
       subtitle = "Movie Ratings: Tomatoes vs Audience")

```

:::

How might we interpret these 2D densities? Take a look at the diagram below. Which of the images matches the densities from or `movie` data?

![](../../../../../materials/images/contour_lines.jpeg)

:::callout-note
### Business Insight from `movies` 2D plots
We can imagine the 2D density plot as a 3-dimensional structure, like hills/mountains, and these are depicted by the contour lines. The more concentrated and aligned these contours, the more likely that there would be significant correlation between the two. 

In the plot above, we can see two such areas of concentration and these
are also aligned roughly along a line.
:::


:::



::: callout-important
## Independent and Dependent Variables
Note that we have rather *arbitrarily* taken `AudienceScore` as the independent variable, to be plotted on the `x-axis`, and `RottenTomatoes` on the `y-axis`. It could easily have been the other way around, based on our Research Question. Datasets are gathered with specific Research Hypotheses in mind, so check the help file and also with the person who gathered the data about what variable they are interested in!
:::


## {{< iconify flat-color-icons workflow >}} Quantizing Correlation

So we see that there are visible relationships between Quant variables. How do we **quantize** this relationship, into a **correlation score**?

There are two ways: using the `GGally` and `corplot` packages, and doing
a formal **correlation test** with the `mosaic` package. 

::: {.column-page-inset-right}

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using GGally

By default, [`GGally::ggpairs()`](https://ggobi.github.io/ggally/reference/ggpairs.html) provides:\

-   two different comparisons of each pair of columns
-   displays either the density or count of the respective variable
    along the diagonal. 
-   With different parameter settings, the diagonal can be replaced with
    the axis values and variable labels.\
    
:::: {.columns}
:::{.column}
```{r}
#| label: pairs-chart-1
#| eval: false
#| message: false
#| warn: false

GGally::ggpairs(
  movies %>% drop_na(),
  # Select Quant variables only for now
  columns = c(
    "RottenTomatoes", "AudienceScore", "DomesticGross","ForeignGross"),
  
  switch = "both",
  # axis labels in more traditional locations(left and bottom)
  
  progress = FALSE,
  # no compute progress messages needed
  
  # Choose the diagonal graphs (always single variable! Think!)
  diag = list(continuous = "barDiag"),
  # choosing histogram,not density
  
  # Choose lower triangle graphs, two-variable graphs
  lower = list(continuous = wrap("smooth", alpha = 0.3, se = FALSE)),
  
  title = "Movies Data Correlations Plot #1"
)


```
:::

:::{.column}

```{r}
#| ref.label: pairs-chart-1
#| echo: false
```
:::

::::


:::callout-note

### Business Insight from Pairs Plot#1
- As we saw earlier from the Scatter Plot, `AudienceScore` and `RottenTomatoes` are well correlated, with a correlation score of $0.833$
- `DomesticGross` and `ForeignGross` are also extremely well correlated, with a score of $0.873$. 
- Both these correlation scores are highly significant, with three stars. (We will speak of significance in a while.)
- None of the other *pairs* of variables have good correlation scores. 
- Note in passing that both the "Gross" related variables have highly skewed distributions. That is the nature of the movie business!

:::


Let us also try a few other variables, related to budget and profits. For instance, it would be interesting to see the relationship between `Budget` and `Profitability` and even either of the "gross" earnings and `Profitability`.  

:::: {.columns}

:::{.column}
```{r}
#| label: pairs-chart-2
#| eval: false
#| message: false
#| warn: false

GGally::ggpairs(
  movies %>% drop_na(),
  # Select Quant variables only for now
  columns = c(
    "Budget", "Profitability", "DomesticGross", "ForeignGross"),
  
  switch = "both",
  # axis labels in more traditional locations(left and bottom)
  
  progress = FALSE,
  # no compute progress messages needed
  
  # Choose the diagonal graphs (always single variable! Think!)
  diag = list(continuous = "barDiag"),
  # choosing histogram,not density
  
  # Choose lower triangle graphs, two-variable graphs
  lower = list(continuous = wrap("smooth", alpha = 0.3, se = FALSE)),
  
  title = "Movies Data Correlations Plot #2"
)

```
:::
:::{.column}
```{r}
#| ref.label: pairs-chart-2
#| echo: false
```
:::
::::

:::callout-note
### Business Insight from Pairs Plot #2
- The `Budget` variable has good correlation scores with `DomesticGross` and `ForeignGross`
- `Profitability` and `Budget` seem to have a very slight negative correlation, but this does not appear to be significant. 
:::


### Using corrplot

In this chart, the correlation between pairs of variables is shown
*symbolically* as coloured shapes or colours. Circles, Squares, and
Ellipse for example.

-   The size, colour, and "orientation" of the shapes in question
    symbolically represent the strength and polarity of the correlation scores.
-   The direction of the semi-major axis + the colour of the ellipse
    indicate whether the correlation score is positive or negative;
-   And the more *eccentric* the ellipse, the higher is the correlation
    score in value.

::: callout-note
Whereas `GGally` **computes** the correlation scores, `corplot` "merely" displays them in an evocative way. We need to compute the correlations a priori.
:::

Note also:

::: callout-tip

R package `corrplot` provides a visual exploratory tool on correlation
matrix that supports **automatic variable reordering** to help detect hidden patterns among variables. `corrplot` is very easy to use and provides a rich array of plotting options in visualization method, graphic layout, color, legend, text labels, etc. It also provides `p-values` and `confidence intervals` to help users determine the **statistical significance** of the correlations.

:::

```{r}
#| label:  cor-matrix
#| message: false
#| warning: false

# library(corrplot)
mydata_cor <- cor(movies_quant)
mydata_cor %>% 
  knitr::kable(caption = "Correlation Scores Matrix")
```

:::: {.columns}
:::{.column}
```{r}
#| label:  cor-plot-1
#| eval: false
#| warning: false
#| message: false
## View the matrix
corrplot::corrplot(mydata_cor, method = "number", 
         number.cex = 0.6,
         cl.cex = 0.6, tl.cex = 0.6)
```
:::
:::{.column}
```{r}
#| ref.label: cor-plot-1
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label:  cor-plot-2
#| eval: false
#| warning: false
#| message: false
# Default plot with circles
corrplot(mydata_cor, 
         method = "circle",                  
         main = "Correlogram with Circles")
```
:::
:::{.column}
```{r}
#| ref.label: cor-plot-2
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label:  cor-plot-3
#| eval: false
#| warning: false
#| message: false
# Ellipse plot
corrplot(mydata_cor, 
                   method = "ellipse",
                   main = "Correlogram with Ellipes")
```
:::
:::{.column}
```{r}
#| ref.label: cor-plot-3
#| echo: false
```
:::
::::

:::: {.columns}
:::{.column}
```{r}
#| label:  cor-plot-4
#| eval: false
#| warning: false
#| message: false
# Heatmap
corrplot(mydata_cor, method = "color", ## US Spelling only
         main = "Correlogram")
```
:::
:::{.column}
```{r}
#| ref.label: cor-plot-4
#| echo: false
```
:::
::::


:::: {.columns}
:::{.column}
```{r}
#| label:  cor-plot-5
#| eval: false
#| warning: false
#| message: false

# Heatmap with numbers
corrplot.mixed(mydata_cor, 
               lower = "color", number.cex = 0.6,
               cl.cex = 0.6, tl.cex = 0.6,
               upper = "number",
               tl.pos = "l",
               main = "Heatmap?")
```
:::
:::{.column}
```{r}
#| ref.label: cor-plot-5
#| echo: false
```
:::
::::

:::callout-note
### Business Insights from corplots
- Most of the variables here have positive correlations, many of them are significant

:::

:::

::::

### Doing a Correlation Test

Correlations scores can be obtained by conducting a formal test in R. We will use the `mosaic` function `cor_test` to get these results:

```{r}

mosaic::cor_test(Profitability ~ Budget, data = movies) %>% 
  broom::tidy() %>% 
  knitr::kable(digits = 2,
               caption = "Movie Profitability vs Budget")

mosaic::cor_test(DomesticGross ~ Budget, data = movies) %>% 
  broom::tidy() %>% 
  knitr::kable(digits = 2,
               caption = "Movie Domestic Gross vs Budget")

mosaic::cor_test(ForeignGross ~ Budget, data = movies) %>% 
  broom::tidy() %>% 
  knitr::kable(digits = 2,
               caption = "Movie Foreign Gross vs Budget")
```

::: callout-note

## Business Insights from Correlation Tests
The `budget` and `profitability` are not well correlated, sadly. We see this from the `p.value` which is $0.34$ and the confidence values for the correlation `estimate` which also cover $0$.

However, both `DomesticGross` and `ForeignGross` are well correlated with `Budget`. Look at the `p.value` (=0) and the confidence intervals which are unipolar. 

:::


### {{< iconify carbon chart-error-bar-alt >}} The ErrorBar Plot for Correlations

As stated earlier, in our dataset we have a specific `dependent` or `target` variable, which represents the outcome of our experiment or our business situation. The remaining variables are usually `independent` or `predictor` variables. A very useful thing to know, and to view, would be the correlations of *all* independent variables. Using the `correlation` package from the `easystats` family of R packages, this can be very easily achieved. 
Let us quickly do this for the familiar `mtcars` dataset: we will quickly `glimpse` it, identify the target variable, and plot the correlations: 

```{r}
glimpse(mtcars)

## Target variable: mpg
## Calculate all correlations
cor <- correlation::correlation(mtcars)
cor

```

We see correlation between **all pairs** of variables. We need to choose just those with target variable `mpg`: 

::: {.column-page-inset-right}

:::: {.columns}
:::{.column}
```{r}
#| label:  error-bar-plot
#| eval: false
#| warning: false
#| message: false

cor %>% 
# Filter for target variable `mpg` and plot
  filter(Parameter1 == "mpg") %>% 
  gf_point(r ~ reorder(Parameter2, r), size = 4) %>% 
  gf_errorbar(CI_low + CI_high ~ reorder(Parameter2, r), 
              width = 0.5) %>% 
  gf_hline(yintercept = 0, color = "grey", linewidth = 2) %>% 
  gf_labs(title = "Correlation Errorbar Chart",
          subtitle = "Target variable: mpg",
          x = "Predictor Variable",
          y ="Correlation Score with mpg")

```

:::

:::{.column}
```{r}
#| ref.label: error-bar-plot
#| echo: false
```
:::

::: callout-note
### Business Insights from ErrorBar Plot
- Several variables are negatively correlated and some are positively correlated with 'mpg`. (The grey line shows "zero correlation")
- Since none of the error bars straddle zero, the correlations are mostly significant. 
:::

::::


### {{< iconify carbon qq-plot >}} {{< iconify fluent bezier-curve-square-12-regular rotate="90deg" >}} A New Combination Plot...

Sometimes, a simple scatter, or density alone, or viewed next to one another is not adequate to develop, or convey, our insight. We might just need a combination density + scatter plot. Such a plot can be be constructed from the ground up using `ggformula` or `ggplot`; however, there is a nice package called `ggExtra` that allows the creation of a powerful combination plot:

```{r}
#| label: Scatter-Plot-with-Marginal-Densities
#| warning: false
#| message: false

penguins %>% 
  drop_na() %>% 
  gf_point(body_mass_g  ~ flipper_length_mm, colour = ~ species) %>% 
  gf_smooth(method = "lm") %>% 
  gf_labs(x = "Flipper Length", y = "Body Mass in gms", title = "Penguins Scatter Plot", subtitle = "With Marginal Densities", caption = "Using ggExtra") %>%
  gf_refine(scale_colour_brewer(palette = "Accent")) %>% 
  gf_labs(title = "Scatter Plot with Marginal Densities") %>% 
  ggExtra::ggMarginal(type = "density", groupColour = TRUE, 
                      groupFill = TRUE, margins = "both") 

```


## An Interactive Correlation Game

Head off to this interactive game website where you can play with correlations!

<https://openintro.shinyapps.io/correlation_game/>

## Simpson's Paradox

<iframe width="100%" height="500" frameborder="0"
  src="https://observablehq.com/embed/@observablehq/plot-linear-regression-simpson?cell=*"></iframe>
  
See how the overall correlation/regression line slopes upward, whereas that for the individual groups slopes downward!! This is an example of Simpson's Paradox!

## {{< iconify bi person-up >}} Your Turn

1.  Try to play this online [Correlation Game](https://openintro.shinyapps.io/correlation_game/).

::: callout-note
### 2. School Expenditure and Grades.

{{< downloadthis data/CASchools.csv dname="CASchools" label="Download the School Data" icon="database-fill-down" type="info" >}}
:::

::: callout-note
### 3. Gas Prices and Consumption

As described [here](https://vincentarelbundock.github.io/Rdatasets/doc/AER/OECDGas.html). Note the `log-transformed` Quant data...why do you reckon this was done in the data set itself?

{{< downloadthis data/OECDGas.csv dname="OECDGas" label="Download the Gas Consumption Data" icon="database-fill-down" type="info" >}}
:::

::: callout-note
### 4. [Horror Movies](https://notawfulandboring.blogspot.com/2024/04/using-pulse-rates-to-determine-scariest.html) (Bah.You awful people..)

{{< downloadthis data/HorrorMoviedata.csv dname="HorrorMoviedata" label="Download the Horror Movie Data" icon="database-fill-down" type="info" >}}
:::

::: callout-note
### 6. [Food Delivery Times](https://vincentarelbundock.github.io/Rdatasets/doc/modeldata/deliveries.html)

{{< downloadthis data/deliveries.csv dname="deliveries" label="Download the Food Delivery Data" icon="database-fill-down" type="info" >}}
:::

## {{< iconify mingcute thought-line >}} Wait, But Why?

-   Scatter Plots, when they show "linear" clouds, tell us that there is some relationship between two Quant variables we have just plotted
-   If so, then if one is the [target variable](https://orangedatamining.com/blog/machine-learning-jargon/) you are trying to [**design for**]{style="background: yellow;"}, then the other [independent, or controllable, variable](https://www.scribbr.com/methodology/independent-and-dependent-variables/) is something you might want to [**design with**]{style="background: yellow;"}.

:::callout-important
Target variables are usually plotted on the Y-axis, while Predictor variables are on the X-Axis, in a Scatter Plot. Why?
Because $y = mx + c$ ! 
:::

-  Correlation scores are good indicators of things that are, well, related. While one variable may not necessarily **cause** another, a good correlation score may indicate how to chose a good predictor.
- That is something we will see when we examine [Linear Regression](../../../Modelling/Modules/LinReg/index.qmd)
-   Always, always, plot and test your data! Both numerical summaries as tables, and graphical summaries as charts, are necessary! See below!!

::: callout-warning
### And How about these datasets?

```{r}
#| label: datasaurus
#| echo: false
#| message: false
library(tidyverse)
library(datasauRus)
##
datasaurus_dozen %>%
group_by(dataset) %>%
summarize(
mean_x    = mean(x),
mean_y    = mean(y),
std_dev_x = sd(x),
std_dev_y = sd(y),
corr_x_y  = cor(x, y)) %>% tt(theme = "striped")

datasaurus_dozen %>%
  ggplot(aes(x, y)) +
  geom_point() + theme_minimal() + 
  facet_wrap(~ dataset, ncol = 6) + 
  coord_fixed()

```

Yes, you did want to plot that cute T-Rex, didn't you? Here is the data then!!

```{r, echo = FALSE}
datasaurus_dozen %>% download_this(output_name = "datasaurus", output_extension = ".csv", button_label = "DataSaurus Dirty Dozen", button_type = "default", icon = "fa fa-save",   class = "hvr-sweep-to-left")
```
:::

::: callout-warning
-   Can selling more ice-cream make people drown?
-   Use your head about pairs of variables. Do not fall into this [trap](https://pedermisager.org/blog/why_does_correlation_not_equal_causation/))
:::



## {{< iconify fluent-mdl2 decision-solid >}} Conclusions

Scatter Plots give a us sense of change; whether it is linear or non-linear. We can get an idea of correlation between variables with a scatter plot. Our workflow for evaluating correlations between target variable and several other predictor variables uses several packages such as `GGally`, `corrplot`, `correlation`, and of course `mosaic` for correlation tests.

## {{< iconify eos-icons ai >}} AI Generated Summary and Podcast

This document focusses on correlation between quantitative variables. It examines different ways to visualize correlations, including scatter plots and correlograms. The document provides examples of how to use R packages like `GGally` and `corrplot` to create these visualizations and `correlation tests` to assess the strength and significance of relationships between variables. The tutorial uses the `HollywoodMovies2011` and `mtcars` datasets as examples to demonstrate these concepts.
<br><br>
<center>
```{r}
#| echo: false
embedr::embed_audio("../../../../../materials/audio/change.wav")

``` 
</center>


## {{< iconify ooui references-ltr >}} References

1. Winston Chang (2024). *R Graphics Cookbook*. <https://r-graphics.org>
1. Minimal R using `mosaic`.
    <https://cran.r-project.org/web/packages/mosaic/vignettes/MinimalRgg.pdf>\
1. Antoine Soetewey. *Pearson, Spearman and Kendall correlation coefficients by hand* <https://www.r-bloggers.com/2023/09/pearson-spearman-and-kendall-correlation-coefficients-by-hand/>\
1. Taiyun Wei, Viliam Simko. *An Introduction to corrplot Package*.
<https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html>\


::: {#refs style="font-size: 60%;"}

###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",cite.tidyverse = FALSE, dependencies = FALSE,
  pkgs = c("corrplot", "datasauRus","GGally", "ggExtra", "latex2exp")
) %>%
  knitr::kable(format = "simple")

```


:::





