---
title: <iconify-icon icon="wpf:survey" width="1.2em" height="1.2em"></iconify-icon> Surveys
subtitle: "Extra Cheese with my 5-insect pizza, please!"
author: "Arvind V."
date: 27/Dec/2022
date-modified: "`r Sys.Date()`"
abstract: Surveys, Questions, and Responses
order: 45
image: ../../../../../materials/images/rural-survey.jpg
categories:
- Proportions
- Likert Scale data
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
webr:
  packages: ['readr', 'dplyr','mosaic', 'skimr', 'ggformula','GGally','kableExtra', 'vcd', 'vcdExtra', 'ggmosaic', 'resampledata', 'ggstats', 'labelled', 'ggpubr']
---

![Rural Survey](../../../../../materials/images/rural-survey.jpg){#fig-rural-survey}



:::: {.pa4}
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["It is not that we have so little time but that we lose so muchâ€¦The life we receive is not short but we make it so; we are not ill provided but use what we have wastefully."]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}

[ --- Seneca]{.f6 .ttu .tracked .fs-normal}
:::
::::

## {{< iconify noto-v1 package >}} Setting up R Packages {#sec-setting-up-r-packages}

```{r}
#| label: setup
#| include: true
#| message: false

library(vcd) # Michael Friendly's package, Visualizing Categorical Data
library(vcdExtra) # Categorical Data Sets
library(resampledata) # More datasets

library(ggstats) # Likert Scale Plots
library(labelled) # Creating Labelled Data for Likert Plots
library(sjPlot) #Another package for Likert Plots

## Making Tables
library(kableExtra) # html styled tables
library(tinytable) # Elegant Tables for our data
library(tidyplots) # Easily Produced Publication-Ready Plots
library(tinyplot) # Plots with Base R
#
library(mosaic) # Our trusted friend
library(skimr)
library(tidyverse)

```

```{r}
#| echo: false
library(checkdown)
library(epoxy)
# library(TeachHist)
# library(TeachingDemos)
library(grateful)

```


## {{< iconify icons8 idea >}} Inspiration

To be Found !!


#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: true
#| code-fold: true
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14, base_family = font) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = font,          #set font family
                   size = 24,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = font,          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = font,          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

```

```{r}
#| cache: false
#| echo: fenced
#| code-fold: true
## Set the theme
theme_set(new = theme_custom())

## Use available fonts in ggplot text geoms too!
update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)


```


## {{< iconify fe beginner >}} What graphs will we see today?

| Variable #1 | Variable #2 | Chart Names |                    "Chart Shape"                   |
|:-------------:|:--------------:|:------------------:|:--------------------:|
|    Qual   |    Qual     |  Likert Plots | ![Bipolar Scale by Aenne Brielmann from <a href="https://thenounproject.com/browse/icons/term/bipolar-scale/" target="_blank" title="Bipolar Scale Icons">Noun Project</a> (CC BY 3.0)](../../../../../materials/images/noun-bipolar-scale-139097.png) |

## {{< iconify tabler variable >}} What kind of Data Variables will we choose?

::: column-page-inset-right
```{r}
#| message: false
#| echo: false
#| warning: false
read_csv("../../../../../materials/Data/pronouns.csv") %>% 
  filter(No == "3") %>% 
  tt(theme = "striped")
  
```
:::


## {{< iconify mdi food-processor-outline >}} How do these Chart(s) Work?

In many business and design situations, we perform say *customer surveys* to get
[Likert Scale](https://www.simplypsychology.org/likert-scale.html) data,
where several respondents rate a product or a service on a scale of
`Very much like`, `somewhat like`, `neutral`, `Dislike` and
`Very much dislike,` for example. These are then plotted in a chart to get a distribution of opinions for each question in the survey. Some examples of Likert Scales are shown below.


![Likert Scale Questionnaire Samples](../../../../../materials/images/likert-scales.png){#fig-likert-scales}

As seen, we can use Likert Scale based questionnaire for a variety of aspects in our survey instruments.


## {{< iconify fluent likert-16-regular >}} Plots for Survey Data

How does this data look like, and how does one plot it? Let us consider a fictitious example, followed by a real world dataset.

## {{< iconify grommet-icons test >}} Case Study-1: A fictitious app Survey dataset

::: callout-note
### A fictitious QuickEZ app

We are a start-up that has an app called **QuickEZ** for delivery of
groceries. We conduct a survey of 200 people at a local store, with the
following questions,

1.  "Have your heard of the QuickEZ app?"
2.  "Do you use the QuickEZ app?"
3.  "Do you find it easy to use the QuickEZ app?"
4.  "Will you continue to use the QuickEZ app?"

where each questions is to be answered on a scale of : "always",
"often", "sometimes","rarely", "never".
:::

Such data may look for example as follows:

```{r}
#| column: body-outset-right
#| layout: [[40],[-5],[55]]
#| echo: false

set.seed(42)
score_labels = c("never","rarely", "often", "always") 
question_labels <- c("Have your heard of the QuickEZ app?",
                     "Do you use the QuickEZ app?",
                     "Do you find it easy to use the QuickEZ app?",
                     "Will you continue to use the QuickEZ app?")
quickez_data <- 
  # Create toy survey data
  # 200 responses to 5 questions
  # responses on Likert Scale
  # "always", "often", "rarely", "never"
  tibble(q1 = mosaic::sample(score_labels, replace = TRUE, size = 200,
                             prob = c(0.2, 0.2, 0.4, 0.2)),
         q2 = mosaic::sample(score_labels, replace = TRUE, size = 200,
                             prob = c(0.3, 0.2, 0.2, 0.3)),
         q3 = mosaic::sample(score_labels, replace = TRUE, size = 200,
                             prob = c(0.2, 0.1, 0.1, 0.6)),
         q4 = mosaic::sample(score_labels, replace = TRUE, size = 200,
                             prob = c(0.4, 0.2, 0.1, 0.3))) %>%
  
# Need to mutate before set_variable_level???Why??
   mutate(across(everything(), ~ factor(.x, levels = score_labels))) %>% 
  
  # Set VARIABLE labels
  labelled::set_variable_labels(q1 = question_labels[1],
                                q2 = question_labels[2],
                                q3 = question_labels[3],
                                q4 = question_labels[4]) 

quickez_data %>%   head(10) %>% 
  kbl(caption = "First 10 Responses", centering = TRUE) %>%
  kable_classic_2(html_font = "Cambria", full_width = F) %>% 
  kable_styling(bootstrap_options = c("striped", "hover", "responsive"))
str(quickez_data)

```

The columns here correspond to the 4 questions (q1-q4) and the rows
contain the 200 responses, which have been coded as (1:4). Such data is
also a form of *Categorical data* and we need to count and plot counts
for each of the survey questions. Such a plot is called a **Likert
plot** and it looks like this:

```{r}
#| echo: false

quickez_data %>%
  gglikert(sort = "asc", width = 0.5, totals_size = 3,
           add_labels = T, labels_size = 3,
           reverse_likert = F, ) +
  labs(title = "QuickEZ App Survey Results") +
  geom_vline(xintercept = 0) + 
  theme_custom() + 
  theme(legend.position = "bottom")

```

Based on this chart, since it looks like about 40% the survey
respondents have not heard of our app, we need more publicity, and many do not find it easy to use ðŸ˜¿, so we have serious re-design and user
testing to do !! But at least those who have managed to get past the
hurdles are stating they will continue to use the app, so it does the
job, but we can make it easier to use.

## {{< iconify grommet-icons test >}} Case Study-2: EUROFAM Survey dataset

Here is another example of Likert data from the *healthcare industry*.

`efc` is a German data set from a European study titled [**EUROFAM
study**](https://doi.org/10.1093/geront/48.6.752), on *family care of
older people*. Following a common protocol, data were collected from
national samples of approximately 1,000 family carers (i.e. caregivers)
per country and clustered into comparable subgroups to facilitate
cross-national analysis. The *research questions* in [**this EUROFAM
study**](https://doi.org/10.1093/geront/48.6.752) were:

> 1.  To what extent do family carers of older people use support
>     services or receive financial allowances across Europe? What kind
>     of supports and allowances do they mainly use?
>
> 2.  What are the main difficulties carers experience accessing the
>     services used? What prevents carers from accessing unused supports
>     that they need? What causes them to stop using still-needed
>     services?
>
> 3.  In order to improve support provision, what can be understood
>     about the service characteristics considered crucial by carers,
>     and how far are these needs met? and,
>
> 4.  Which channels or actors can provide the greatest help in
>     underpinning future policy efforts to improve access to
>     services/supports?

We will select the variables from the `efc` data set that related to
*coping* (on part of care-givers) and plot their responses after
inspecting them:

```{r}

data(efc, package = "sjPlot")
glimpse(efc)

```

```{r}
#| layout-nrow: 2
#| column: body-outset-right

efc %>% 
  select(dplyr::contains("cop")) %>% 
  head(20) 
##
efc %>% 
  select(dplyr::contains("cop")) %>% 
  str()

```

The `cop`ing related variables have responses on the Likert Scale
`(1,2,3,4)` which correspond to `(never, sometimes, often, always)`,
**and** each variable also has a `label` defining each variable. The
labels are actually ( and perhaps usually ) the *questions* in the
survey.

We can plot this data using the `gglikert` function from package `ggstats`:

```{r}
#| message: false
#| warning: false
efc %>% 
  select(dplyr::contains("cop")) %>% 
  gglikert(labels_size = 3, width = 0.75) +
  labs(title = "Caregiver Survey from EUROFAM") + 
  scale_fill_brewer(name = "Responses",
    labels = c("never", "sometimes", "often", "always"), 
    palette = "Set3", direction = -1) +
  theme(legend.position = "bottom") + theme_custom()

```


Many questions here have strong *negative* responses. This may indicate
that policy and publicity related efforts may be required.


## {{< iconify fluent-emoji label >}} Labelled Data

Note how the y-axis has been populated with **Survey Questions**: this
is an example of a *labelled dataset*, where not only do the variables
have *names* i.e. column names, but also have longish text **labels**
that add information to the data variables. The **data values** ( i.e
scores) in the columns is also **labelled** as per the the Likert scale
(`Like/Dislike/Strongly Dislike` OR `never/sometimes/often/always`) etc.
These **Likert scores** are usually a set of contiguous integers.

::: callout-note
## Variable Labels and Value Labels

**Variable label** is human readable description of the variable. R
supports rather long variable names and these names can contain even
spaces and punctuation but short variables names make coding easier.
Variable label can give a nice, long description of variable. With this
description it is easier to remember what those variable names refer
to.\

**Value labels** are similar to variable labels, but value labels are
descriptions of the values a variable can take. Labeling values means we
don't have to remember if `1=Extremely poor` and `7=Excellent` or
vice-versa. We can easily get dataset description and variables summary
with info function.
:::

Let us manually create one such dataset, since this is a common-enough
situation[^2] that we have survey data and then have to label the
variables and the values before plotting. We will use the R package `labelled` to label our data.[^1]. 

It is also possible to label the tibble, the columns, and the values in similar fashion using the `sjlabelled` package[^3] and the `labelr` package[^4].

[^1]: Introduction to `labelled`:<https://larmarange.github.io/labelled/articles/intro_labelled.html#using-labelled-with-dplyrmagrittr>

[^2]: Piping Hot Data: Leveraging Labelled Data in R,
    <https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r/>

[^3]: Label Support in
    R:<https://cran.r-project.org/web/packages/sjlabelled/index.html>
    
[^4]: Using the `labelr` package: <https://cran.r-project.org/web/packages/labelr/vignettes/labelr-introduction.html>

```{r}
set.seed(42)
# ggplot2::theme_set(new = theme_classic(base_family = "Roboto Condensed")) # Set consistent graph theme

variable_labels <- c("Do you practice Analytics?",
                     "Do you code in R?",
                     "Have you published your R Code?",
                     "Do you use Quarto as your Workflow in R?",
                     "Will you use R at Work?")
##
value_labels = c("never", "sometimes","often","always") 
##
my_survey_data <- 
  # Create toy survey data
  # 200 responses to 5 questions
  # responses on Likert Scale
  # 1:4 = "never", "sometimes","often","always")

  tibble(q1 = mosaic::sample(value_labels, replace = TRUE, size = 200,
                             prob = c(0.2, 0.2, 0.5, 0.1)),
         q2 = mosaic::sample(value_labels, replace = TRUE, size = 200,
                             prob = c(0.3, 0.3, 0.3, 0.1)),
         q3 = mosaic::sample(value_labels, replace = TRUE, size = 200,
                             prob = c(0.2, 0.1, 0.1, 0.6)),
         q4 = mosaic::sample(value_labels, replace = TRUE, size = 200,
                             prob = c(0.4, 0.2, 0.1, 0.3)),
         q5 = mosaic::sample(value_labels, replace = TRUE, size = 200,
                             prob = c(0.1, 0.2, 0.5, 0.2))) %>%
  
  # Set VARIABLE labels
  labelled::set_variable_labels(.data = ., 
                                q1 = variable_labels[1],
                                q2 = variable_labels[2],
                                q3 = variable_labels[3],
                                q4 = variable_labels[4],
                                q5 = variable_labels[5]) 
  # Values within the variables are already labelled
###
head(my_survey_data, 6)
###
str(my_survey_data)
##
my_survey_data %>% 
  gglikert(labels_size = 3, width = 0.5) +
  labs(title = "Do you use R Survey",
       subtitle = "Creating and Using Labelled Data",
       caption = "Using gglikert from ggstats package") + 
  scale_fill_brewer(palette = "Spectral",
                             name = "Responses",
    labels = c("never", "sometimes", "often", "always"),
      ) +
  geom_vline(xintercept = 0) + 
  theme_custom() + 
  theme(legend.position = "bottom")

```

It seems many people in the survey plan to use R at work!! And have
published R code as well. But Quarto seems to have mixed results! But of
course this is a toy dataset!!

So there we are with Survey data analysis and plots!

There are a few other plots with this type of data, which are useful in
very specialized circumstances. One example of this is the
`agreement plot`[^5] which captures the agreement between two (sets) of
evaluators, on ratings given on a shared ordinal scale to a set of
items. An example from the field of medical diagnosis is the opinions of
two specialists on a common set of patients. However, that is for a more
advanced course!

[^5]: Bangdiwala, S.I., Shankar, V. The agreement chart. BMC Med Res Methodol 13, 97 (2013). https://doi.org/10.1186/1471-2288-13-97

## {{< iconify mingcute thought-line >}} Wait, But Why?

- Likert plots are like stacked bar-charts aligned horizontally, back to back {{< iconify noto open-hands-medium-skin-tone size = 3x >}}. They are useful to indicate aspects like opinion, belief, and habits. 
- The scale for Likert data is [**ordinal**](../05-NatureData/index.qmd#how-do-we-spot-data-variable-types): it should not be assumed that the points on the Likert scale ("never", "sometimes", "often", "always") are *separated by the same distance*. 

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

Likert Plots for Survey data are not too different from Bar Plots; we can view the Likert Charts as a set of stacked bar charts, based on Likert-scale response counts. At a pinch we can make a Likert Plot with vanilla bar graphs, but the elegance  and power of the `ggstat` package is undeniable. The  packages `sjPlot` and `sjlabelled` also feature a `plot_likert` graphing function which is very elegant too. 

## {{< iconify openmoji person >}} Your Turn

1.  Take some of the categorical datasets from the `vcd` and `vcdExtra`
    packages and recreate the plots from this module. Go to <https://vincentarelbundock.github.io/Rdatasets/articles/data.html> and type "vcd" in the `search` box. You can directly load CSV files from there, using `read_csv("url-to-csv")`.

2. Including Edible Insects in our Diet!

{{< downloadthis data/Survey-on-Edible-Insects-likerted-copy.csv dname="edible-insects" label="Download the Edible Insects Dataset" icon="database-fill-down" type="info" >}}

There are several questions here for each "area" of preference for edible insects: experience, fear, concern for the environment, etc. Take all the columns marked as *average* as your data for your Likert Plot. 

## {{< iconify ooui references-ltr >}} References

1. Winston Chang (2024). *R Graphics Cookbook*. <https://r-graphics.org>
1. Shelomi. (2022). Dataset for: *Factors Affecting Willingness and Future Intention to Eat Insects in Students of an Edible Insect Course*. [Data set]. Zenodo. <https://doi.org/10.5281/zenodo.7379294>
1. What is a Likert Scale? <https://www.surveymonkey.com/mp/likert-scale/>
1. Rickards, G., Magee, C., & Artino, A. R., Jr (2012). *You Can't Fix by Analysis What You've Spoiled by Design: Developing Survey Instruments and Collecting Validity Evidence*. Journal of graduate medical education, 4(4), 407â€“410. <https://doi.org/10.4300/JGME-D-12-00239.1>
1. Jamieson, S. (2004). Likert scales: how to (ab)use them. Medical Education, 38(12), 1217â€“1218. <https://doi:10.1111/j.1365-2929.2004.02012.x>Â 
1. Mark Bounthavong. (May 16, 2019). *Communicating data effectively with data visualization â€“ Part 15 (Diverging Stacked Bar Chart for Likert scales)*. <https://mbounthavong.com/blog/2019/5/16/communicating-data-effectively-with-data-visualization-part-15-divergent-stacked-bar-chart-for-likert-scales>
1. Anthony R. Artino Jr., Jeffrey S. La Rochelle, Kent J. Dezee & Hunter
Gehlbach (2014). *Developing questionnaires for educational research: AMEE Guide*. No. 87, Medical Teacher, 36:6, 463-474, DOI:10.3109/0142159X.2014.889814
To link to this article: <https://doi.org/10.3109/0142159X.2014.889814>
1. Naomi B. Robbins, Richard M. Heiberger. *Plotting Likert and Other Rating Scales*. Section on Survey Research Methods â€“ JSM 2011. [PDF Available here](https://www.montana.edu/msse/Old_Data_analysis/Likert%20Survey%20Graphs.pdf)


## {{< iconify streamline book-reading >}} Additional Readings

1. Daniel LÃ¼decke. (2024-05-13). *Plotting Likert Scales with sjPlot*. <https://cran.r-project.org/web/packages/sjPlot/vignettes/plot_likert_scales.html>
1. Joseph Larmarange. *Plot Likert-type items with gglikert()*. <https://cran.r-project.org/web/packages/ggstats/vignettes/gglikert.html>
1. Piping Hot Data. *Leveraging Labelled Data in R*. <https://www.pipinghotdata.com/posts/2020-12-23-leveraging-labelled-data-in-r/\>
1. Bangdiwala, S.I., Shankar, V. *The agreement chart*. BMC Med Res Methodol 13, 97 (2013). <https://doi.org/10.1186/1471-2288-13-97>. Open Access. 

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ggstats", "labelled", "sjPlot")) %>%
  knitr::kable(format = "simple")

```
:::
