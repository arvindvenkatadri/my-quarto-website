---
title: <iconify-icon icon="fluent-mdl2:hour-glass" width="1.2em" height="1.2em"></iconify-icon> Time
date: 15/Dec/2022
date-modified: "`r Sys.Date()`"
abstract: Events, Trends, Seasons, and Changes over Time
subtitle: Time Series
order: 50
categories:
  - Line Graphs
  - Time Series
image: feature.jpg
bibliography: 
  - grateful-refs.bib
citation: true
editor: 
  markdown: 
    wrap: 72
webr:
  packages: ['readr', 'dplyr','lubridate', 'fable', 'fabletools', 'feasts', 'mosaic', 'skimr', 'timetk', 'tsibble', 'tsibbledata','TSstudio', 'ggformula']
---

## {{< fa folder-open >}} Slides and Tutorials {#sec-slides-and-tutorials}

|                                                                                                             |                                                                                                              |
|------------------------------------|------------------------------------|
| <a href="./files/timeseries-wrangling.qmd"><i class="fa-brands fa-r-project"></i>TimeSeries Wrangling</a>   | <a href="./files/timeseries-analysis.qmd"> <i class="fa-solid fa-person-rays"></i> Time Series Analysis-WIP</a>  |


:::: {.pa4}
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["Remember that sometimes not getting what you want is a wonderful stroke of luck."]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}

[ --- Dalai Lama XIV]{.f6 .ttu .tracked .fs-normal}
:::
::::


## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| message: false

library(fpp3)

# Wrangling
# library(tsibble) # loads with ffp3
# library(tsibbledata) # loads with fpp3

# devtools::install_github("FinYang/tsdl")
library(tsdl)
library(TSstudio)
library(timetk)
library(tsbox)
library(gghighlight) # Highlight specific parts of charts
library(ggtime) # Mitchell Ohara-Wild June 2025
##
library(mosaic)
library(ggformula) # Our Formula based graphing package
library(skimr)
# library(lubridate)  # Deal with dates. Loads with tidyverse
library(tidyverse)

```

The `fpp3` packages loads a good few other packages:

```{r}
#| echo: false
fpp3_packages(include_self = FALSE)

```

```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(grateful)
library(kableExtra)
library(gfonts)
library(downloadthis)
## Markdown boiler plate stuff!!
# ![An Elephant](elephant.png){#fig-elephant}
# This is illustrated well by @fig-elephant.
# 
# ### Figure Panel Divs
#     ::: {#fig-elephants layout-ncol=2}
#     ![Surus](surus.png){#fig-surus}
#     ![Hanno](hanno.png){#fig-hanno}
#      Famous Elephants
#     :::
#     
#Adding download buttons
#     data that has been read in
#     {{< downloadthis ../../../../materials/Data/housing_train.csv dname="house_prices" label="Download the House Prices Dataset" icon="database-fill-down" type="info" >}}
#    existing file
#    {{< downloadthis Orange/grouped-summaries.ows dname="grouped_summaries" label="Download the Orange Workflow" icon="database-fill-down" type="info" >}} 
####
#    library(downloadthis)
# 
# mtcars %>%
#   download_this(
#     output_name = "mtcars dataset",
#     output_extension = ".csv",
#     button_label = "Download data as csv",
#     button_type = "default",
#     has_icon = TRUE,
#     icon = "fa fa-save"
#   )
#    
```

#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: true
#| code-fold: true
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14, base_family = font) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = font,          #set font family
                   size = 24,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = font,          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = font,          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

```

```{r}
#| cache: false
#| echo: fenced
#| code-fold: true
## Set the theme
theme_set(new = theme_custom())

## Use available fonts in ggplot text geoms too!
update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)


```






## {{< iconify fxemoji japanesesymbolforbeginner >}} What graphs will we see today?

| Variable #1 | Variable #2 | Chart Names |                    Chart Shape    | 
|:-------------:|:--------------:|:------------------:|:--------------------:|:------:|
|    Quant    |    Qual   | Line Chart, CandleStick Plot, Heatmap| {{< iconify flowbite chart-line-down-outline size=4x >}} {{< iconify teenyicons candle-chart-solid size=4x >}} {{< iconify carbon heat-map-03 size=4x >}}|

## {{< iconify tabler variable >}} What kind of Data Variables will we choose?

::: column-page-inset-right
```{r}
#| message: false
#| echo: false
#| warning: false
read_csv("../../../../../materials/Data/pronouns.csv") %>% 
  filter(No == "1" | No == "4") %>% 
  kbl() %>%
  kable_paper("hover", full_width = T)
  
```
:::

## {{< iconify icons8 idea >}} Inspiration

Shown below are the temperatures over time in two US cities:

<iframe width="100%" height="514" frameborder="0" src="https://observablehq.com/embed/f274bd3d517cf495?cells=LineChart">

</iframe>

Where would need ACs in all rooms? And heaters?

## {{< iconify openmoji japanese-symbol-for-beginner >}} Introduction

Any metric that is measured over regular time intervals forms a **time
series**. Analysis of Time Series is commercially important because of
industrial need and relevance, especially with respect to Forecasting
(Weather data, sports scores, population growth figures, stock prices,
demand, sales, supply...). 

What can we do with Time Series? As with other datasets, we have to
begin by answering fundamental questions, such as:

1.  What are the **types** of time series?
2.  How do we **visualize** time series?
3.  How might we **summarize** time series to get aggregate numbers, say
    by week, month, quarter or year?
4.  How do we **decompose** the time series into level, trend, and
    seasonal components?
5.  How might we make a **model** of the underlying process that creates
    these time series?
6.  How do we make useful **forecasts** with the data we have?

We will first look at the **multiple data formats** for time series in
R. Alongside we will look at the R packages that work with these formats
and create graphs and measures using those objects. Then we examine
*data wrangling* of time series, where we look at packages that offer
`dplyr`-like ability to group and summarize time series using the `time`
variable. We will finally look at obtaining the *components* of the time
series and try our hand at *modelling and forecasting*.

## {{< iconify game-icons time-synchronization >}} {{< iconify flat-color-icons line-chart >}} Time Series Formats, Conversion, and Plotting

There are multiple formats for time series data. The ones that we are
likely to encounter most are:

-   [The **ts** format]{.underline}: We may simply have a single series
    of measurements that are made over time, stored as a **numerical
    vector**. The `stats::ts()` function will convert a numeric vector
    into an R time series `ts` object, which is the most basic time
    series object in R. The base-R `ts` object is used by established
    packages `forecast` and is also supported by newer packages such as
    `tsbox`.

-   [The **tibble** format]{.underline}: the simplest and most familiar
    data format is of course the standard tibble/data frame, with or
    without an explicit `time` column/variable to indicate that the
    other variables vary with time. The standard tibble object is used
    by many packages, e.g. `timetk` & `modeltime`.

-   [The **tsibble** format]{.underline}: this is a new format for time
    series analysis. The special `tsibble` object ("time series tibble")
    is used by `fable`, `feasts` and others from the
    [`tidyverts`](https://tidyverts.org/) set of packages.

There are many other `time-oriented` data formats too...[probably too
many](https://xkcd.com/927), such a `tibbletime` and `TimeSeries`
objects. For now the best way to deal with these, should you encounter
them, is to convert them (Using the package
[tsbox](https://docs.ropensci.org/tsbox/)) to a `tibble` or a `tsibble`
and work with these.

![Standards](https://imgs.xkcd.com/comics/standards.png){fig-align="center"}

To start, we will use simple `ts` data first, and then do another with a
"vanilla" `tibble` format that we can plot *as is*. We will then look at
a `tibble`data that *does have a time-oriented variable*. We will then
perform conversion to `tsibble` format to plot it, and then a final
example with a ground-up `tsibble` dataset.

### {{< iconify vaadin hourglass-start >}} Base-R `ts` format data

There are a few datasets in base R that are in `ts` format already.

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r ts-data}

AirPassengers
str(AirPassengers)

```

### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: str-webr
AirPassengers
str(AirPassengers)

```


:::



This can be easily plotted using base R:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

::::{.columns}
:::{.column}
```{r}
#| label: base-R-ts-plot
#| message: false
#| eval: false

# Base R
plot(AirPassengers)

```
:::
:::{.column}
```{r}
#| ref.label: base-R-ts-plot
#| echo: false
```
:::

::::

### {{< iconify noto-v1 spider-web >}} web-r
```{webr-r}
#| label: ts-plot-webr
#| message: false
plot(AirPassengers)

```

:::


One can see that there is an upward *trend* and also *seasonal
variations* that also increase over time. This is an example of a
*multiplicative* time series, which we will discuss later.

Let us take data that is "time oriented" but not in `ts` format. We use
the command `ts` to convert a numeric vector to `ts` format: the syntax
of `ts()` is:

Syntax: `objectName <- ts(data, start, end, frequency)`, where,

-   `data` : represents the data vector
-   `start` : represents the first observation in time series
-   `end` : represents the last observation in time series
-   `frequency` : represents number of observations per unit time. For
    example *1=annual, 4=quarterly, 12=monthly, 7=weekly*, etc.

We will pick simple **numerical vector data** ( i.e. not a time series )
`ChickWeight`:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R

```{r}
data(ChickWeight)
str(ChickWeight)
head(ChickWeight)
```

```{r}
# Filter for Chick #1 and for Diet #1
ChickWeight_ts <- ChickWeight %>% 
  dplyr::filter(Chick == 1, Diet ==1) %>% 
  dplyr::select(weight, Time)

## stats::ts does not accept pipe format
ChickWeight_ts <- stats::ts(ChickWeight_ts$weight, 
                            frequency = 2) 
str(ChickWeight_ts)
```

::::{.columns}
:::{.column}
```{r}
#| label: base-chickweight-plot
#| eval: false
plot(ChickWeight_ts) # Using base-R

```
:::
:::{.column}
```{r}
#| ref.label: base-chickweight-plot
#| echo: false
```
:::
::::

### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: ts-using-stats-ts-webr

ChickWeight %>% head()

# Filter for Chick #1 and for Diet #1
ChickWeight_ts <- ChickWeight %>% 
  dplyr::filter(Chick == 1, Diet ==1) %>% 
  dplyr::select(weight, Time)

# stats::ts does not accept pipe format
ChickWeight_ts <- stats::ts(ChickWeight_ts$weight, 
                            frequency = 2) 
str(ChickWeight_ts)

plot(ChickWeight_ts) # Using base-R

```


:::



We see that the weights of a young chick specimen #1 increases over
time.

### {{< iconify mdi table-clock >}} `tibble` data

The `ts` data format can handle *only one time series*; in the above
example, we could not have plotted the weight of two chicks, if we had
wanted to. If we want to plot/analyze multiple time series, based on say
*Qualitative* variables, (e.g. sales figures over time across multiple
*products* and *locations*) we need other data formats. Using the
familiar `tibble` structure opens up new possibilities.\

-   We can have **multiple** **time series** within a tibble (think of
    numerical time-series data like `GDP`, `Population`, `Imports`,
    `Exports` for multiple countries as with the `gapminder`[^1]data we
    saw earlier).

[^1]: https://www.gapminder.org/data/

#### `gapminder` data

```{r}
#| echo: false
library(gapminder)
gapminder %>% select(country, year, gdpPercap, 
                     pop, lifeExp, everything()) %>% 
head(5) %>% 
kbl()

```
-   It also allows for data processing with `dplyr` such as filtering
    and summarizing.\
    
Let us read and inspect in the `US births data` from 2000 to 2014.
Download this data by clicking on the icon below, and saving the
downloaded file in a sub-folder called `data` inside your project.

{{< downloadthis data/US_births_2000-2014_SSA.csv dname="US_births_2000-2014_SSA" label="Download the US Births data" icon="database-fill-down" type="info" >}}

Read this data in and inspect it.

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### {{< iconify la r-project >}} R
```{r}
#| label: using-tibble-data-1
#| message: false

births_2000_2014 <- read_csv("data/US_births_2000-2014_SSA.csv")
glimpse(births_2000_2014)
inspect(births_2000_2014)
skim(births_2000_2014)
births_2000_2014

```


### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
births_2000_2014 <- read.csv("https://raw.githubusercontent.com/fivethirtyeight/data/master/births/US_births_2000-2014_SSA.csv")
glimpse(births_2000_2014)
inspect(births_2000_2014)
skim(births_2000_2014)
head(births_2000_2014)

```

:::


This is just a `tibble` containing a single data variable `births` that
varies over time. All other variables, although depicting time, are
*numerical columns* and not explicitly *time columns*. There are no
Qualitative variables (yet!).

#### Plotting `tibble`-oriented time data

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

##### Using ggformula

We will now plot this using `ggformula`. Using the separate
`year/month/week` and `day_of_week / day_of_month` columns, we can plot
births over time, colouring by `day_of_week`, for example:

::::{.columns}
:::{.column}
```{r}
#| label: using-ggformula-1
#| eval: false

## Set the theme
theme_set(new = theme_custom())

# grouping by day_of_week
births_2000_2014 %>% 
  gf_line(births ~ year, 
          group = ~ day_of_week, 
          color = ~ day_of_week) %>% 
  gf_point(title = "Births, By Day of Week", 
           subtitle = "Over the Years") %>% 
  gf_refine(scale_colour_distiller(palette = "Paired")) 

# Grouping by date_of_month
births_2000_2014 %>% 
  gf_line(births ~ year, 
          group = ~ date_of_month, 
          color = ~ date_of_month) %>% 
  gf_point(title = "Births, By Date of Month",
           subtitle = "Over the Years") %>% 
  gf_refine(scale_colour_distiller(palette = "Paired")) 


```
:::


:::{.column}
```{r}
#| ref.label: using-ggformula-1
#| echo: false
```

:::
::::


Not particularly illuminating. This is because the data is **daily** and
we have considerable variation over time, and here we have too much data
to visualize.

**Summaries** will help, so we could calculate the the **mean births per
month** in each year and plot that:

```{r}
#| label: using-tibble-data-3
#| message: false
#| layout-ncol: 2
## Set the theme
theme_set(new = theme_custom())

births_2000_2014_monthly <- births_2000_2014 %>% 
  
# Convert month to factor/Qual variable!
# So that we can have discrete colours for each month
# Using base::factor()
# Could use forcats::as_factor() also

  mutate(month = base::factor(month, labels = month.abb)) %>%

# `month.abb` is a built-in dataset containing names of months.

  group_by(year, month) %>% 
  summarise(mean_monthly_births = mean(births, na.rm = TRUE))
births_2000_2014_monthly

####
births_2000_2014_monthly %>% 
##
  gf_line(mean_monthly_births ~ year, 
          group = ~ month, 
          colour = ~ month, linewidth = 1) %>% 
##
  gf_point(size = 1.5, 
           title = "Summaries of Monthly Births over the years") %>% 
  
## palette for 12 colours
  gf_refine(scale_colour_brewer(palette = "Paired")) 


```

::: callout-note
These are graphs *for the same month each year*: we have a January graph
and a February graph and so on. So...average births per month were
higher in all months during 2005 to 2007 and have dropped since.
:::

We can do similar graphs using `day_of_week` as our basis for grouping,
instead of month:

```{r}
#| message: false
#| warning: false
#| layout-ncol: 2
## Set the theme
theme_set(new = theme_custom())

births_2000_2014_weekly <- births_2000_2014 %>% 
  mutate(day_of_week = base::factor(day_of_week,
          levels = c(1,2,3,4,5,6,7), 
          labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))) %>% 
  group_by(year, day_of_week) %>% 
  summarise(mean_daily_births = mean(births, na.rm = TRUE))
##
births_2000_2014_weekly
##
births_2000_2014_weekly %>%   
  gf_line(mean_daily_births ~ year, 
          group = ~ day_of_week, 
          colour = ~ day_of_week, 
          linewidth = 1,
          data = .) %>% 
  gf_point(size = 2, title = "Births over the Years by Day of Week") %>% 
  # palette for 12 colours
  gf_refine(scale_colour_brewer(palette = "Paired")) 


```

##### Using ggplot

We will now plot this using `ggplot` for completeness. Using the
separate `year/month/week` and `day_of_week / day_of_month` columns, we
can plot births over time, colouring by `day_of_week`, for example:

```{r}
#| label: using ggplot
#| layout-ncol: 2

## Set the theme
theme_set(new = theme_custom())

# grouping by day_of_week
births_2000_2014 %>% 
  ggplot(aes(year, births,
             group = day_of_week, 
             color = day_of_week)) + 
  geom_line() +  
  geom_point() +
  labs(title = "Births, By Day of Week",
       subtitle = "Over the Years") + 
  scale_colour_distiller(palette = "Paired")
##

# Grouping by date_of_month
births_2000_2014 %>% 
  ggplot(aes(year,births,color = date_of_month,
             group = date_of_month)) + 
  geom_line() + 
  geom_point() + 
  labs(title = "Births, By Date of Month",
       subtitle = "Over the Years") + 
  scale_colour_distiller(palette = "Paired") 

```

```{r}
#| label: using-tibble-data-3b
#| message: false
#| layout-ncol: 2
## Set the theme
theme_set(new = theme_custom())

births_2000_2014_monthly <- births_2000_2014 %>% 
  
# Convert month to factor/Qual variable!
# So that we can have discrete colours for each month
# Using base::factor()
# Could use forcats::as_factor() also
  mutate(month = base::factor(month, labels = month.abb)) %>%
# `month.abb` is a built-in dataset containing names of months.

  group_by(year, month) %>% 
  summarise(mean_monthly_births = mean(births, na.rm = TRUE))
births_2000_2014_monthly

births_2000_2014_monthly %>% 
  ggplot(aes(year, mean_monthly_births,
             group = month, 
             colour = month)) + 
  geom_line(linewidth = 1) + 
  geom_point(size = 1.5) + 
  labs(title = "Summaries of Monthly Births over the years") + 
    
  # palette for 12 colours
  scale_colour_brewer(palette = "Paired") 


```

```{r}
#| message: false
#| warning: false
#| layout-ncol: 2
## Set the theme
theme_set(new = theme_custom())

births_2000_2014_weekly <- births_2000_2014 %>% 
  mutate(day_of_week = base::factor(day_of_week,
          levels = c(1,2,3,4,5,6,7), 
          labels = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"))) %>% 
  group_by(year, day_of_week) %>% 
  summarise(mean_daily_births = mean(births, na.rm = TRUE))
births_2000_2014_weekly

births_2000_2014_weekly %>%
  ggplot(aes(year, mean_daily_births, 
             group = day_of_week,
             colour = day_of_week)) + 
  geom_line(linewidth = 1) + 
  geom_point(size = 2) + 
    
  # palette for 12 colours
  scale_colour_brewer(palette = "Paired") +  
  labs(title = "Births over the Years by Day of Week")


```
:::


#### {{< iconify gravity-ui cubes-3-overlap  >}} Small Multiples using gghighlight

Instead of looking at multiple overlapping time series graphs, we could split these up into `small multiples` or *facets* and **still retain** the overall picture that is offered by the overlapping graphs. The trick here is the **highlight** one of the graphs at a time, while keeping *all other* graphs in the background. We can do this with the `gghighlight` package.

:::{.column-body-outset-right}

::::{.columns}
:::{.column}
```{r}
#| label: gghighlight-1
#| eval: false
## Set the theme
theme_set(new = theme_custom())

#library(gghighlight)
births_2000_2014_monthly
###
births_2000_2014_monthly %>% ggplot() + 
  geom_line(aes(y = mean_monthly_births,
                x = year, 
                group = month)) +
  labs(x = "Year", y  ="Mean Monthly Births over the Years", 
       title = "Mean Births by Month", 
       caption = "Using gghighlight package") +

### Add highlighting
  gghighlight(
    use_direct_label = F,
    unhighlighted_params = list(colour = alpha("grey85", 1))) +
  
### Add faceting
  facet_wrap(vars(month))

```
:::
:::{.column}
```{r}
#| ref.label: gghighlight-1
#| echo: false
```

:::
::::

::::{.columns}
:::{.column}
```{r}
#| label: gghighlight-2
#| eval: false
## Set the theme
theme_set(new = theme_custom())

births_2000_2014_weekly
###
births_2000_2014_weekly %>% ggplot() + 
  geom_line(aes(y = mean_daily_births, x = year, group = day_of_week)) +
  labs(x = "Year", y  ="Mean Daily Births over the Years", 
       title = "Mean Births by Day of Week", 
       caption = "Using gghighlight package") +

### Add highlighting
  gghighlight(
    use_direct_label = F,
    unhighlighted_params = list(colour = alpha("grey85", 1))) +
  
### Add faceting
  facet_wrap(vars(day_of_week))

```

:::
:::{.column}
```{r}
#| ref.label: gghighlight-2
#| echo: false
```

:::
::::

:::

::: callout-note
### Why are fewer babies born on weekends?

Looks like an interesting story here...there are significantly fewer
births on average on Sat and Sun, over the years! Why? Should we watch
[Grey's Anatomy](https://www.hotstar.com/in/tv/greys-anatomy/14823) ?

And more births in September? That should be a no-brainer!! `r emoji::emoji("laugh")`
:::

::: callout-important
Note that this is still using just `tibble` data, without converting it
into a `time series` format. So far we are simply treating the
`year/month/day` variables are simple variables and using `dplyr` to
group and summarize. We have not created an explicit `time` or `date`
variable.
:::

#### Plotting `tibble` time-series

Now, we *can* convert the time-oriented columns in this dataset into a
single `date` variable, giving us a proper tibble time-series:

```{r}
births_tibble_timeseries <- 
  births_2000_2014 %>%
  mutate(date = lubridate::make_date( year, month, date_of_month)) %>%

## Drop off the individual columns ( year, month, day_of_month)
  select(date, births)

births_tibble_timeseries

```

Note that we have a proper `date` formatted column, as desired. This is
a single time series, but if we had other Qualitative variables such as
say `city`, we could easily have had multiple series here. We can plot
this with `ggformula/ggplot` as we have done before, and with now with
`timetk`:

```{r}
#| eval: false
#| include: false
## Set the theme
theme_set(new = theme_custom())

births_tibble_timeseries %>%
  gf_line(births ~ date)

births_tibble_timeseries %>%
  ggplot(aes(date, births)) + geom_line()

```

::::{.columns}
:::{.column}
```{r}
#| label: time-series-timetk
#| eval: false

## Set the theme
theme_set(new = theme_custom())

births_tibble_timeseries %>%
  timetk::plot_time_series(
    .date_var = date, 
    .value = births, 
    .interactive = FALSE, 
    .title = "Births over Time",
    .x_lab = "Time",
    .y_lab = "Births")
```
:::
:::{.column}
```{r}
#| ref.label: time-series-timetk
#| echo: false
```

:::
::::
### {{< iconify icon-park database-time >}} `tsibble` data

Finally, we have `tsibble` ("time series tibble") format data, which
contains three main components:

-   an `index` variable that defines **time**;
-   a set of `key` variables, usually **categorical**, that define sets
    of observations, over time. This allows for each combination of the
    categorical variables to define a **separate time series**.
-   a set of **quantitative** variables, that represent the quantities
    that vary with time (i.e `index`)

Here is Robert Hyndman's video introducing tsibbles:

{{< video https://youtu.be/EwjvA2OcdHs >}}

The package `tsibbledata` contains several ready made `tsibble` format
data. Run `data(package = "tsibbledata")` in your Console to find out
about these.

Let us try `PBS`, which is a dataset containing
Monthly Medicare prescription data in Australia.

```{r}
#| label: PBS
#| message: true
data(PBS, package = "tsibbledata")
PBS
glimpse(PBS)

```

### Data Dictionary
:::callout-note
[Data Description:]{.underline} This is a large-ish dataset.Run `PBS`
in your console)

-   67K observations
-   336 combinations of `key` variables (`Concession`, `Type`, `ATC1`,
    `ATC2`) which are categorical, as foreseen.
-   Data appears to be *monthly,* as indicated by the `1M`.
-   the time index variable is called `Month`, formatted as `yearmonth`,
    a new type of variable introduced in the `tsibble` package.


Note that there are multiple **Quantitative variables**
(`Scripts`,`Cost`), each sliced into 336 time-series, a feature which is
not supported in the `ts` format, but is supported in a `tsibble`. The
**Qualitative Variables** are described below. (Type `help("PBS")` in
your Console.)

The data is dis-aggregated/grouped using four `keys`:\
- `Concession`: Concessional scripts are given to pensioners,
unemployed, dependents, and other card holders\
- `Type`: Co-payments are made until an individual's script expenditure
hits a threshold (\$290.00 for concession, \$1141.80 otherwise). Safety
net subsidies are provided to individuals exceeding this amount.\
- `ATC1`: Anatomical Therapeutic Chemical index (level 1). 15 types\
- `ATC2`: Anatomical Therapeutic Chemical index (level 2). 84 types,
nested inside `ATC1`.
:::


Let us simply plot `Cost` over time:

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}
### Using ggformula

::::{.columns}
:::{.column}
```{r}
#| label:  PBS-Cost-ggformula
#| eval: false

## Set the theme
theme_set(new = theme_custom())

PBS %>%
  gf_point(Cost ~ Month, data = .) %>% 
  gf_line(title = "PBS Costs vs time", caption = "ggformula") 

```
:::
:::{.column}
```{r}
#| ref.label: PBS-Cost-ggformula
#| echo: false
```

:::
::::

### Using ggplot

```{r}
#| label:  PBS-Cost-ggplot

# Set graph theme
theme_set(new = theme_custom())

PBS %>% 
  ggplot(aes(Month, Cost)) + 
  geom_point() + 
  geom_line() + 
  labs(title = "PBS Costs vs time", caption = "ggplot")

```

### Using timetk

```{r}
## Set the theme
theme_set(new = theme_custom())

PBS %>%
  timetk::plot_time_series(.date_var = Month, .value = Cost, 
                           .interactive = FALSE,
                           .smooth = FALSE)
```
:::

This basic plot is quite messy. Other than an overall rising trend and
more vigorous variations pointing to a multiplicative process, we cannot
say more. There is simply too much happening here and it is now time
(sic!) for us to look at summaries of the data using `dplyr`-like verbs.

We will do that in the @sec-slides-and-tutorials.

## {{< iconify carbon heat-map-03 >}} Time Series Heatmaps

How about a heatmap? We can cook up a categorical variable based on the
number of births (low, fine, high) and use that to create a heatmap:

::::{.columns}
:::{.column}
```{r}
#| label:  births-heat-map
#| eval: false
## Set the theme
theme_set(new = theme_custom())

births_2000_2014 %>%
  mutate(birthrate = case_when(births >= 10000 ~ "high",
                               births <= 8000 ~ "low",
                               TRUE ~ "fine")) %>%
  mutate(birthrate = base::factor(birthrate, 
                                  labels = c("high", "fine", "low"), 
                                  ordered = TRUE)) %>%
  
  gf_tile(
    data = .,
    year ~ month,
    fill = ~ birthrate,
    color = "black"
  ) %>%
  
  gf_refine(scale_x_time(
    breaks = 1:12,
    labels = c("Jan","Feb","Mar","Apr",
               "May","Jun","Jul","Aug",
               "Sep","Oct","Nov","Dec")
  )) %>%
  
  gf_refine(scale_fill_brewer(type = "qual", palette = "OrRd", direction = -1)) 

```

:::
:::{.column}
```{r}
#| ref.label: births-heat-map
#| echo: false
```

:::
::::

Note how both X and Y axis seem to be a `time`-oriented variable in a heatmap!

## {{< iconify icon-park me >}} Your Turn

1.  Choose some of the datasets in the `tsdl` and in the `tsibbledata`
    packages. (Install and load them first! ) Plot basic, filtered and
    model-based graphs for these and interpret.
    
## {{< iconify mingcute thought-line >}} Wait, But Why?

- Many datasets show quantities varying over time. These are called **time-series** data. 
- The X-axis in these cases becomes a `time` axis.
- Time-series data come in many different formats!
- The time-aspect in a dataset creates for two *dimensions* of data-aggregation and averaging: One based on factors as before, and a new one based on intervals of time
- We are interested in **decomposing** a time-series into *averages*, *trends*, *seasonal components*, and random variations
- We are also interested in **modelling** a time-series as additive or multiplicative time-series, using techniques such as Holt-Winters, and ARIMA
- And of course we are interested in forecasting!


## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

We have seen a good few data formats for time series, and how to work
with them and plot them.

In the Tutorial @sec-slides-and-tutorials, we will explore:

-   wrangling with Time series to produce grouped and filtered
    aggregates/summaries and plots with these
-   how to decompose time series into periodic and aperiodic components,
    which can be used to make business decisions.
-   Producing Interactive Plots for Time Series
-   **modelling** and **forecasting** of time series.


## {{< iconify ooui references-ltr >}} References

1. Robert Hyndman, *Forecasting: Principles and Practice (Third
Edition)*.[available online](https://otexts.com/fpp3/)\
2. [Time Series Analysis at Our Coding
Club](https://ourcodingclub.github.io/tutorials/time/)\
1. [The Nuclear Threat---The Shadow Peace, part
1](http://www.fallen.io/shadow-peace/1/)\
1. [11 Ways to Visualize Changes Over Time -- A
Guide](https://flowingdata.com/2010/01/07/11-ways-to-visualize-changes-over-time-a-guide/)\
1. [What is seasonal adjustment and why is it
used?](http://junkcharts.typepad.com/junk_charts/2010/11/what-is-seasonal-adjustment-and-why-is-it-used.html)\
1. [The start-at-zero
rule](http://junkcharts.typepad.com/junk_charts/2005/09/the_startatzero.html)\

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("fpp3", "gghighlight", "timetk","tsbox", "tsdl", "tsibble", 
           "tsibbledata", "TSstudio")
) %>%
  knitr::kable(format = "simple")

```
:::
