---
title: <iconify-icon icon="material-symbols:light-group-rounded" width="1.2em" height="1.2em"></iconify-icon> Groups and Densities
subtitle: ""
author: "Arvind V."
date: 15/Nov/2022
date-modified: "`r Sys.Date()`"
abstract: "Quant and Qual Variable Graphs and their Siblings"
order: 28
image: preview.jpg
image-alt: Image by rawpixel.com
df-print: paged
categories:
- Qual Variables
- Quant Variables
- Box Plots
- Violin Plots
bibliography: 
  - references.bib
  - grateful-refs.bib
citation: true
#suppress-bibliography: true
# editor: 
#   markdown: 
#     wrap: 72
webr:
  packages: ['readr', 'tidyr', 'dplyr','mosaic', 'skimr', 'ggformula','ggridges', 'palmerpenguins']

---
:::{.baskerville}
## {{< fa folder-open >}} Slides and Tutorials
:::
|                                                                                                 |                                                                                                    |                                                                                        |
|------------------------|------------------------|------------------------|
| <a href="./files/distributions.qmd"><i class="fa-brands fa-r-project"></i> R (Static Viz)</a>   | <a href="./files/distributions.rda"> <i class="fa-solid fa-person-rays"></i> Radiant Tutorial</a>  | <a href="../../../../../materials/Data/qdd-data.zip"> <i class="fa-solid fa-database"></i> Datasets</a> |


:::: {.pa4}
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["Keep away from people who try to belittle your ambitions. Small people always do that, but the really great make you feel that you, too, can become great."]{.f5 .f4-m .f3-l .lh-copy .measure .mt0}

[ --- Mark Twain]{.f6 .ttu .tracked .fs-normal}
:::
::::

## {{< iconify noto-v1 package >}} Setting up R Packages

```{r}
#| label: setup
#| include: true
#| message: false
#| warning: false


library(tidyplots) # Easily Produced Publication-Ready Plots
library(tinyplot) # Plots with Base R
library(tinytable) # Elegant Tables for our data
library(mosaic)
library(skimr)
library(ggformula)
library(tidyverse) # Most Important Last


```


```{r}
#| label: Extra Pedagogical Packages
#| echo: false
#| message: false

library(checkdown)
library(epoxy)
library(TeachHist)
library(TeachingDemos)
library(visualize) # Plot Densities, Histograms and Probabilities as areas under the curve
library(grateful)
library(MKdescr)
## Tachyons
## https://tachyons-tldr.vercel.app/#/classes
## https://github.com/dwyl/learn-tachyons
## 
```


#### Plot Fonts and Theme

```{r}
#| label: plot-theme
#| echo: true
#| code-fold: true
#| messages: false
#| warning: false

library(systemfonts)
library(showtext)
## Clean the slate
systemfonts::clear_local_fonts()
systemfonts::clear_registry()
##
showtext_opts(dpi = 96) #set DPI for showtext
sysfonts::font_add(family = "Alegreya",
  regular = "../../../../../../fonts/Alegreya-Regular.ttf",
  bold = "../../../../../../fonts/Alegreya-Bold.ttf",
  italic = "../../../../../../fonts/Alegreya-Italic.ttf",
  bolditalic = "../../../../../../fonts/Alegreya-BoldItalic.ttf")

sysfonts::font_add(family = "Roboto Condensed", 
  regular = "../../../../../../fonts/RobotoCondensed-Regular.ttf",
  bold = "../../../../../../fonts/RobotoCondensed-Bold.ttf",
  italic = "../../../../../../fonts/RobotoCondensed-Italic.ttf",
  bolditalic = "../../../../../../fonts/RobotoCondensed-BoldItalic.ttf")
showtext_auto(enable = TRUE) #enable showtext
##
theme_custom <- function(){ 
    font <- "Alegreya"   #assign font family up front
    
    theme_classic(base_size = 14, base_family = font) %+replace%    #replace elements we want to change
    
    theme(
      text = element_text(family = font),  #set base font family
      
      #text elements
      plot.title = element_text(                 #title
                   family = font,          #set font family
                   size = 24,                    #set font size
                   face = 'bold',                #bold typeface
                   hjust = 0,                    #left align
                   margin = margin(t = 5, r = 0, b = 5, l = 0)), #margin
      plot.title.position = "plot", 
      
      plot.subtitle = element_text(              #subtitle
                   family = font,          #font family
                   size = 14,                   #font size
                   hjust = 0,                   #left align
                   margin = margin(t = 5, r = 0, b = 10, l = 0)), #margin
      
      plot.caption = element_text(               #caption
                   family = font,          #font family
                   size = 9,                     #font size
                   hjust = 1),                   #right align
      
      plot.caption.position = "plot",            #right align
      
      axis.title = element_text(                 #axis titles
                   family = "Roboto Condensed",  #font family
                   size = 12),                   #font size
      
      axis.text = element_text(                  #axis text
                   family = "Roboto Condensed",  #font family
                   size = 9),                    #font size
      
      axis.text.x = element_text(                #margin for axis text
                    margin = margin(5, b = 10))
      
      #since the legend often requires manual tweaking 
      #based on plot content, don't define it here
    )
}

```

```{r}
#| cache: false
#| echo: fenced
#| code-fold: true
## Set the theme
theme_set(new = theme_custom())

## Use available fonts in ggplot text geoms too!
update_geom_defaults(geom = "text",new = list(
  family = "Roboto Condensed",
  face = "plain",
  size = 3.5,
  color = "#2b2b2b"
)
)


```




## {{< iconify fxemoji japanesesymbolforbeginner >}} What graphs will we see today?

| Variable #1 | Variable #2 | Chart Names |                    Chart Shape    | 
|:-------------:|:--------------:|:------------------:|:--------------------:|:------:|
|    Quant    |    (Qual)    |  Violin Plot  | {{< iconify carbon chart-violin-plot size=4x >}} |


## {{< iconify tabler variable >}} What kind of Data Variables will we choose?

::: column-page-inset-right
```{r}
#| message: false
#| echo: false
#| warning: false

read_csv("../../../../../materials/Data/pronouns.csv") %>% 
  filter(No == "1") %>% 
  tt(theme = "striped")
  
```
:::


## {{< iconify icons8 idea >}} Inspiration

```{r}
#| label: inspiration-violin-plot
#| echo: false

library(patchwork)
theme_set(new = theme_custom())

data <- read.table("https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv", header=TRUE, sep=",")

# Data is at wide format, we need to make it 'tidy' or 'long'
data <- data %>% 
  gather(key="text", value="value") %>%
  mutate(text = gsub("\\.", " ",text)) %>%
  mutate(value = round(as.numeric(value),0)) %>%
filter(text %in% c("Almost Certainly","Very Good Chance","We Believe","Likely","About Even", "Little Chance", "Chances Are Slight", "Almost No Chance"))

# Box Plot
p1 <- data %>%
  mutate(text = fct_reorder(text, value)) %>% # Reorder data
  ggplot( aes(x=text, y=value, fill=text, color=text)) +
    geom_boxplot() +
    ggtitle(label = "Box Plots") + 
    scale_fill_brewer(palette = "Set2", aesthetics = c("colour", "fill")) +
    theme(legend.position ="none"
    ) +
    coord_flip() + # This switch X and Y axis and allows to get the horizontal version
    xlab("") +
    ylab("Assigned Probability (%)")

# Violin Plot
p2 <- data %>%
  mutate(text = fct_reorder(text, value)) %>% # Reorder data
  ggplot( aes(x=text, y=value, fill=text, color=text)) +
    ggtitle(label = "Violin Plots") + 
    geom_violin(width=2.1, linewidth=0.2) +
    scale_fill_brewer(palette = "Set2", aesthetics = c("colour", "fill")) +
    theme(legend.position="none"
    ) +
    coord_flip() + # This switch X and Y axis and allows to get the horizontal version
    xlab("") +
    ylab("Assigned Probability (%)")


patchwork::wrap_plots(p1,p2, ncol = 2) + plot_layout(axes = "keep")

```

Which is the plots above is more evocative of the underlying data? The violin plots, which looks like a combo box-plot + density, is probably giving us a greater sense of the spread of the data than the good old box plot.


## {{< iconify mdi food-processor-outline >}} How do these Chart(s) Work?

Often one needs to view **multiple densities** at the same time. Ridge
plots of course give us one option, where we get densities of a *Quant*
variable split by a *Qual* variable. Another option is to generate a
density plot facetted into *small multiples* using a *Qual* variable.

Yet another plot that allows comparison of multiple densities side by
side is a **violin plot**. The violin plot combines the aspects of a
*boxplot*(ranking of values, median, quantiles...) with a superimposed
*density* plot. This allows us to look at medians, means, densities, and
quantiles of a *Quant* variable with respect to another *Qual* variable.
Let us see what this looks like!

```{r}
#| label: fig-normal-violins
#| fig-cap: "Violin Plots for Normal Variables" 
#| echo: false
#| warning: false

theme_set(new = theme_custom())
library(ggnormalviolin)
# Make data
d <- data_frame(
  dist = c("A", "B", "C", "D"),
  dist_mean = c(80, 90, 110, 130),
  dist_sd = c(15, 10, 25, 5)
) %>% 
  mutate(variable = pmap(list(dist_mean, dist_sd), rnorm(500)))

# Make base plot
p <- ggplot(data = d, 
            aes(x = dist,
                mu = dist_mean,
                sigma = dist_sd,
                fill = dist)) +
  theme(legend.position = "none")


# Add normal violins
p + geom_normalviolin(p_lower_tail = 0.05, p_upper_tail = 0.05) +
  labs(title = "Violin Plots of 4 Normal Distributed Variables",
       subtitle = "Means and Standard Deviations are Different",
       caption = glue::glue("Tail Regions are highlighted", " p <= 0.05"),
       x = "Qual Variable Level",
       y = "Quant Variable Values")
```


In @fig-normal-violins, the plots show (very artificial!) distributions of a *single Quant variable* across *levels* of another **Qual variable**. At each level of the Qual variable along the X-axis, we have a violin plot showing the density.

## {{< iconify grommet-icons test >}} Case Study-1: `diamonds` dataset


::: {.column-page-inset-right}

::: {.panel-tabset .nav-pills style="background: whitesmoke;"}

### Using ggformula

:::: {.columns}
::: {.column}

```{r}
#| label: Violin-plots-with-ggformula-1
#| eval: false

gf_violin(price ~ "All Diamonds", data = diamonds, 
          draw_quantiles = c(0,.25,.50,.75)) %>%
  gf_labs(title = "Plot A: Violin plot for Diamond Prices")

```
:::

::: {.column}

```{r}
#| ref.label: Violin-plots-with-ggformula-1
#| echo: false
```
:::
::::



:::: {.columns}
::: {.column}

```{r}
#| label: Violin-plots-with-ggformula-2
#| eval: false

diamonds %>% 
  gf_violin(price ~ cut,
            draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_labs(title = "Plot B: Price by Cut")

```

:::

::: {.column}

```{r}
#| ref.label: Violin-plots-with-ggformula-2
#| echo: false
```
:::
::::

:::: {.columns}
::: {.column}

```{r}
#| label: Violin-plots-with-ggformula-3
#| eval: false

diamonds %>% 
  gf_violin(price ~ cut, 
             fill = ~ cut, 
             color = ~ cut,
             alpha = 0.5,
            draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_labs(title = "Plot C: Price by Cut")
```
:::
::: {.column}

```{r}
#| ref.label: Violin-plots-with-ggformula-3
#| echo: false
```
:::
::::

:::: {.columns}
::: {.column}

```{r}
#| label: Violin-plots-with-ggformula-4
#| eval: false

diamonds %>% 
  gf_violin(price ~ cut, 
             fill = ~ cut, 
             colour = ~ cut,             
             alpha = 0.5,
              draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_facet_wrap(vars(clarity)) %>%
  gf_labs(title = "Plot D: Price by Cut facetted by Clarity") %>%
  gf_theme(theme(axis.text.x = element_text(angle = 45,hjust = 1)))

```

:::
::: {.column}

```{r}
#| ref.label: Violin-plots-with-ggformula-4
#| echo: false
```

:::

::::



### Using ggplot

```{r}
#| label: Violin plots with ggplot
#| layout-ncol: 2

diamonds %>% ggplot() + 
  geom_violin(aes(y = price, x = ""),
              draw_quantiles = c(0,.25,.50,.75)) + # note: y, not x
  labs(title = "Plot A: violin for Diamond Prices")

###
diamonds %>% ggplot() + 
  geom_violin(aes(cut, price),
              draw_quantiles = c(0,.25,.50,.75)) + 
  labs(title = "Plot B: Price by Cut")

###
diamonds %>% ggplot() + 
  geom_violin(aes(cut, price, 
                  color = cut, fill = cut),
              draw_quantiles = c(0,.25,.50,.75),
              alpha = 0.4) +
  labs(title = "Plot C: Price by Cut")

###
diamonds %>% ggplot() + 
  geom_violin(aes(cut, 
                   price, 
                   color = cut, fill = cut), 
              draw_quantiles = c(0,.25,.50,.75),
              alpha = 0.4)  +  
  facet_wrap(vars(clarity)) +
  labs(title = "Plot D: Price by Cut facetted by Clarity") +
  theme(axis.text.x = element_text(angle = 45,hjust = 1))

```


### {{< iconify noto-v1 spider-web >}} web-r

```{webr-r}
#| label: Violin plots with ggformula webr
#| collapse: true

gf_violin(price ~ "", data = diamonds, 
          draw_quantiles = c(0,.25,.50,.75)) %>%
  gf_labs(title = "Plot A: Violin plot for Diamond Prices")

```

```{webr-r}

gf_violin(price ~ cut,
            draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_labs(title = "Plot B: Price by Cut")

```

```{webr-r}

diamonds %>% 
  gf_violin(price ~ cut, 
             fill = ~ cut, 
             color = ~ cut,
             alpha = 0.3,
            draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_labs(title = "Plot C: Price by Cut")

```

```{webr-r}

diamonds %>% 
  gf_violin(price ~ cut, 
             fill = ~ cut, 
             colour = ~ cut,             
             alpha = 0.3,draw_quantiles = c(0,.25,.50,.75)) %>% 
  gf_facet_wrap(vars(clarity)) %>%
  gf_labs(title = "Plot D: Price by Cut facetted by Clarity") %>%
  gf_theme(theme(axis.text.x = element_text(angle = 45,hjust = 1)))

```

```{webr-r}
#| label: Violin plots with ggplot webr
#| layout-ncol: 2
#| collapse: true

diamonds %>% ggplot() + 
  geom_violin(aes(y = price, x = ""),
              draw_quantiles = c(0,.25,.50,.75)) + # note: y, not x
  labs(title = "Plot A: violin for Diamond Prices")

```

```{webr-r}

diamonds %>% ggplot() + 
  geom_violin(aes(cut, price),
              draw_quantiles = c(0,.25,.50,.75)) + 
  labs(title = "Plot B: Price by Cut")

```

```{webr-r}

diamonds %>% ggplot() + 
  geom_violin(aes(cut, price, 
                  color = cut, fill = cut),
              draw_quantiles = c(0,.25,.50,.75),
              alpha = 0.4) +
  labs(title = "Plot C: Price by Cut")

```

```{webr-r}

diamonds %>% ggplot() + 
  geom_violin(aes(cut, 
                   price, 
                   color = cut, fill = cut), 
              draw_quantiles = c(0,.25,.50,.75),
              alpha = 0.4)  +  
  facet_wrap(vars(clarity)) +
  labs(title = "Plot D: Price by Cut facetted by Clarity") +
  theme(axis.text.x = element_text(angle = 45,hjust = 1))

```

:::

::: callout-note
### Business Insights from `diamond` Violin Plots

The distribution for price is clearly *long-tailed* (skewed). The
distributions also vary considerably based on both `cut` and `clarity`.
These *Qual* variables clearly have a large effect on the prices of
individual diamonds.


:::

:::




## {{< iconify mingcute thought-line >}} Wait, But Why?

- Box plots give us an idea of `medians`, `IQR` ranges, and `outliers`. The shape of the density is not apparent from the box.
- Densities give us shapes of distributions, but do not provide visual indication of other metrics like `means` or `medians` ( at least not without some effort)
- Violins help us do both!
- Violins can also be cut in half (since they are symmetric, like [Buddhist Prayer Wheels](https://youtu.be/vjlBZuwyX7U)), then placed horizontally, and combined with both a `boxplot` and a `dot-plot` to give us `raincloud plots` that look like [this](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/). (Yes, there is code over there, which you can reuse.)

![](../../../../../materials/images/polished-penguins-1.png)

## {{< iconify fluent-mdl2 decision-solid >}} Conclusion

-   Histograms, Frequency Distributions, and Box Plots are used for
    Quantitative data variables
-   Histograms "dwell upon" **counts**, **ranges**, **means** and
    **standard deviations**
-   Frequency Density plots "dwell upon" **probabilities** and
    **densities**
-   Box Plots "dwell upon" **medians** and **Quartiles**
-   Qualitative data variables can be plotted as **counts**, using Bar
    Charts, or using Heat Maps
-   Violin Plots help us to visualize multiple distributions at the same
    time, as when we split a *Quant* variable wrt to the *levels* of a
    *Qual* variable.
-   Ridge Plots are **density plots** used for describing one Quant and
    one Qual variable (by inherent splitting)
-   We can split all these plots on the basis of another Qualitative
    variable.(Ridge Plots are already split)
-   Long tailed distributions need care in visualization and in
    inference making!

## {{< iconify openmoji person >}} Your Turn

::: callout-note
### Datasets
<a href="../../../../../materials/Data/qdd-data.zip">
<i class="fa-solid fa-database"></i> Datasets</a>

1.  Click on the Dataset Icon above, and unzip that archive. Try to make
    distribution plots with each of the three tools.
:::

::: callout-note
### CalmCode
2.  A dataset from calmcode.io <https://calmcode.io/datasets.html>
:::

:::callout-note
### From [Groups](../24-BoxPlots/index.qmd#your-turn)
3.  Datasets from the earlier module on [Groups](../24-BoxPlots/index.qmd#your-turn).
:::

`inspect` the dataset in each case and develop a set of Questions, that
can be answered by appropriate stat measures, or by using a chart to
show the distribution.


## {{< iconify ooui references-rtl >}} References

1. Winston Chang (2024). *R Graphics Cookbook*. <https://r-graphics.org>
1. See the scrolly animation for a histogram at this website: *Exploring Histograms, an essay by Aran Lunzer and Amelia McNamara*
<https://tinlizzie.org/histograms/?s=09>\
1. Minimal R using
`mosaic`.<https://cran.r-project.org/web/packages/mosaic/vignettes/MinimalRgg.pdf>\
1. Sebastian Sauer, *Plotting multiple plots using purrr::map and ggplot* [](https://data-se.netlify.app/2021/02/06/plotting-multiple-plots-using-purrr-map-and-ggplot/)\

::: {#refs style="font-size: 60%;"}
###### {{< iconify lucide package-check >}} R Package Citations

```{r}
#| echo: false
#scan_packages()
cite_packages(
  output = "table",
  out.dir = ".",
  out.format = "html",
  pkgs = c("ggnormalviolin","ggridges", "NHANES", "TeachHist",
           "TeachingDemos", "visualize", "tidyplots", "tinytable", "tinyplot")
) %>%
  knitr::kable(format = "simple")

```
:::
