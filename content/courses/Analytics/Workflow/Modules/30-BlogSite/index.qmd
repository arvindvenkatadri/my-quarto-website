---
title:  <iconify-icon icon="entypo:publish" width="1.2rem" height="1.2rem"></iconify-icon> I Publish, therefore I Am
author: "Arvind V"
date: 23/Jun/2024
date-modified: "`r Sys.Date()`"
abstract-title: "Abstract"
abstract: "Putting it all out there on the web"
order: 30
image: preview.jpg
image-alt: Image by rawpixel.com
df-print: paged
categories:
- Quarto
- Netlify
- Github
d2:
  layout: elk
  theme: "CoolClassics"
  height: "50%"

citation: true
#suppress-bibliography: true
editor:
  markdown:
    wrap: 72
# webr:
#   packages: ['readr', 'tidyr', 'dplyr','mosaic', 'skimr', 'ggformula','ggridges', 'palmerpenguins']
---

::: pa4
::: {.athelas .ml0 .mt0 .pl4 .black-90 .bl .bw2 .b--blue}
["Most institutions demand unqualified faith; but the institution of science makes skepticism a virtue."]{.f5 .f4-m .f3-l .lh-copy
.measure .mt0}

[--- Robert King Merton, sociologist (4 Jul 1910-2003)]{.f6 .ttu .tracked .fs-normal}
:::
:::

## Setting up Git and GitHub

1. Windows: Head off <https://gitforwindows.org> and download and install the `git` app.

1. MacOS: In a terminal type:

- `xcode-select --install`

This will also install git.

1. Head off to <https://github.com> and register for an account. Make a note of your `emailID` and the `password` used.

1. Setup 2FA Authentication for GitHub based on instructions here: <https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa>


## Linking RStudio and GitHub (One Time Only)

1. In RStudio, in your console:

- `install.packages(usethis)`
- `library(usethis)`
- `usethis::use_git_config(user.name = "Your Name", user.email = "Your Email ID used on GitHub")`

2. Generate a Personal Access Token(PAT) (One Time Only, usually)

- `usethis::create_github_token()`
This will open a browser window and ask you to log in to GitHub.

In the popup window, give your token a logical name you can remember(e.g. "For my Mac"), and remember why you created it. Check the `scopes` of the PAT; the defaults are OK. Make sure selecting `repo`, `user`, and `workflow` are checked. **Save the PAT** in your password manager. Default `Expiry` is 30days; we can set the PAT to not expire too. (I have.)

3. Let RStudio have your PAT (One Time Only, usually)

- `gitcreds::gitcreds_set()`
and paste the PAT when asked. 

4. Check if all is OK using one or more of:

- `usethis::gh_token_help()`
- `usethis::git_sitrep()`
- `gh::gh_whoami()`

4. Check in RStudio if has **automatically** detected your Git installation.

- `Tools -> Global Options -> Git/SVN`

![RStudio Project Options Window](../../../../../materials/images/windows-rstudio-git-executable-screenshot.png){#fig-RStudio-Git-Executable fig-align="center" width="100%"}

The `Git Executable` field should be like: 

- Windows: `C:/Program Files/Git/bin/git.exe`.
- MacOS:`/usr/bin/git`


5. Let RStudio know which project branch to commit/push to GitHub. ( Default is "main")

- `usethis::git_default_branch_configure()`


## Creating your Blog Project in RStudio (One Time Only)

In the upper right corner of RStudio, click on:

`Project -> New Project -> New Directory -> Quarto Blog`

![New Quarto Blog Project](../../../../../materials/images/new-quarto-blog-project.png){#fig-New-Quarto-Blog-Project fig-align="center" width="100%"}

Name your Blog, browse to where you want the Blog Project Folder (default is fine). Check the `Create a git repository`. Click `Create Project`. 

RStudio will restart with a new Blog Project. The Files pane should like this:

![Quarto Blog Contents](../../../../../materials/images/grand-new-blog.png){#fig-Grand-New-Blog fig-align="center" width="100%"}
The `posts` folder contains dummy blog posts, which you can retain for now and delete once your own content has matured.

## Making your Blog ready to publish (Now, and every time you have new content)

In your Terminal:

- `quarto render`
This will render all posts and prepare `_site` and `_freeze` folders in your Files tab. Check these. 
- `quarto preview`
This will pop up your browser and show you a preview of your Blog website. Check the look and feel, the typos.

## Pushing to GitHub for the First Time

In your Console:

- `usethis::use_git()`: This will throw up a funky set of messages asking if you are ready to `commit` all files to `push` to Github. Choose the appropriate reply and enter. 
- `usethis::use_github()`: This will create your new repository on Github and `push` all the committed files there. Your browser will open in Github and show you the contents of your new Blog repository.


## Connecting to Netlify

1.  Head off to <https://www.netlify.com>. Log in there with Github. 

2.  Click `Add new site -> Import from existing project`

![Netlify Window](../../../../../materials/images/netlify-new-project-from-template.png){#fig-Netlify-New-Project fig-align="center" width="100%"}

3.  Choose `Github`, then point to your Blog Github repo. 

4. Give your Blog site a name: `something-idiotic.netlify.app`. Check Availability. (Note: `netlify.app` at the end is not removable, if you want free web-hosting at netlify)

5. Ensure that the branch says `main`, and that the `Publish directory` says `_site`.

6. Hit `Deploy`. Netlify will ta ke a few minutes and then say the site is deployed. Click on the URL.

7. There!


## Adding Content and Updating

1. Create a new folder inside your `posts` folder. Name it something like `new-post-todays-date`. Hyphens only, no underscores. 

1. Create a new Quarto Document: `File -> New-File -> New Quarto Document`. Save it as `index.qmd` inside your just-created `new-post-todays-date` folder.

1. Edit / Write up your `index.qmd` Post. Add pictures, videos, code, visualizations, explanations. Use <https://quarto.org> to find other Markdown constructs ( tabs , asides, marginal content...) and complete your post.

1. In your Terminal, run `quarto render`to update your `_site` and `_freeze` folders. 

1. In your Terminal run `quarto preview` to check if your new post previews properly. 

1. In your Git pane, you will see a list of changed files. Click on the `Commit` button, type in a commit message like `Added new post on <date>`, and then click `Commit`.

1. In the Git pane, click on the `Push` button to push your changes to Github.

1. In your browser, head off to your Github repo and check if the new post is there.

1. In your browser, head off to your Netlify site URL. You should see your new post there, in the list of posts.

1. **Using GUI for git commit and push**: Instead of using the Terminal, or the Git pane in Rstudio, there is a better way. This is a GUI, and one can see the files, the history of commits/pushes, the commit messages, revert back to a point in history, make brances...all that visually, without some tough-looking git commands:

  - So, install a git client, such as [Gitkraken](https://www.gitkraken.com). 
  - It offers a ready prompt to log in with Github, accept that, filling in ID and password. 
  - Open `File ->New tab` -> `Browse for Repo` and browse to your Blog project folder (which is what you open in RStudio)
  - You will a list of previous commits, and a bunch of new edited / changed files which are default labelled `WIP`. (Work in Progress, peasants)

![Gitkraken Window](../../../../../materials/images/gitkraken-wip.png){#fig-Gitkraken-WIP fig-align="center" width="100%"}

  - Click on `Stage All` and type in a memorable `commit` message in the box below at right.
  - The `WIP` will be replaced by your `commit message`.
  - Once `staging` is done, hit the `Push` button on the main tool bar. 
  - After Gitkraken is done, a brief popup will show stating `push` was successful.
  - Your website should be updated in a few minutes.
  
Yeah, peasants, you're welcome as always.


## Branding your Website

Quarto now has a separate feature to enable a consistent look and feel for your website. All documents, HTML, revealjs presentations, and PDFs can be styled using a `_brand_yml` file. The `_brand_yml` file allows setting of fonts for the logo, headings, code, colour schemes, and other visual elements of your website. The details are available from the [Quarto Website](https://posit-dev.github.io/brand-yml/). Here is a quick sample of the file:

![Sample _brand.yml file](../../../../../materials/images/carbon.png){#fig-brand-yml-sample fig-align="center" width="100%"}


Also, Albert Rapp has a nice [blog post](https://3mw.albert-rapp.de/p/brand-yml-one-theme-to-style-them-all) on how to use the `_brand.yml` file to style your website.


## Workflow Diagram

``` d2

One Time: {
Github -> Account: create
Github -> Install: "git"
Account -> RStudio: "usethis setup"
}

One Time: {
RStudio -> New Blog Project:create
New Blog Project -> Note the Git Panel: "Git Panel"
}

One Time: {
Netlify -> Login with Github
Netlify -> New Website
New Website -> From Github repo 
From Github repo -> Choose Repo: access {
  style.stroke-dash: 3
}
Choose Repo -> Choose Name for website 
Choose Name for website -> Specify folder: "\\_site"
Specify folder -> Deploy!!!
}


RStudio Workflow: {
RStudio -> New Folder
New Folder -> Create Post: "index.qmd"
Create Post -> Terminal
Terminal -> Prepare Site: "quarto render\n quarto preview"
Prepare Site -> GitKraken
Gitkraken -> Done for Now: "stage all, push"
Done for Now -> RStudio: "Rinse and Repeat"
}

```


## References

1. <https://jcoliver.github.io/learn-r/010-github.html>

1. <https://info5940.infosci.cornell.edu/setup/git/git-configure/>

1. <https://posit-conf-2024.github.io/quarto-websites/>

1. Alice Bartlett. *Git for Humans* <https://speakerdeck.com/alicebartlett/git-for-humans>


